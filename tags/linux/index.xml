<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>linux - 标签 - 在阅读中遇见自己</title>
        <link>https://freerun.site/tags/linux/</link>
        <description>linux - 标签 - 在阅读中遇见自己</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>823715972@qq.com (Ylimhs)</managingEditor>
            <webMaster>823715972@qq.com (Ylimhs)</webMaster><lastBuildDate>Tue, 27 Aug 2024 14:53:33 &#43;0800</lastBuildDate><atom:link href="https://freerun.site/tags/linux/" rel="self" type="application/rss+xml" /><item>
    <title>kibana-6.8.4 arm环境下编辑安装</title>
    <link>https://freerun.site/kibana/</link>
    <pubDate>Tue, 27 Aug 2024 14:53:33 &#43;0800</pubDate>
    <author>Ylimhs</author>
    <guid>https://freerun.site/kibana/</guid>
    <description><![CDATA[<ul>
<li>环境：centos7    aarch64架构</li>
</ul>
<h2 id="安装依赖">安装依赖</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">yum install net-tools passwd  java java-devel vim wget -y
</code></pre></td></tr></table>
</div>
</div><h2 id="解决方法如下">解决方法如下</h2>
<p>wget的链接需要魔法才能下载，在这提供一个下载好的部署包</p>
<p><a href="/package/node-v10.15.2-linux-arm64.tar.gz" rel="">node-v10.15.2-linux-arm64.tar.gz</a>
</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">#下载kibana安装包</span>
wget https://artifacts.elastic.co/downloads/kibana/kibana-6.8.4-linux-x86_64.tar.gz

<span class="c1">#解压</span>
tar -xf kibana-6.8.4-linux-x86_64.tar.gz
 
<span class="c1">#查看node</span>
<span class="o">[</span>root@b156873121b1 node<span class="o">]</span><span class="c1"># cd /opt/kibana-6.8.4-linux-x86_64/node</span>
<span class="o">[</span>root@b156873121b1 node<span class="o">]</span><span class="c1"># file ./bin/node</span>
./bin/node: ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>GNU/Linux<span class="o">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="k">for</span> GNU/Linux 2.6.18, BuildID<span class="o">[</span>sha1<span class="o">]=</span>f135ef59856912584f7b9668f5ff750135716af3, with debug_info, not stripped

<span class="c1">#删除node</span>
<span class="o">[</span>root@b156873121b1 kibana-6.8.4-linux-x86_64<span class="o">]</span><span class="c1"># rm -rf node</span>

<span class="c1">#下载arm架构的node</span>
<span class="o">[</span>root@b156873121b1 kibana-6.8.4-linux-x86_64<span class="o">]</span>$ wget https://nodejs.org/dist/v10.15.2/node-v10.15.2-linux-arm64.tar.gz
<span class="o">[</span>root@b156873121b1 kibana-6.8.4-linux-x86_64<span class="o">]</span>$ tar -xf node-v10.15.2-linux-arm64.tar.gz 
<span class="o">[</span>root@b156873121b1 kibana-6.8.4-linux-x86_64<span class="o">]</span>$ mv node-v10.15.2-linux-arm64 node

-----------------------------------------------------------------------
<span class="c1">#修改kibana配置文件,vim config/kibana.yml</span>

server.port: <span class="m">5601</span>
server.host: <span class="s2">&#34;0.0.0.0&#34;</span>
<span class="c1"># 这里要配置kibana的基础路径</span>
server.basePath: <span class="s2">&#34;/kibana&#34;</span>
elasticsearch.hosts: <span class="o">[</span><span class="s2">&#34;http://10.21.232.131:9200&#34;</span><span class="o">]</span>
kibana.index: <span class="s2">&#34;.kibana&#34;</span>
elasticsearch.username: <span class="s2">&#34;user&#34;</span>
elasticsearch.password: <span class="s2">&#34;passworod&#34;</span>
i18n.locale: <span class="s2">&#34;zh-CN&#34;</span>
-----------------------------------------------------------------------

<span class="c1">#创建账号</span>
<span class="c1">#kibana默认禁止root启动，需要创建账号</span>
useradd <span class="nb">test</span>
passwd <span class="nb">test</span>
usermod -G test:test
chown -R test:test /opt/kibana-6.8.4-linux-x86_64

<span class="o">[</span>root@b156873121b1 kibana-6.8.4-linux-x86_64<span class="o">]</span><span class="c1"># su test</span>
<span class="o">[</span>test@b156873121b1 kibana-6.8.4-linux-x86_64<span class="o">]</span>$ 
<span class="o">[</span>test@b156873121b1 kibana-6.8.4-linux-x86_64<span class="o">]</span>$ nohub ./bin/kibana <span class="p">&amp;</span>
<span class="o">[</span>root@b156873121b1 /<span class="o">]</span><span class="c1"># netstat -nltp</span>
Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:5601            0.0.0.0:*               LISTEN      398/./bin/../node/b 
tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:9200          0.0.0.0:*               LISTEN      155/java            
tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:9300          0.0.0.0:*               LISTEN      155/java  

</code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Liunx系统分区与扩容</title>
    <link>https://freerun.site/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/</link>
    <pubDate>Mon, 20 May 2024 16:48:38 &#43;0800</pubDate>
    <author>Ylimhs</author>
    <guid>https://freerun.site/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/</guid>
    <description><![CDATA[<h2 id="1挂载目录">1、挂载目录</h2>
<p>注释：xfs和ext4是Linux操作系统中常见的两种文件系统</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#格式化文件系统</span>
mkfs.ext4 /dev/sdb

<span class="c1">#查看文件系统</span>
blkid /dev/sdb

<span class="c1">#挂载分区到目录</span>
vim /etc/fstab 
<span class="c1">#把这一段写入fstab文件：/dev/sdb /home ext4 defaults 0 0</span>
mount -a
</code></pre></td></tr></table>
</div>
</div><h2 id="2新磁盘创建卷组与逻辑卷并且挂载home目录">2、新磁盘创建卷组与逻辑卷并且挂载/home目录</h2>
<p><strong>只有lvm(逻辑卷才能扩容)，下图意思是：有9块物理硬盘，其中有6块硬盘组成一个卷组，然后这个卷组了20g给逻辑卷用：物理卷（PV）、卷组（VG）和逻辑卷（LV）</strong></p>
<p></p>
<h3 id="pvcreate-创建物理卷">pvcreate 创建物理卷</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#首先是创建PV，上图中的9块硬盘，centos7以上系统直接可以省略这步骤 pvcreate /dev/sdb  /dev/sdc1</span>

<span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># pvcreate  /dev/sdb /dev/sdc 				#直接将磁盘或某个分区转化为物理卷，</span>
  Physical volume <span class="s2">&#34;/dev/sdb&#34;</span> successfully created.
  Physical volume <span class="s2">&#34;/dev/sdc&#34;</span> successfully created.
<span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># pvs											#查看有哪些物理卷</span>
  PV         VG Fmt  Attr PSize  PFree
  /dev/sda2  cl lvm2 a--  11.00g 4.00m
  /dev/sdb      lvm2 ---   8.00g 8.00g
  /dev/sdc      lvm2 ---   6.00g 6.00g
</code></pre></td></tr></table>
</div>
</div><h3 id="vgcreate-创建卷组">vgcreate 创建卷组</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#创建卷组（虚拟硬盘）:vgcreate 卷组名 物理卷1 物理卷2 ..... </span>
<span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># vgcreate my_data /dev/sdb /dev/sdc	#创建一个名为my_data的卷组并将sdb和sdc物理卷加入其中，PE的大小默认为4M</span>
<span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># vgs	#查看卷组，下面有一个创建好的my_data卷组为1G</span>
  VG      <span class="c1">#PV #LV #SN Attr   VSize    VFree   </span>
  centos    <span class="m">1</span>   <span class="m">2</span>   <span class="m">0</span> wz--n-   &lt;9.00g    4.00m
  my_data   <span class="m">1</span>   <span class="m">0</span>   <span class="m">0</span> wz--n- 1020.00m 1020.00m 
</code></pre></td></tr></table>
</div>
</div><h3 id="lvcreate-创建逻辑卷">lvcreate 创建逻辑卷</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># lvcreate -n lv_data -L 500M  my_data		#在my_data卷组上创建一个名称叫lv_data的500M的逻辑卷</span>
  Logical volume <span class="s2">&#34;lv_data&#34;</span> created.
<span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># lvs</span>
  LV      VG      Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  root    centos  -wi-ao----   7.99g                                                    
  swap    centos  -wi-ao----   1.00g                                                    
  lv_data my_data -wi-a----- 500.00m  
</code></pre></td></tr></table>
</div>
</div><p><strong>重点：</strong>
当我们lvcreate创建一个逻辑卷的时候，其实相当于生成了一个磁盘设备文件，这是由lvm的mapper机制决定，Linux会新建两个软链接文件，如<code>/dev/vg_name/lv_name、/dev/mapper/vg_name-lv_name</code>，而这2个文件都是指向<code>/dev/dm-X</code> 块设备文件的，所以，当我们使用<code>df -h</code>看到的<code>/dev/mapper/vg_name-lv_name</code>的时候，这个其实就是和<code>/dev/vg_name/lv_name</code>一样的，都是指向<code>/dev/dm-X</code> 块设备文件的。</p>
<h3 id="mkfs-格式化分区并创建文件系统">mkfs 格式化分区并创建文件系统</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># mkfs.ext4 /dev/sdb  #格式化磁盘分区为ext4文件系统，这一步也可以忽略</span>
mke2fs 1.42.9 <span class="o">(</span>28-Dec-2013<span class="o">)</span>
/dev/sdb is entire device, not just one partition!

<span class="c1">#对上面刚才创建的lv进行格式化并创建ext4类型的文件系统</span>
<span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># mkfs.ext4 /dev/my_data/lv_data  </span>

<span class="c1">#挂载分区到目录</span>
vim /etc/fstab 
<span class="c1">#把这一段写入fstab文件：/dev/my_data/lv_data /home ext4 defaults 0 0</span>
mount -a

df -hT
</code></pre></td></tr></table>
</div>
</div><h2 id="3linux系统扩容lvm磁盘空间">3、Linux系统扩容Lvm磁盘空间</h2>
<p><strong>扩容步骤为：先扩容卷组 -&gt; 再扩容逻辑卷 -&gt;刷新文件系统</strong></p>
<h3 id="vgextend-扩容卷组即把物理卷加入卷组">vgextend 扩容卷组，即把物理卷加入卷组</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># vgs       #还剩下520M的容量</span>
  VG      <span class="c1">#PV #LV #SN Attr   VSize    VFree  </span>
  centos    <span class="m">1</span>   <span class="m">2</span>   <span class="m">0</span> wz--n-   &lt;9.00g   4.00m
  my_data   <span class="m">1</span>   <span class="m">1</span>   <span class="m">0</span> wz--n- 1020.00m 520.00m
  
<span class="c1">#vgextend 命令把sdd1物理卷加入my_data卷组（sdd1已经是物理卷了，my_data是卷组名称）</span>
<span class="o">[</span>root@localhost /<span class="o">]</span><span class="c1"># vgextend my_data /dev/sdd1	</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="lvextend扩容逻辑卷即把卷组空间加入到逻辑卷中">lvextend扩容逻辑卷，即把卷组空间加入到逻辑卷中</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#/dev/my_data/lv_data这个逻辑卷增加520M</span>
<span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># lvextend -L +520M /dev/my_data/lv_data  </span>
	Size of logical volume my_data/lv_data changed from 500.00 MiB <span class="o">(</span><span class="m">125</span> extents<span class="o">)</span> to 1020.00 MiB <span class="o">(</span><span class="m">255</span> extents<span class="o">)</span>.
  Logical volume my_data/lv_data successfully resized.

<span class="c1">#这个时候发现lv_data这个逻辑卷已经扩大到1G</span>
<span class="o">[</span>root@c2 ~<span class="o">]</span><span class="c1"># lvs </span>
  LV      VG      Attr       LSize    Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  root    centos  -wi-ao----    7.99g                                                    
  swap    centos  -wi-ao----    1.00g                                                    
  lv_data my_data -wi-ao---- 1020.00m  

<span class="c1">#但是df查看容量没有加载，这个时候需要刷新才行</span>
<span class="o">[</span>root@c2 ~<span class="o">]</span><span class="c1"># df -hT /home/ </span>
文件系统                    类型  容量  已用  可用 已用% 挂载点
/dev/mapper/my_data-lv_data ext4  477M  2.3M  445M    1% /home

<span class="c1">#查看你的逻辑卷是什么文件系统类型，如果是xfs文件系统，使用xfs_growfs命令扩展容量：</span>
xfs_growfs /dev/mysql/lv_data
<span class="c1">#查看你的逻辑卷是什么文件系统类型，如果是ext4文件系统，使用resize2fs命令扩展容量：</span>
resize2fs /dev/root_vg/root
</code></pre></td></tr></table>
</div>
</div><h2 id="4扩容根分区">4、扩容根分区</h2>
<p><strong>注释：首先确定根分区是不是lvm卷，如果不是那就不允许扩容</strong></p>
<p><strong>扩容步骤为：先扩容卷组 -&gt; 再扩容逻辑卷 -&gt;刷新文件系统</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">#查询卷组，查看卷组名为centos的卷组是否有容量扩容，下面显示vFree为4.00M,显然已经不够扩容</span>
<span class="o">[</span>root@c2 ~<span class="o">]</span><span class="c1"># vgs   </span>
  VG      <span class="c1">#PV #LV #SN Attr   VSize    VFree</span>
  centos    <span class="m">1</span>   <span class="m">2</span>   <span class="m">0</span> wz--n-   &lt;9.00g 4.00m
<span class="c1">#查询是否有分区给卷组扩容</span>
<span class="o">[</span>root@c2 ~<span class="o">]</span><span class="c1"># lsblk </span>

<span class="c1">#vgextend 命令把sdd物理卷加入centos卷组（sdd已经是物理卷了，centos是卷组名称）</span>
<span class="o">[</span>root@localhost /<span class="o">]</span><span class="c1"># vgextend centos /dev/sdd</span>

<span class="c1">#/dev/centos/root这个逻辑卷增加50G</span>
<span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># lvextend -L +50G /dev/centos/root  </span>

<span class="c1">#但是df查看容量没有加载，这个时候需要刷新才行</span>
<span class="o">[</span>root@c2 ~<span class="o">]</span><span class="c1"># df -hT / </span>
文件系统                类型  容量  已用  可用 已用% 挂载点
/dev/mapper/centos-root ext4  7.8G  6.9G  483M   94% /

<span class="c1">#查看你的逻辑卷是什么文件系统类型，如果是xfs文件系统，使用xfs_growfs命令扩展容量：</span>
xfs_growfs /dev/mysql/lv_data
<span class="c1">#查看你的逻辑卷是什么文件系统类型，如果是ext4文件系统，使用resize2fs命令扩展容量：</span>
resize2fs /dev/root_vg/root
</code></pre></td></tr></table>
</div>
</div><h2 id="lv缩容">lv缩容</h2>
<p><strong>缩容lv一般是腾出空间给同vg的其他lv，这并不是一种安全的做法，一般情况下没有人会这么干，一般当lv卷磁盘空间满的时候，会加磁盘来扩容，而不是从同vg下的其他lv腾空间出来，这里仅做出示例：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">umount /dev/mapper/my_data-lv_data				<span class="c1">#卸载lv</span>
e2fsck -f /dev/mapper/my_data-lv_data			<span class="c1">#先扫描、检查磁盘在执行resize2fs，不然它会提示你先执行e2fsck -f命令的</span>
resize2fs /dev/mapper/my_data-lv_data 100G		<span class="c1">#缩容文件系统到100G</span>
lvreduce -L 100G /dev/mapper/my_data-lv_data	<span class="c1">#缩容，lv到100G,此时vg就空闲了很多PE出来了，可以通过vgdisplay命令查看</span>
lvreduce -L -100G /dev/mapper/my_data-lv_data	<span class="c1">#缩容，lv缩减100G,此时vg就空闲了很多PE出来了，可以通过vgdisplay命令查看</span>
mount /dev/mapper/my_data-lv_data /my_data/		<span class="c1">#重新挂载，此时文件系统就是100G大小</span>

<span class="c1">#以上缩容发现，一个是需要卸载，这点可以影响业务，其次缩容后重新挂载，原来的文件仍存在，没有丢失。</span>

<span class="c1">#下面是一个例子</span>
/dev/mapper/vg--data-lv1T 1008G   77M  957G   1% /gpt1
/dev/mapper/vg--data-lv2   2.0T   81M  1.9T   1% /gpt2
<span class="o">[</span>root@kubernetes ~<span class="o">]</span><span class="c1"># vgs</span>
  VG      <span class="c1">#PV #LV #SN Attr   VSize   VFree</span>
  centos    <span class="m">1</span>   <span class="m">2</span>   <span class="m">0</span> wz--n- &lt;19.00g    <span class="m">0</span> 
  vg-data   <span class="m">1</span>   <span class="m">2</span>   <span class="m">0</span> wz--n-  &lt;3.00t    <span class="m">0</span> 
<span class="o">[</span>root@kubernetes ~<span class="o">]</span><span class="c1"># lvdisplay /dev/vg-data/lv1T /dev/vg-data/lv2</span>
  --- Logical volume ---
  LV Path                /dev/vg-data/lv1T
  LV Name                lv1T
  VG Name                vg-data
  LV UUID                oYtQ0a-hUQA-pVkK-e8iy-NFam-eRs4-PrMsZW
  LV Write Access        read/write
  LV Creation host, <span class="nb">time</span> kubernetes, 2023-03-29 10:20:33 +0800
  LV Status              available
  <span class="c1"># open                 1</span>
  LV Size                1.00 TiB
  Current LE             <span class="m">262144</span>
  Segments               <span class="m">1</span>
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="nb">set</span> to     <span class="m">8192</span>
  Block device           253:2
   
  --- Logical volume ---
  LV Path                /dev/vg-data/lv2
  LV Name                lv2
  VG Name                vg-data
  LV UUID                APJ81S-hOEC-LCfp-Oamo-5OTk-C8pA-GLhN2L
  LV Write Access        read/write
  LV Creation host, <span class="nb">time</span> kubernetes, 2023-03-29 10:21:08 +0800
  LV Status              available
  <span class="c1"># open                 1</span>
  LV Size                &lt;2.00 TiB
  Current LE             <span class="m">524287</span>
  Segments               <span class="m">1</span>
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="nb">set</span> to     <span class="m">8192</span>
  Block device           253:3
<span class="o">[</span>root@kubernetes ~<span class="o">]</span><span class="c1"># </span>

<span class="c1">#打算对/gpt1缩减100G，腾出空间给/gpt2：</span>
umount  /gpt1
e2fsck -f  /dev/mapper/vg--data-lv1T
<span class="c1">#注意这条命令是缩减文件系统到多少G，957-100=857</span>
resize2fs /dev/mapper/vg--data-lv1T  857G

<span class="c1">#重新挂载，现在是844G</span>
mount /dev/mapper/vg--data-lv1T /gpt1/
<span class="o">[</span>root@kubernetes ~<span class="o">]</span><span class="c1"># df -h</span>
Filesystem                 Size  Used Avail Use% Mounted on
/dev/mapper/vg--data-lv1T  844G   77M  801G   1% /gpt1


<span class="c1"># 文件系统缩减了但是lv没有缩减呀，你看看：</span>
<span class="o">[</span>root@kubernetes ~<span class="o">]</span><span class="c1"># lvdisplay /dev/mapper/vg--data-lv1T</span>
  --- Logical volume ---
  LV Path                /dev/vg-data/lv1T
  LV Name                lv1T
  VG Name                vg-data
  LV UUID                oYtQ0a-hUQA-pVkK-e8iy-NFam-eRs4-PrMsZW
  LV Write Access        read/write
  LV Creation host, <span class="nb">time</span> kubernetes, 2023-03-29 10:20:33 +0800
  LV Status              available
  <span class="c1"># open                 1</span>
  LV Size                1.00 TiB			<span class="c1">#和没缩减文件系统时一模一样</span>
  Current LE             262144			<span class="c1">#和没缩减文件系统时一模一样</span>
  Segments               1	
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="nb">set</span> to     <span class="m">8192</span>
  Block device           253:2
   
<span class="c1"># 所以现在开始缩减lv,这里我们写-100G</span>
lvresize -L -100G  /dev/vg-data/lv1T

<span class="c1">#缩减成功，但是好像不对，lv显示924G，挂载之后的文件系统怎么才844G</span>
<span class="o">[</span>root@kubernetes ~<span class="o">]</span><span class="c1"># lvdisplay /dev/mapper/vg--data-lv1T</span>
  --- Logical volume ---
  LV Path                /dev/vg-data/lv1T
  LV Name                lv1T
  VG Name                vg-data
  LV UUID                oYtQ0a-hUQA-pVkK-e8iy-NFam-eRs4-PrMsZW
  LV Write Access        read/write
  LV Creation host, <span class="nb">time</span> kubernetes, 2023-03-29 10:20:33 +0800
  LV Status              available
  <span class="c1"># open                 1</span>
  LV Size                924.00 GiB
  Current LE             <span class="m">236544</span>
  Segments               <span class="m">1</span>
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="nb">set</span> to     <span class="m">8192</span>
  Block device           253:2
 
<span class="o">[</span>root@kubernetes ~<span class="o">]</span><span class="c1"># vgs	#vg多了100G</span>
  VG      <span class="c1">#PV #LV #SN Attr   VSize   VFree  </span>
  vg-data   <span class="m">1</span>   <span class="m">2</span>   <span class="m">0</span> wz--n-  &lt;3.00t 100.00g
  
<span class="o">[</span>root@kubernetes ~<span class="o">]</span><span class="c1"># df -h /dev/vg-data/lv1T</span>
Filesystem                 Size  Used Avail Use% Mounted on
/dev/mapper/vg--data-lv1T  844G   77M  801G   1% /gpt1
<span class="o">[</span>root@kubernetes ~<span class="o">]</span><span class="c1"># 重新卸载重新挂载也是一样的，怎么回事？</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="5删除逻辑卷删除卷组">5、删除逻辑卷、删除卷组</h2>
<p>一般不会这样干，这里只做示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># umount  /dev/mapper/my_data-lv_data			#删除一个lv之前必须先卸载文件系统</span>
<span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># lvremove /dev/my_data/lv_data				#删除逻辑卷,如果不知道lv的路径，可以通过lvdisplay命令查看</span>
Do you really want to remove active logical volume my_data/lv_data? <span class="o">[</span>y/n<span class="o">]</span>: y
  Logical volume <span class="s2">&#34;lv_data&#34;</span> successfully removed




root@localhost ~<span class="o">]</span><span class="c1"># vgremove  my_data					#删除整个卷组</span>
Do you really want to remove volume group <span class="s2">&#34;my_data&#34;</span> containing <span class="m">1</span> logical volumes? <span class="o">[</span>y/n<span class="o">]</span>: y
  Volume group <span class="s2">&#34;my_data&#34;</span> is removed







<span class="c1">#删除物理卷，该物理卷必须从vg中卸载下来，使用vgreduce my_data /dev/sdd1卸载即可</span>
<span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># pvremove /dev/sdd1</span>
  Removed <span class="s2">&#34;/dev/sdd1&#34;</span> from volume group <span class="s2">&#34;my_data&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>最后献上这篇博客的<a href="https://blog.csdn.net/MssGuo/article/details/120473476" target="_blank" rel="noopener noreffer">参考文章</a>
</p>
]]></description>
</item>
<item>
    <title>Linux扩容home目录</title>
    <link>https://freerun.site/linux%E6%89%A9%E5%AE%B9home%E7%9B%AE%E5%BD%95/</link>
    <pubDate>Sat, 18 Sep 2021 15:19:40 &#43;0800</pubDate>
    <author>Ylimhs</author>
    <guid>https://freerun.site/linux%E6%89%A9%E5%AE%B9home%E7%9B%AE%E5%BD%95/</guid>
    <description><![CDATA[<p>机器装了一块新硬盘, 先使用sudo fdisk -l看看新添加的硬盘叫什么, 我的叫sdb接下来按照这篇文章操作即可, 该文章新挂载的硬盘叫sdb1, 注意替换成自己的硬盘名</p>
<p>注释：先使用<code>sudo fdisk -l</code>看看新添加的硬盘叫什么,我的叫sdb1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">lsblk -f <span class="c1">#列出块设备列表，-f用于输出文件系统的详细信息</span>
</code></pre></td></tr></table>
</div>
</div><p>0.格式化分区</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mkfs.ext4 /dev/sdb1
</code></pre></td></tr></table>
</div>
</div><p>1.创建目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mkdir /media/home
</code></pre></td></tr></table>
</div>
</div><p>2.把/dev/sdb1挂载到/media/home</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mount /dev/sdb1 /media/home
</code></pre></td></tr></table>
</div>
</div><p>3.执行几次sync命令,确保文件系统数据都落盘</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sync  <span class="c1">#执行三次或更多次sync命令</span>

<span class="c1">#在Linux系统中，为了加快数据的读取速度，所以在默认的情况中， 某些已经加载内存中的数据将不会直接被写回硬盘，而是先缓存在内存当中，如此一来， 如果一个数据被你重复的改写，那么由于他尚未被写入硬盘中，因此可以直接由内存当中读取出来， 在速度上一定是快上相当多的！</span>

<span class="c1">#不过，如此一来也造成些许的困扰，那就是万一你的系统因为某些特殊情况造成不正常关机 (例如停电或者是不小心踢到power)时，由于数据尚未被写入硬盘当中，哇！所以就会造成数据的升级不正常啦！ 那要怎么办呢？这个时候就需要sync这个命令来进行数据的写入动作啦！ 直接在文字接口下输入sync，那么在内存中尚未被升级的数据，就会被写入硬盘中！所以，这个命令在系统关机或重新启动之前， 很重要喔！最好多运行几次(2-4次)！</span>
</code></pre></td></tr></table>
</div>
</div><p>4.同步/home到/media/home</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">rsync -aXS /home/. /media/home/.
<span class="c1">#或者加上-v详细模式输出 rsync -avXS /home/. /media/home/.</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback"># Options
-v, --verbose 			# 详细模式输出。(打印一些信息，比如文件列表、文件数量等)
-q, --quiet 			# 精简输出模式。
-c, --checksum 			# 打开校验开关，强制对文件传输进行校验。
-a, --archive 			# 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。
-r, --recursive 		# 对子目录以递归模式处理。
-R, --relative 			# 使用相对路径信息。
-b, --backup 			# 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。
--backup-dir 			# 将备份文件(如~filename)存放在在目录下。
-suffix=SUFFIX 			# 定义备份文件前缀。
-u, --update 			# 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。
-l, --links 			# 保留软链结。
-L, --copy-links 		# 想对待常规文件一样处理软链结。
--copy-unsafe-links		# 仅仅拷贝指向SRC路径目录树以外的链结。
--safe-links 			# 忽略指向SRC路径目录树以外的链结。
-H, --hard-links 		# 保留硬链结。
-p, --perms 			# 保持文件权限。
-o, --owner 			# 保持文件属主信息。
-g, --group 			# 保持文件属组信息。
-D, --devices 			# 保持设备文件信息。
-t, --times 			# 保持文件时间信息。
-S, --sparse 			# 对稀疏文件进行特殊处理以节省DST的空间。
-n, --dry-run			# 现实哪些文件将被传输。
-w, --whole-file 		# 拷贝文件，不进行增量检测。
-x, --one-file-system	# 不要跨越文件系统边界。
-X, --xattrs			# 保留扩展属性
-B, --block-size=SIZE	# 检验算法使用的块尺寸，默认是700字节。
-e, --rsh=command 		# 指定使用rsh、ssh方式进行数据同步。
--rsync-path=PATH 		# 指定远程服务器上的rsync命令所在路径信息。
-C, --cvs-exclude 		# 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件。
--existing				# 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件。
--delete				# 删除那些DST中SRC没有的文件。
--delete-excluded 		# 同样删除接收端那些被该选项指定排除的文件。
--delete-after 			# 传输结束以后再删除。
--ignore-errors 		# 及时出现IO错误也进行删除。
--max-delete=NUM 		# 最多删除NUM个文件。
--partial				# 保留那些因故没有完全传输的文件，以是加快随后的再次传输。
--force					# 强制删除目录，即使不为空。
--numeric-ids 			# 不将数字的用户和组id匹配为用户名和组名。
--timeout=time 			# ip超时时间，单位为秒。
-I, --ignore-times 		# 不跳过那些有同样的时间和长度的文件。
--size-only 			# 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。
--modify-window=NUM		# 决定文件是否时间相同时使用的时间戳窗口，默认为0。
-T --temp-dir=DIR 		# 在DIR中创建临时文件。
--compare-dest=DIR 		# 同样比较DIR中的文件来决定是否需要备份。
-P						# 等同于 --partial。
--progress				# 显示备份过程。
-z, --compress 			# 对备份的文件在传输时进行压缩处理。
--exclude=PATTERN 		# 指定排除不需要传输的文件模式。
--include=PATTERN 		# 指定不排除而需要传输的文件模式。
--exclude-from=FILE		# 排除FILE中指定模式的文件。
--include-from=FILE		# 不排除FILE指定模式匹配的文件。
--version				# 打印版本信息。
--address				# 绑定到特定的地址。
--config=FILE 			# 指定其他的配置文件，不使用默认的rsyncd.conf文件。
--port=PORT 			# 指定其他的rsync服务端口。
--blocking-io 			# 对远程shell使用阻塞IO。
-stats					# 给出某些文件的传输状态。
--progress				# 在传输时现实传输过程。
--log-format=formAT		# 指定日志文件格式。
--password-file=FILE	# 从FILE中得到密码。
--bwlimit=KBPS 			# 限制I/O带宽，KBytes per second。
-h, --help				# 显示帮助信息。
</code></pre></td></tr></table>
</div>
</div><p>5.同步完成后重命名/home</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mv /home /home_old
</code></pre></td></tr></table>
</div>
</div><p>6.新建/home</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mkdir /home
</code></pre></td></tr></table>
</div>
</div><p>7.取消/dev/sdb1挂载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">umount /dev/sdb1
</code></pre></td></tr></table>
</div>
</div><p>8.重新挂载/dev/sdb1到home</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mount /dev/sdb1 /home
</code></pre></td></tr></table>
</div>
</div><p>9.查看/dev/sdb1的UUID</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">blkid
</code></pre></td></tr></table>
</div>
</div><p>10.把UUID复制下来，修改/etc/fstab文件，实现开机自动挂载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">vim /etc/fstab
mount -a <span class="c1">#将/etc/fstab的所有内容重新加载。</span>
</code></pre></td></tr></table>
</div>
</div><p>在文件最后添加如下内容：
UUID=8da46012-ab9c-434f-a855-2484112fd1a7 /home ext4 nodev,nosuid 0 2</p>
<p>11.保存之后重启系统，查看分区的挂载情况</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">df –Th
</code></pre></td></tr></table>
</div>
</div><p>12.确认一切正常后删除/home_old</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">rm -rf /home_old
</code></pre></td></tr></table>
</div>
</div><p>至此，给/home增加空间的工作就完成了。</p>
]]></description>
</item>
<item>
    <title>Top命令详解</title>
    <link>https://freerun.site/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
    <pubDate>Wed, 09 Jun 2021 11:17:50 &#43;0800</pubDate>
    <author>Ylimhs</author>
    <guid>https://freerun.site/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
    <description><![CDATA[<p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</p>
<p>下面详细介绍它的使用方法。top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定.</p>
<h2 id="1命令格式"><strong>1．命令格式：</strong></h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">top <span class="o">[</span>参数<span class="o">]</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="2命令功能"><strong>2．命令功能：</strong></h2>
<p>显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</p>
<h2 id="3命令参数"><strong>3．命令参数：</strong></h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">-b 批处理

-c 显示完整的治命令

-I 忽略失效过程

-s 保密模式

-S 累积模式

-i&lt;时间&gt; 设置间隔时间

-u&lt;用户名&gt; 指定用户名

-p&lt;进程号&gt; 指定进程

-n&lt;次数&gt; 循环显示的次数
</code></pre></td></tr></table>
</div>
</div><h2 id="4使用实例"><strong>4．使用实例：</strong></h2>
<h3 id="实例1显示进程信息"><strong>实例1：显示进程信息</strong></h3>
<h4 id="命令"><strong>命令：</strong></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">top
</code></pre></td></tr></table>
</div>
</div><h4 id="输出"><strong>输出：</strong></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>root@TG1704 log<span class="o">]</span><span class="c1"># top</span>

top - 14:06:23 up <span class="m">70</span> days, 16:44,  <span class="m">2</span> users,  load average: 1.25, 1.32, 1.35
Tasks: <span class="m">206</span> total,   <span class="m">1</span> running, <span class="m">205</span> sleeping,   <span class="m">0</span> stopped,   <span class="m">0</span> zombie
Cpu<span class="o">(</span>s<span class="o">)</span>:  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%st
Mem:  32949016k total, 14411180k used, 18537836k free,   169884k buffers
Swap: 32764556k total,        0k used, 32764556k free,  3612636k cached

PID   USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                      
<span class="m">28894</span> root      <span class="m">22</span>   <span class="m">0</span> 1501m 405m  10m S 52.2  1.3   2534:16 java                                                                
<span class="m">18249</span> root      <span class="m">18</span>   <span class="m">0</span> 3201m 1.9g  11m S 35.9  6.0 569:39.41 java                                                                
 <span class="m">2808</span> root      <span class="m">25</span>   <span class="m">0</span> 3333m 1.0g  11m S 24.3  3.1 526:51.85 java                                                                 
<span class="m">25668</span> root      <span class="m">23</span>   <span class="m">0</span> 3180m 704m  11m S 14.0  2.2 360:44.53 java                                                                 
  <span class="m">574</span> root      <span class="m">25</span>   <span class="m">0</span> 3168m 611m  10m S 12.6  1.9 556:59.63 java                                                                 
 <span class="m">1599</span> root      <span class="m">20</span>   <span class="m">0</span> 3237m 1.9g  11m S 12.3  6.2 262:01.14 java                                                                 
 <span class="m">1008</span> root      <span class="m">21</span>   <span class="m">0</span> 3147m 842m  10m S  0.3  2.6   4:31.08 java                                                                
<span class="m">13823</span> root      <span class="m">23</span>   <span class="m">0</span> 3031m 2.1g  10m S  0.3  6.8 176:57.34 java                                                                
<span class="m">28218</span> root      <span class="m">15</span>   <span class="m">0</span> <span class="m">12760</span> <span class="m">1168</span>  <span class="m">808</span> R  0.3  0.0   0:01.43 top                                                                 
<span class="m">29062</span> root      <span class="m">20</span>   <span class="m">0</span> 1241m 227m  10m S  0.3  0.7   2:07.32 java                                                                 
    <span class="m">1</span> root      <span class="m">15</span>   <span class="m">0</span> <span class="m">10368</span>  <span class="m">684</span>  <span class="m">572</span> S  0.0  0.0   1:30.85 init                                                                 
    <span class="m">2</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:01.01 migration/0                                                         
    <span class="m">3</span> root      <span class="m">34</span>  <span class="m">19</span>     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.00 ksoftirqd/0                                                         
    <span class="m">4</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.00 watchdog/0                                                          
    <span class="m">5</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.80 migration/1                                                         
    <span class="m">6</span> root      <span class="m">34</span>  <span class="m">19</span>     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.00 ksoftirqd/1                                                         
    <span class="m">7</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.00 watchdog/1                                                           
    <span class="m">8</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:20.59 migration/2                                                         
    <span class="m">9</span> root      <span class="m">34</span>  <span class="m">19</span>     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.09 ksoftirqd/2                                                         
   <span class="m">10</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.00 watchdog/2                                                           
   <span class="m">11</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:23.66 migration/3                                                         
   <span class="m">12</span> root      <span class="m">34</span>  <span class="m">19</span>     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.03 ksoftirqd/3                                                        
   <span class="m">13</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.00 watchdog/3                                                          
   <span class="m">14</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:20.29 migration/4                                                         
   <span class="m">15</span> root      <span class="m">34</span>  <span class="m">19</span>     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.07 ksoftirqd/4                                                         
   <span class="m">16</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.00 watchdog/4                                                           
   <span class="m">17</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:23.07 migration/5                                                         
   <span class="m">18</span> root      <span class="m">34</span>  <span class="m">19</span>     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.07 ksoftirqd/5                                                        
   <span class="m">19</span> root      RT  -5     <span class="m">0</span>    <span class="m">0</span>    <span class="m">0</span> S  0.0  0.0   0:00.00 watchdog/5                                                           
</code></pre></td></tr></table>
</div>
</div><h4 id="说明"><strong>说明：</strong></h4>
<h5 id="统计信息区"><strong>统计信息区:</strong></h5>
<p>前五行是当前系统情况整体的统计信息区。下面我们看每一行信息的具体意义。</p>
<h5 id="第一行任务队列信息同-uptime-命令的执行结果具体参数说明情况如下">第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">14:06:23 — 当前系统时间

up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）

2 users — 当前有2个用户登录系统

load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。

load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。
</code></pre></td></tr></table>
</div>
</div><h5 id="第二行tasks--任务进程具体信息说明如下">第二行，Tasks — 任务（进程），具体信息说明如下：</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。
</code></pre></td></tr></table>
</div>
</div><h5 id="第三行cpu状态信息具体属性说明如下">第三行，cpu状态信息，具体属性说明如下：</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">5.9%us — 用户空间占用CPU的百分比。

3.4% sy — 内核空间占用CPU的百分比。

0.0% ni — 改变过优先级的进程占用CPU的百分比

90.4% id — 空闲CPU百分比

0.0% wa — IO等待占用CPU的百分比

0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比

0.2% si — 软中断（Software Interrupts）占用CPU的百分比

**备注：****在这里CPU的使用比率和windows概念不同，****需要****理解****linux系统****用户空间和内核空间****的相关知识！**
</code></pre></td></tr></table>
</div>
</div><h5 id="第四行内存状态具体信息如下">第四行,内存状态，具体信息如下：</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">32949016k total — 物理内存总量（32GB）

14411180k used — 使用中的内存总量（14GB）

18537836k free — 空闲内存总量（18GB）

169884k buffers — 缓存的内存量 （169M）
</code></pre></td></tr></table>
</div>
</div><h5 id="第五行swap交换分区信息具体信息说明如下">第五行，swap交换分区信息，具体信息说明如下：</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">32764556k total — 交换区总量（32GB）

0k used — 使用的交换区总量（0K）

32764556k free — 空闲交换区总量（32GB）

3612636k cached — 缓冲的交换区总量（3.6GB）
</code></pre></td></tr></table>
</div>
</div><p><strong>备注：</strong></p>
<p><strong>第四行中使用中的内存总量（used）指的是现在系统内核控制的内存数，空闲内存总量（free）是内核还未纳入其管控范围的数量。纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到free中去，因此在linux上free内存会越来越少，但不用为此担心。</strong></p>
<p><strong>如果出于习惯去计算可用内存数，这里有个近似的计算公式：第四行的free + 第四行的buffers + 第五行的cached，按这个公式此台服务器的可用内存：18537836k +169884k +3612636k = 22GB左右。</strong></p>
<p><strong>对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。</strong></p>
<h5 id="第六行空行">第六行，空行。</h5>
<h5 id="第七行以下各进程任务的状态监控项目列信息说明如下"><strong>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：</strong></h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">PID — 进程id

USER — 进程所有者

PR — 进程优先级

NI — nice值。负值表示高优先级，正值表示低优先级

VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES

RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA

SHR — 共享内存大小，单位kb

S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程

%CPU — 上次更新到现在的CPU时间占用百分比

%MEM — 进程使用的物理内存百分比

TIME+ — 进程使用的CPU时间总计，单位1/100秒

COMMAND — 进程名称（命令名/命令行）
</code></pre></td></tr></table>
</div>
</div><h4 id="其他使用技巧"><strong>其他使用技巧：</strong></h4>
<h5 id="1多u多核cpu监控">1.多U多核CPU监控</h5>
<p>在top基本视图中，按键盘数字“1”，可监控每个逻辑CPU的状况：</p>
<p></p>
<p>观察上图，服务器有16个逻辑CPU，实际上是4个物理CPU。再按数字键1，就会返回到top基本视图界面。</p>
<h5 id="2高亮显示当前运行进程">2.高亮显示当前运行进程</h5>
<p>​	敲击键盘“b”（打开/关闭加亮效果），top的视图变化如下：</p>
<p></p>
<p>我们发现进程id为2570的“top”进程被加亮了，top进程就是视图第二行显示的唯一的运行态（runing）的那个进程，可以通过敲击“y”键关闭或打开运行态进程的加亮效果。</p>
<h5 id="3进程字段排序">3.进程字段排序</h5>
<p>默认进入top时，各进程是按照CPU的占用量来排序的，在下图中进程ID为28894的java进程排在第一（cpu占用142%），进程ID为574的java进程排在第二（cpu占用16%）。</p>
<p></p>
<p>敲击键盘“x”（打开/关闭排序列的加亮效果），top的视图变化如下：</p>
<p></p>
<p>可以看到，top默认的排序列是“%CPU”。</p>
<ol start="4">
<li>
<h5 id="通过shift--或shift--可以向右或左改变排序列"><strong>通过”shift + &gt;”或”shift + &lt;”可以向右或左改变排序列</strong></h5>
</li>
</ol>
<p>​	下图是按一次”shift + &gt;”的效果图,视图现在已经按照%MEM来排序。</p>
<p></p>
<h3 id="实例2显示-完整命令">实例2：显示 完整命令</h3>
<h4 id="命令-1"><strong>命令：</strong></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">top -c
</code></pre></td></tr></table>
</div>
</div><h4 id="输出-1"><strong>输出：</strong></h4>
<p></p>
<p><strong>说明：</strong></p>
<h3 id="实例3以批处理模式显示程序信息"><strong>实例3：以批处理模式显示程序信息</strong></h3>
<h4 id="命令-2"><strong>命令：</strong></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">top -b
</code></pre></td></tr></table>
</div>
</div><h4 id="输出-2"><strong>输出：</strong></h4>
<h4 id="说明-1"><strong>说明：</strong></h4>
<h3 id="实例4以累积模式显示程序信息">实例4：以累积模式显示程序信息</h3>
<h4 id="命令-3"><strong>命令：</strong></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">top -S
</code></pre></td></tr></table>
</div>
</div><h4 id="输出-3"><strong>输出：</strong></h4>
<h4 id="说明-2"><strong>说明：</strong></h4>
<h3 id="实例5设置信息更新次数">实例5：设置信息更新次数</h3>
<h4 id="命令-4"><strong>命令：</strong></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">top -n <span class="m">2</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="输出-4"><strong>输出：</strong></h4>
<h4 id="说明-3"><strong>说明：</strong></h4>
<p>表示更新两次后终止更新显示</p>
<h3 id="实例6设置信息更新时间"><strong>实例6：设置信息更新时间</strong></h3>
<h4 id="命令-5"><strong>命令：</strong></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">top -d <span class="m">3</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="输出-5"><strong>输出：</strong></h4>
<h4 id="说明-4"><strong>说明：</strong></h4>
<p>表示更新周期为3秒</p>
<h3 id="实例7显示指定的进程信息"><strong>实例7：显示指定的进程信息</strong></h3>
<h4 id="命令-6"><strong>命令：</strong></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">top -p <span class="m">574</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="输出-6"><strong>输出：</strong></h4>
<p></p>
<h5 id="5top交互命令"><strong>5.top交互命令</strong></h5>
<p>在top 命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了s 选项， 其中一些命令可能会被屏蔽。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">h 显示帮助画面，给出一些简短的命令总结说明

k 终止一个进程。

i 忽略闲置和僵死进程。这是一个开关式命令。

q 退出程序

r 重新安排一个进程的优先级别

S 切换到累计模式

s 改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s

f或者F 从当前显示中添加或者删除项目

o或者O 改变显示项目的顺序

l 切换显示平均负载和启动时间信息

m 切换显示内存信息

t 切换显示进程和CPU状态信息

c 切换显示命令名称和完整命令行

M 根据驻留内存大小进行排序

P 根据CPU使用百分比大小进行排序

T 根据时间/累计时间进行排序

W 将当前设置写入~/.toprc文件中
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Linux系统IO分析工具之iotop常用参数介绍</title>
    <link>https://freerun.site/linux%E7%B3%BB%E7%BB%9Fio%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E4%B9%8Biotop%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D/</link>
    <pubDate>Tue, 18 May 2021 14:15:06 &#43;0800</pubDate>
    <author>Ylimhs</author>
    <guid>https://freerun.site/linux%E7%B3%BB%E7%BB%9Fio%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E4%B9%8Biotop%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D/</guid>
    <description><![CDATA[<h1 id="linux系统io分析工具之iotop常用参数介绍">Linux系统IO分析工具之iotop常用参数介绍</h1>
<p>在一般运维工作中经常会遇到这么一个场景，服务器的IO负载很高（iostat中的util），但是无法快速的定位到IO负载的来源进程和来源文件导致无法进行相应的策略来解决问题。</p>
<p>　　Windows操作系统可以通过鲁大师等硬盘检测工具来查看硬盘读写速度，那么linux下测试硬盘IO读写情况怎么看?iotop是linux系统下测试硬盘IO读写的工具，简单的说,iotop是一个用来监视磁盘I/O使用状况的 top 类工具，可监测到哪一个程序使用的磁盘IO的信息（requires 2.6.20 or later)</p>
<p><strong>1&gt;.安装iotop</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="o">[</span>root@node105 ~<span class="o">]</span><span class="c1"># yum -y install iotop</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p><strong>2&gt;.查看iotop的帮助信息</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="o">[</span>root@node105 ~<span class="o">]</span><span class="c1"># iotop -help</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">各个参数说明：

　　-o, 		--only只显示正在产生I/O的进程或线程。除了传参，可以在运行过程中按o生效。
　　-b, 		--batch非交互模式，一般用来记录日志。
　　-n NUM, 	--iter=NUM设置监测的次数，默认无限。在非交互模式下很有用。
　　-d SEC, 	--delay=SEC设置每次监测的间隔，默认1秒，接受非整形数据例如1.1。
　　-p PID, 	--pid=PID指定监测的进程/线程。
　　-u USER, 	--user=USER指定监测某个用户产生的I/O。
　　-P, 		--processes仅显示进程，默认iotop显示所有线程。
　　-a, 		--accumulated显示累积的I/O，而不是带宽。
　　-k, 		--kilobytes使用kB单位，而不是对人友好的单位。在非交互模式下，脚本编程有用。
　　-t, 		--time 加上时间戳，非交互非模式。
　　-q, 		--quiet 禁止头几行，非交互模式。有三种指定方式。
　　-q 		只在第一次监测时显示列名
　　-qq 		永远不显示列名。
　　-qqq 		永远不显示I/O汇总。
　　
交互按键：
　　和top命令类似，iotop也支持以下几个交互按键。
　　left和right方向键：改变排序。　　
　　r：反向排序。
　　o：切换至选项--only。
　　p：切换至--processes选项。
　　a：切换至--accumulated选项。
　　q：退出。
　　i：改变线程的优先级。
</code></pre></td></tr></table>
</div>
</div><p><strong>3&gt;.</strong> <strong>只显示正在产生I/O的进程或线程。除了传参，可以在运行过程中按o生效。</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="o">[</span>root@node105 ~<span class="o">]</span><span class="c1"># iotop  -o</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p><strong>4&gt;.时间刷新间隔2秒，输出5次</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="o">[</span>root@node105 ~<span class="o">]</span><span class="c1"># iotop  -d 2 -n 5</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p><strong>5&gt;.非交互式，输出5次，间隔2秒，输出到屏幕，也可输出到日志文本，用于监控某时间段的io信息</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="o">[</span>root@node105 ~<span class="o">]</span><span class="c1"># iotop -botq -n 5 -d 2 </span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p><strong>6&gt;.非交互式，输出pid为8382的进程信息</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="o">[</span>root@kafka118 ~<span class="o">]</span><span class="c1"># iotop -botq -p 8382</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
]]></description>
</item>
<item>
    <title>Nslookup命令详解</title>
    <link>https://freerun.site/nslookup%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
    <pubDate>Thu, 06 May 2021 12:01:27 &#43;0800</pubDate>
    <author>Ylimhs</author>
    <guid>https://freerun.site/nslookup%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
    <description><![CDATA[<p><code>nslookup命令用于**查询DNS的记录，查看域名解析是否正常，在网络故障的时候用来诊断网络问题。** nslookup的用法相对来说还是蛮简单的，主要是下面的几个用法。</code></p>
<h2 id="1直接查询"><strong>1、直接查询</strong></h2>
<p><code>这个可能大家用到最多，查询一个域名的A记录。</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nslookup domain <span class="o">[</span>dns-server<span class="o">]</span>
</code></pre></td></tr></table>
</div>
</div><p><code>如果没指定dns-server，用系统默认的dns服务器。下面是一个例子：</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># nslookup baidu.com</span>
Server:     10.30.7.177
Address:    10.30.7.177#53

Non-authoritative answer:
Name:   baidu.com
Address: 123.125.114.144
Name:   baidu.com
Address: 111.13.101.208
Name:   baidu.com
Address: 180.149.132.47
Name:   baidu.com
Address: 220.181.57.217
</code></pre></td></tr></table>
</div>
</div><h2 id="2查询其他记录"><strong>2、查询其他记录</strong></h2>
<p><code>直接查询返回的是A记录，我们可以指定参数，查询其他记录，比如AAAA、MX等。</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nslookup -qt<span class="o">=</span><span class="nb">type</span> domain <span class="o">[</span>dns-server<span class="o">]</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">其中，type可以是以下这些类型：

A 	地址记录
AAAA 	地址记录
AFSDB 	Andrew文件系统数据库服务器记录
ATMA 	ATM地址记录
CNAME 	别名记录
HINFO 	硬件配置记录，包括CPU、操作系统信息
ISDN 	域名对应的ISDN号码
MB 	存放指定邮箱的服务器
MG 	邮件组记录
MINFO 	邮件组和邮箱的信息记录
MR 	改名的邮箱记录
MX 	邮件服务器记录
NS 	名字服务器记录
PTR 	反向记录
RP 	负责人记录
RT 	路由穿透记录
SRV 	TCP服务器信息记录
TXT 	域名对应的文本信息
X25 	域名对应的X.25地址记录
</code></pre></td></tr></table>
</div>
</div><p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># nslookup -qt=mx baidu.com 8.8.8.8</span>
*** Invalid option: <span class="nv">qt</span><span class="o">=</span>mx
Server:     8.8.8.8
Address:    8.8.8.8#53

Non-authoritative answer:
Name:   baidu.com
Address: 111.13.101.208
Name:   baidu.com
Address: 123.125.114.144
Name:   baidu.com
Address: 180.149.132.47
Name:   baidu.com
Address: 220.181.57.217
</code></pre></td></tr></table>
</div>
</div><h3 id="3查询更具体的信息"><strong>3、查询更具体的信息</strong></h3>
<p><code>查询语法：</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nslookup –d <span class="o">[</span>其他参数<span class="o">]</span> domain <span class="o">[</span>dns-server<span class="o">]</span>  <span class="c1">#只要在查询的时候，加上-d参数，即可查询域名的缓存。</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Linux-Lvm挂载硬盘步骤</title>
    <link>https://freerun.site/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/</link>
    <pubDate>Sat, 11 May 2019 12:34:21 &#43;0800</pubDate>
    <author>Ylimhs</author>
    <guid>https://freerun.site/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/</guid>
    <description><![CDATA[<p><strong>备注说明：lvm的硬盘挂载原理，可参考如下链接，有详细解释所有的挂载硬盘原理</strong></p>
<p><a href="https://zhuanlan.zhihu.com/p/296777898">https://zhuanlan.zhihu.com/p/296777898</a></p>
<h2 id="步骤">步骤：</h2>
<h3 id="硬盘格式化成pv">硬盘格式化成pv</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">pvcreate /dev/sdb
</code></pre></td></tr></table>
</div>
</div><h3 id="创建完pv以后我们可以使用pvdisplay显示详细信息pvs命令来查看当前pv的信息">创建完PV以后，我们可以使用<code>pvdisplay</code>(显示详细信息)、<code>pvs</code>命令来查看当前pv的信息</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">pvdisplay
pvs
</code></pre></td></tr></table>
</div>
</div><h3 id="在创建完pv以后这时候我们需要创建一个vg然后将我们的pv都加入到这个卷组当中在创建卷组时要给该卷组起一个名字">在创建完PV以后，这时候我们需要创建一个VG，然后将我们的PV都加入到这个卷组当中，在创建卷组时要给该卷组起一个名字</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">vgcreate mydata /dev/sdb
</code></pre></td></tr></table>
</div>
</div><h3 id="同样在创建好vg以后我们也可以使用-vgdisplay-或者-vgs-命来来查看vg的信息">同样，在创建好VG以后，我们也可以使用 vgdisplay 或者 vgs 命来来查看VG的信息</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">vgdisplay
vgs	
<span class="c1">#新物理卷，将新增卷增加到原有的卷组中            -----说明：新增加硬盘到lvm组里面的，如果没有则不需要执行</span>
<span class="c1">#vgextend xiaoluo /dev/sdd1</span>
<span class="c1">#基于卷组(VG)创建逻辑卷(LV)　　通过 lvcreate 命令</span>
lvcreate -n mylv -L 2G xiaoluo
lvcreate -n myweb -l 100%free lnweixin <span class="c1">#将剩余的所有空间分配给myweb</span>
lvcreate -n myweb -l 100% lnweixin <span class="c1">#将所有空间分配给myweb</span>

lvcreate -n mydata -l 100%free mydata

<span class="c1">#格式化并使用我们的逻辑卷</span>
mkfs.xfs /dev/mydata/mydata
<span class="c1">#格式化我们的逻辑卷以后，就可以使用 mount 命令将其进行挂载，我们将其挂载到 /mnt 目录下</span>
mount /dev/mydata/mydata /data
<span class="c1">#便于以后服务器重启自动挂载,需要将创建好的文件系统挂载信息添加到/etc/fstab里面.UUID可以通过 blkid命令查询.</span>
<span class="c1">#为了查看/etc/fstab是否设置正确,可以先卸载逻辑卷data1,然后使用mount –a 使内核重新读取/etc/fstab,看是否能够自动挂载.</span>
<span class="c1">#自此lvm挂载硬盘已完成</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="删除逻辑卷">删除逻辑卷</h2>
<h3 id="我们在创建好逻辑卷后可以通过创建文件系统挂载逻辑卷来使用它如果说我们不想用了也可以将其删除掉">我们在创建好逻辑卷后可以通过创建文件系统，挂载逻辑卷来使用它，如果说我们不想用了也可以将其删除掉。</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">①首先将正在使用的逻辑卷卸载掉　　     通过 umount 命令
②将逻辑卷先删除　　		 通过 lvremove 命令
③删除卷组　　			 通过 vgremove 命令
④最后再来删除我们的物理卷　　	 通过 pvremove 命令
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mount /dev/xiaoluo/mylv /mnt/
umount /mnt/
lvremove /dev/xiaoluo/mylv 
vgremove xiaoluo
pvremove /dev/sdb
</code></pre></td></tr></table>
</div>
</div><p><code>此时我们的刚创建的逻辑卷 mylv，卷组 xiaoluo以及物理卷 /dev/sdb 已经从我们当前操作系统上删除掉了，通过 lvs、vgs、pvs命令可以查看一下</code></p>
]]></description>
</item>
</channel>
</rss>
