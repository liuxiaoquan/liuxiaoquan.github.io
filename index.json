[{"categories":["运维"],"content":" 环境：centos7 aarch64架构 ","date":"2024-08-27","objectID":"/kibana/:0:0","tags":["linux"],"title":"kibana-6.8.4 arm环境下编辑安装","uri":"/kibana/"},{"categories":["运维"],"content":"安装依赖 yum install net-tools passwd java java-devel vim wget -y ","date":"2024-08-27","objectID":"/kibana/:1:0","tags":["linux"],"title":"kibana-6.8.4 arm环境下编辑安装","uri":"/kibana/"},{"categories":["运维"],"content":"解决方法如下 wget的链接需要魔法才能下载，在这提供一个下载好的部署包 node-v10.15.2-linux-arm64.tar.gz #下载kibana安装包 wget https://artifacts.elastic.co/downloads/kibana/kibana-6.8.4-linux-x86_64.tar.gz #解压 tar -xf kibana-6.8.4-linux-x86_64.tar.gz #查看node [root@b156873121b1 node]# cd /opt/kibana-6.8.4-linux-x86_64/node [root@b156873121b1 node]# file ./bin/node ./bin/node: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.18, BuildID[sha1]=f135ef59856912584f7b9668f5ff750135716af3, with debug_info, not stripped #删除node [root@b156873121b1 kibana-6.8.4-linux-x86_64]# rm -rf node #下载arm架构的node [root@b156873121b1 kibana-6.8.4-linux-x86_64]$ wget https://nodejs.org/dist/v10.15.2/node-v10.15.2-linux-arm64.tar.gz [root@b156873121b1 kibana-6.8.4-linux-x86_64]$ tar -xf node-v10.15.2-linux-arm64.tar.gz [root@b156873121b1 kibana-6.8.4-linux-x86_64]$ mv node-v10.15.2-linux-arm64 node ----------------------------------------------------------------------- #修改kibana配置文件,vim config/kibana.yml server.port: 5601 server.host: \"0.0.0.0\" # 这里要配置kibana的基础路径 server.basePath: \"/kibana\" elasticsearch.hosts: [\"http://10.21.232.131:9200\"] kibana.index: \".kibana\" elasticsearch.username: \"user\" elasticsearch.password: \"passworod\" i18n.locale: \"zh-CN\" ----------------------------------------------------------------------- #创建账号 #kibana默认禁止root启动，需要创建账号 useradd test passwd test usermod -G test:test chown -R test:test /opt/kibana-6.8.4-linux-x86_64 [root@b156873121b1 kibana-6.8.4-linux-x86_64]# su test [test@b156873121b1 kibana-6.8.4-linux-x86_64]$ [test@b156873121b1 kibana-6.8.4-linux-x86_64]$ nohub ./bin/kibana \u0026 [root@b156873121b1 /]# netstat -nltp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:5601 0.0.0.0:* LISTEN 398/./bin/../node/b tcp 0 0 127.0.0.1:9200 0.0.0.0:* LISTEN 155/java tcp 0 0 127.0.0.1:9300 0.0.0.0:* LISTEN 155/java ","date":"2024-08-27","objectID":"/kibana/:2:0","tags":["linux"],"title":"kibana-6.8.4 arm环境下编辑安装","uri":"/kibana/"},{"categories":["硬件"],"content":" b站引用视频 什么是磁盘阵列？15种RAID优缺点详解 _RAID5、RAID6、RAID10、RAIDZ、SHR、UNRAID b站引用视频 24块盘做RAID0有多快？这是我见过的最疯狂的RAID0设置！ 知乎引用博文 Windows10系统无需阵列卡组建RAID0、RAID1、RAID5方法 \u003cvideo width=\"320\" height=\"240\" controls\u003e \u003csource src=\"movie.mp4\" type=\"video/mp4\"\u003e \u003c/video\u003e ","date":"2024-05-21","objectID":"/windows11%E4%B8%AD%E7%BB%84%E5%BB%BAraid-10/:0:0","tags":["RAID"],"title":"Windows11中组建RAID 10","uri":"/windows11%E4%B8%AD%E7%BB%84%E5%BB%BAraid-10/"},{"categories":["运维"],"content":"1、挂载目录 注释：xfs和ext4是Linux操作系统中常见的两种文件系统 #格式化文件系统 mkfs.ext4 /dev/sdb #查看文件系统 blkid /dev/sdb #挂载分区到目录 vim /etc/fstab #把这一段写入fstab文件：/dev/sdb /home ext4 defaults 0 0 mount -a ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:1:0","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"2、新磁盘创建卷组与逻辑卷并且挂载/home目录 只有lvm(逻辑卷才能扩容)，下图意思是：有9块物理硬盘，其中有6块硬盘组成一个卷组，然后这个卷组了20g给逻辑卷用：物理卷（PV）、卷组（VG）和逻辑卷（LV） ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:2:0","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"pvcreate 创建物理卷 #首先是创建PV，上图中的9块硬盘，centos7以上系统直接可以省略这步骤 pvcreate /dev/sdb /dev/sdc1 [root@localhost ~]# pvcreate /dev/sdb /dev/sdc #直接将磁盘或某个分区转化为物理卷， Physical volume \"/dev/sdb\" successfully created. Physical volume \"/dev/sdc\" successfully created. [root@localhost ~]# pvs #查看有哪些物理卷 PV VG Fmt Attr PSize PFree /dev/sda2 cl lvm2 a-- 11.00g 4.00m /dev/sdb lvm2 --- 8.00g 8.00g /dev/sdc lvm2 --- 6.00g 6.00g ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:2:1","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"vgcreate 创建卷组 #创建卷组（虚拟硬盘）:vgcreate 卷组名 物理卷1 物理卷2 ..... [root@localhost ~]# vgcreate my_data /dev/sdb /dev/sdc #创建一个名为my_data的卷组并将sdb和sdc物理卷加入其中，PE的大小默认为4M [root@localhost ~]# vgs #查看卷组，下面有一个创建好的my_data卷组为1G VG #PV #LV #SN Attr VSize VFree centos 1 2 0 wz--n- \u003c9.00g 4.00m my_data 1 0 0 wz--n- 1020.00m 1020.00m ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:2:2","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"lvcreate 创建逻辑卷 [root@localhost ~]# lvcreate -n lv_data -L 500M my_data #在my_data卷组上创建一个名称叫lv_data的500M的逻辑卷 Logical volume \"lv_data\" created. [root@localhost ~]# lvs LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert root centos -wi-ao---- 7.99g swap centos -wi-ao---- 1.00g lv_data my_data -wi-a----- 500.00m 重点： 当我们lvcreate创建一个逻辑卷的时候，其实相当于生成了一个磁盘设备文件，这是由lvm的mapper机制决定，Linux会新建两个软链接文件，如/dev/vg_name/lv_name、/dev/mapper/vg_name-lv_name，而这2个文件都是指向/dev/dm-X 块设备文件的，所以，当我们使用df -h看到的/dev/mapper/vg_name-lv_name的时候，这个其实就是和/dev/vg_name/lv_name一样的，都是指向/dev/dm-X 块设备文件的。 ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:2:3","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"mkfs 格式化分区并创建文件系统 [root@localhost ~]# mkfs.ext4 /dev/sdb #格式化磁盘分区为ext4文件系统，这一步也可以忽略 mke2fs 1.42.9 (28-Dec-2013) /dev/sdb is entire device, not just one partition! #对上面刚才创建的lv进行格式化并创建ext4类型的文件系统 [root@localhost ~]# mkfs.ext4 /dev/my_data/lv_data #挂载分区到目录 vim /etc/fstab #把这一段写入fstab文件：/dev/my_data/lv_data /home ext4 defaults 0 0 mount -a df -hT ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:2:4","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"3、Linux系统扩容Lvm磁盘空间 扩容步骤为：先扩容卷组 -\u003e 再扩容逻辑卷 -\u003e刷新文件系统 ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:3:0","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"vgextend 扩容卷组，即把物理卷加入卷组 [root@localhost ~]# vgs #还剩下520M的容量 VG #PV #LV #SN Attr VSize VFree centos 1 2 0 wz--n- \u003c9.00g 4.00m my_data 1 1 0 wz--n- 1020.00m 520.00m #vgextend 命令把sdd1物理卷加入my_data卷组（sdd1已经是物理卷了，my_data是卷组名称） [root@localhost /]# vgextend my_data /dev/sdd1 ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:3:1","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"lvextend扩容逻辑卷，即把卷组空间加入到逻辑卷中 #/dev/my_data/lv_data这个逻辑卷增加520M [root@localhost ~]# lvextend -L +520M /dev/my_data/lv_data Size of logical volume my_data/lv_data changed from 500.00 MiB (125 extents) to 1020.00 MiB (255 extents). Logical volume my_data/lv_data successfully resized. #这个时候发现lv_data这个逻辑卷已经扩大到1G [root@c2 ~]# lvs LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert root centos -wi-ao---- 7.99g swap centos -wi-ao---- 1.00g lv_data my_data -wi-ao---- 1020.00m #但是df查看容量没有加载，这个时候需要刷新才行 [root@c2 ~]# df -hT /home/ 文件系统 类型 容量 已用 可用 已用% 挂载点 /dev/mapper/my_data-lv_data ext4 477M 2.3M 445M 1% /home #查看你的逻辑卷是什么文件系统类型，如果是xfs文件系统，使用xfs_growfs命令扩展容量： xfs_growfs /dev/mysql/lv_data #查看你的逻辑卷是什么文件系统类型，如果是ext4文件系统，使用resize2fs命令扩展容量： resize2fs /dev/root_vg/root ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:3:2","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"4、扩容根分区 注释：首先确定根分区是不是lvm卷，如果不是那就不允许扩容 扩容步骤为：先扩容卷组 -\u003e 再扩容逻辑卷 -\u003e刷新文件系统 #查询卷组，查看卷组名为centos的卷组是否有容量扩容，下面显示vFree为4.00M,显然已经不够扩容 [root@c2 ~]# vgs VG #PV #LV #SN Attr VSize VFree centos 1 2 0 wz--n- \u003c9.00g 4.00m #查询是否有分区给卷组扩容 [root@c2 ~]# lsblk #vgextend 命令把sdd物理卷加入centos卷组（sdd已经是物理卷了，centos是卷组名称） [root@localhost /]# vgextend centos /dev/sdd #/dev/centos/root这个逻辑卷增加50G [root@localhost ~]# lvextend -L +50G /dev/centos/root #但是df查看容量没有加载，这个时候需要刷新才行 [root@c2 ~]# df -hT / 文件系统 类型 容量 已用 可用 已用% 挂载点 /dev/mapper/centos-root ext4 7.8G 6.9G 483M 94% / #查看你的逻辑卷是什么文件系统类型，如果是xfs文件系统，使用xfs_growfs命令扩展容量： xfs_growfs /dev/mysql/lv_data #查看你的逻辑卷是什么文件系统类型，如果是ext4文件系统，使用resize2fs命令扩展容量： resize2fs /dev/root_vg/root ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:4:0","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"lv缩容 缩容lv一般是腾出空间给同vg的其他lv，这并不是一种安全的做法，一般情况下没有人会这么干，一般当lv卷磁盘空间满的时候，会加磁盘来扩容，而不是从同vg下的其他lv腾空间出来，这里仅做出示例： umount /dev/mapper/my_data-lv_data #卸载lv e2fsck -f /dev/mapper/my_data-lv_data #先扫描、检查磁盘在执行resize2fs，不然它会提示你先执行e2fsck -f命令的 resize2fs /dev/mapper/my_data-lv_data 100G #缩容文件系统到100G lvreduce -L 100G /dev/mapper/my_data-lv_data #缩容，lv到100G,此时vg就空闲了很多PE出来了，可以通过vgdisplay命令查看 lvreduce -L -100G /dev/mapper/my_data-lv_data #缩容，lv缩减100G,此时vg就空闲了很多PE出来了，可以通过vgdisplay命令查看 mount /dev/mapper/my_data-lv_data /my_data/ #重新挂载，此时文件系统就是100G大小 #以上缩容发现，一个是需要卸载，这点可以影响业务，其次缩容后重新挂载，原来的文件仍存在，没有丢失。 #下面是一个例子 /dev/mapper/vg--data-lv1T 1008G 77M 957G 1% /gpt1 /dev/mapper/vg--data-lv2 2.0T 81M 1.9T 1% /gpt2 [root@kubernetes ~]# vgs VG #PV #LV #SN Attr VSize VFree centos 1 2 0 wz--n- \u003c19.00g 0 vg-data 1 2 0 wz--n- \u003c3.00t 0 [root@kubernetes ~]# lvdisplay /dev/vg-data/lv1T /dev/vg-data/lv2 --- Logical volume --- LV Path /dev/vg-data/lv1T LV Name lv1T VG Name vg-data LV UUID oYtQ0a-hUQA-pVkK-e8iy-NFam-eRs4-PrMsZW LV Write Access read/write LV Creation host, time kubernetes, 2023-03-29 10:20:33 +0800 LV Status available # open 1 LV Size 1.00 TiB Current LE 262144 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 8192 Block device 253:2 --- Logical volume --- LV Path /dev/vg-data/lv2 LV Name lv2 VG Name vg-data LV UUID APJ81S-hOEC-LCfp-Oamo-5OTk-C8pA-GLhN2L LV Write Access read/write LV Creation host, time kubernetes, 2023-03-29 10:21:08 +0800 LV Status available # open 1 LV Size \u003c2.00 TiB Current LE 524287 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 8192 Block device 253:3 [root@kubernetes ~]# #打算对/gpt1缩减100G，腾出空间给/gpt2： umount /gpt1 e2fsck -f /dev/mapper/vg--data-lv1T #注意这条命令是缩减文件系统到多少G，957-100=857 resize2fs /dev/mapper/vg--data-lv1T 857G #重新挂载，现在是844G mount /dev/mapper/vg--data-lv1T /gpt1/ [root@kubernetes ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/mapper/vg--data-lv1T 844G 77M 801G 1% /gpt1 # 文件系统缩减了但是lv没有缩减呀，你看看： [root@kubernetes ~]# lvdisplay /dev/mapper/vg--data-lv1T --- Logical volume --- LV Path /dev/vg-data/lv1T LV Name lv1T VG Name vg-data LV UUID oYtQ0a-hUQA-pVkK-e8iy-NFam-eRs4-PrMsZW LV Write Access read/write LV Creation host, time kubernetes, 2023-03-29 10:20:33 +0800 LV Status available # open 1 LV Size 1.00 TiB #和没缩减文件系统时一模一样 Current LE 262144 #和没缩减文件系统时一模一样 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 8192 Block device 253:2 # 所以现在开始缩减lv,这里我们写-100G lvresize -L -100G /dev/vg-data/lv1T #缩减成功，但是好像不对，lv显示924G，挂载之后的文件系统怎么才844G [root@kubernetes ~]# lvdisplay /dev/mapper/vg--data-lv1T --- Logical volume --- LV Path /dev/vg-data/lv1T LV Name lv1T VG Name vg-data LV UUID oYtQ0a-hUQA-pVkK-e8iy-NFam-eRs4-PrMsZW LV Write Access read/write LV Creation host, time kubernetes, 2023-03-29 10:20:33 +0800 LV Status available # open 1 LV Size 924.00 GiB Current LE 236544 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 8192 Block device 253:2 [root@kubernetes ~]# vgs #vg多了100G VG #PV #LV #SN Attr VSize VFree vg-data 1 2 0 wz--n- \u003c3.00t 100.00g [root@kubernetes ~]# df -h /dev/vg-data/lv1T Filesystem Size Used Avail Use% Mounted on /dev/mapper/vg--data-lv1T 844G 77M 801G 1% /gpt1 [root@kubernetes ~]# 重新卸载重新挂载也是一样的，怎么回事？ ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:5:0","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"5、删除逻辑卷、删除卷组 一般不会这样干，这里只做示例 [root@localhost ~]# umount /dev/mapper/my_data-lv_data #删除一个lv之前必须先卸载文件系统 [root@localhost ~]# lvremove /dev/my_data/lv_data #删除逻辑卷,如果不知道lv的路径，可以通过lvdisplay命令查看 Do you really want to remove active logical volume my_data/lv_data? [y/n]: y Logical volume \"lv_data\" successfully removed root@localhost ~]# vgremove my_data #删除整个卷组 Do you really want to remove volume group \"my_data\" containing 1 logical volumes? [y/n]: y Volume group \"my_data\" is removed #删除物理卷，该物理卷必须从vg中卸载下来，使用vgreduce my_data /dev/sdd1卸载即可 [root@localhost ~]# pvremove /dev/sdd1 Removed \"/dev/sdd1\" from volume group \"my_data\" 最后献上这篇博客的参考文章 ","date":"2024-05-20","objectID":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/:6:0","tags":["linux","LVM,PV,VG"],"title":"Liunx系统分区与扩容","uri":"/liunx%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9/"},{"categories":["运维"],"content":"注意:配置拒接策略时请配置好SSH连接端口，否则一旦配置失误，将无法再远程连接！！！！！ 安装iptables服务 yum install iptables iptables-services -y 启动iptables服务 service iptables start 设置iptables开机自启动 systemctl enable iptables 清除iptables所有规则 iptables -F 添加规则，放开需要放开的端口(这里放开了tcp80端口) iptables -A INPUT -p tcp --dport 80 -j ACCEPT 添加规则，允许特定主机访问（这里允许1.1.1.1访问） iptables -A INPUT -s 1.1.1.1 -j ACCEPT 添加规则，允许特定网段访问（这里允许1.1.1.0/24访问） iptables -A INPUT -s 1.1.1.0/24 -j ACCEPT 添加规则，拒绝特定网段访问（这里拒绝1.1.1.0/24访问） iptables -A INPUT -s 1.1.1.0/24 -j DROP 添加规则，允许特定主机访问特定端口（这里允许1.1.1.1访问tcp22端口） iptables -A INPUT -s 1.1.1.1 -p tcp --dport 22 -j ACCEPT 查看规则及规则号 iptables -nL --line-number 删除规则5 iptables -D INPUT 5 插入规则，插入到规则1之前 iptables -I INPUT 1 -p tcp --dport 8080 -j ACCEPT 添加完规则后保存 service iptables save #如果没有service可以用以下命令 sudo iptables-save \u003e /etc/sysconfig/iptables 重启iptables服务 service iptables restart #或者：systemctl restart iptabels #案例：允许192.2.0.2 和 198.3.22.1的访问，其他ip禁止访问 第一步：放开所有 IP 地址的 SSH 连接，一定要先执行这个，不然远程连接会断开 sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT 第二步：允许192.2.0.2 和 198.3.22.1的访问 iptables -A INPUT -s 192.2.0.2 -j ACCEPT iptables -A INPUT -s 198.3.22.1 -j ACCEPT 第三步：禁止外部访问本机 #禁止INPUT链处理进入本地主机的数据包 sudo iptables -P INPUT DROP #禁止本地转发数据包出去，这个可以不用设在 #sudo iptables -P FORWARD DROP #放通本地访问外部数据，这个默认开启也不用设置 #sudo iptables -P OUTPUT ACCEPT 第四步：保存 sudo iptables-save \u003e /etc/sysconfig/iptables ","date":"2024-05-09","objectID":"/iptables%E5%AE%9E%E6%88%98/:0:0","tags":["iptables"],"title":"Iptables实战","uri":"/iptables%E5%AE%9E%E6%88%98/"},{"categories":["购房"],"content":"去售楼部千万不要问这价格能不能少 要问以下问题： 1、这个项目什么时候开盘的，什么时候可以交付，项目总共有多少套，原先买了多少套，现在还剩下哪些 2、开发的这个项目有几个开发商，主要是谁在操盘 3、物业是哪家的品牌，物业费是多少，规划有多少个车位，车位比是多少 4、周边的规划是否有官方文件，预计多久能够落地 5、小区有哪些自带的规划设施 6、小区出入口有哪几个，是否是人车分流的 7、等这个项目结束后，售楼部的用处和用途又是什么 8、小区的配电和垃圾站具体在什么位置 9、楼盘的公摊面积是多少，五证公示在哪，合作的银行有哪些 10、贷款没有通过，这个定金能不能退**（重点）** 11、看样板房的时候要问他层高是多少，得房率是多少**（重点）** ","date":"2023-02-15","objectID":"/%E4%B9%B0%E6%88%BF%E5%8E%BB%E5%94%AE%E6%A5%BC%E9%83%A8%E6%80%8E%E4%B9%88%E9%97%AE/:0:0","tags":["购房"],"title":"买房去售楼部怎么问","uri":"/%E4%B9%B0%E6%88%BF%E5%8E%BB%E5%94%AE%E6%A5%BC%E9%83%A8%E6%80%8E%E4%B9%88%E9%97%AE/"},{"categories":["购房"],"content":"了解楼盘官方价格，要这样问 - 楼盘的备案价是多少，我要看看你们的备案表（现在所有的商品都要求明码标价，公开销售） ","date":"2023-02-15","objectID":"/%E4%B9%B0%E6%88%BF%E5%8E%BB%E5%94%AE%E6%A5%BC%E9%83%A8%E6%80%8E%E4%B9%88%E9%97%AE/:1:0","tags":["购房"],"title":"买房去售楼部怎么问","uri":"/%E4%B9%B0%E6%88%BF%E5%8E%BB%E5%94%AE%E6%A5%BC%E9%83%A8%E6%80%8E%E4%B9%88%E9%97%AE/"},{"categories":["购房"],"content":"以下是chatGPT给出的在中国购买房产，可以前往当地的售楼部进行咨询的问题 我想了解一下这个楼盘的房源情况。请问你们这里有什么户型的房子可以看？ 1、我对这个楼盘比较感兴趣，请问能不能了解一下价格和付款方式？ 我想问一下这个户型的房子的售价和首付款是多少 2、我想了解一下这个楼盘的周边环境。 请问这个楼盘附近有哪些商场、学校或者医院吗 3、我想了解一下这个楼盘的交通情况。 请问这个楼盘附近的公共交通便利吗？有哪些公交线路 4、我对这个楼盘比较满意，但还有一些疑问需要了解。 我想问一下这个楼盘的物业服务、售后服务和质保期等具体情况 1、打听项目名称：可以直接问“请问这里是哪个项目？”，或者询问楼盘名称，比如“请问这里是XX楼盘吗？” 2、了解户型和房价：可以询问当前可售的户型、面积、朝向、价格等相关信息，如“请问您这里有哪些户型？每平米的价格是多少？” 3、询问销售政策：可以询问相关的优惠政策和购房流程，比如“请问可以提供哪些购房优惠？购房流程是怎样的？” 4、想要更多的信息：如果需要了解更多信息，可以询问具体的销售人员，如“请问这里的物业配套有哪些？周边交通是否便利？”。 ","date":"2023-02-15","objectID":"/%E4%B9%B0%E6%88%BF%E5%8E%BB%E5%94%AE%E6%A5%BC%E9%83%A8%E6%80%8E%E4%B9%88%E9%97%AE/:1:1","tags":["购房"],"title":"买房去售楼部怎么问","uri":"/%E4%B9%B0%E6%88%BF%E5%8E%BB%E5%94%AE%E6%A5%BC%E9%83%A8%E6%80%8E%E4%B9%88%E9%97%AE/"},{"categories":["运维"],"content":" 虚拟机软件版本 VMware® Workstation 15 Player Ubuntu镜像版本 Ubuntu 20.04.1 LTS 具体操作简介 将虚拟机磁盘空间由30GB扩展到40GB，并进行磁盘分区 ","date":"2022-12-28","objectID":"/vmware-%E6%89%A9%E5%B1%95ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/:0:0","tags":["扩容Ubuntu 20.04.1 LTS"],"title":"VMware 扩展Ubuntu虚拟机的磁盘空间","uri":"/vmware-%E6%89%A9%E5%B1%95ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/"},{"categories":["运维"],"content":"1. 准备工作 使用 df -h 指令查看一下磁盘空间的使用情况 可以看到，现在挂载的磁盘空间为29G，用了17G，还剩11G。 下面开始扩展磁盘空间。 ","date":"2022-12-28","objectID":"/vmware-%E6%89%A9%E5%B1%95ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/:1:0","tags":["扩容Ubuntu 20.04.1 LTS"],"title":"VMware 扩展Ubuntu虚拟机的磁盘空间","uri":"/vmware-%E6%89%A9%E5%B1%95ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/"},{"categories":["运维"],"content":"2. 编辑虚拟机设置 打开虚拟机，找到待扩展的虚拟机，点击“编辑虚拟机设置”选项。 在虚拟机设置窗口的“硬件”界面，选择“硬盘”选项，点击“扩展”。在弹出来的窗口中，输入你想要扩展到的磁盘空间。我想扩展到40GB，所以就填写了40。 ","date":"2022-12-28","objectID":"/vmware-%E6%89%A9%E5%B1%95ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/:2:0","tags":["扩容Ubuntu 20.04.1 LTS"],"title":"VMware 扩展Ubuntu虚拟机的磁盘空间","uri":"/vmware-%E6%89%A9%E5%B1%95ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/"},{"categories":["运维"],"content":"3. 将Ubuntu 系统重新分区 为了能够更方便地重新分区，可以下载一个分区管理软件GParted 在虚拟机中打开终端，输入sudo apt-get install gparted指令，安装GParted软件。 安装完成后，就可以对磁盘进行分区了。 点击该软件，进行磁盘分区。 打开软件后，可以看到目前虚拟机的磁盘情况。 可以看到，现在我的虚拟机有一块29.5GB的磁盘/dev/sda5以及一块10GB未分配的磁盘，而且/dev/sda5被挂载到了根目录下。 现在就可以为/dev/sda5扩展空间了。右键单击/dev/sda2的分区，选择Resize/Move选项 可以看到，磁盘空间已经变为了39GB ","date":"2022-12-28","objectID":"/vmware-%E6%89%A9%E5%B1%95ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/:3:0","tags":["扩容Ubuntu 20.04.1 LTS"],"title":"VMware 扩展Ubuntu虚拟机的磁盘空间","uri":"/vmware-%E6%89%A9%E5%B1%95ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/"},{"categories":["运维"],"content":"ssh-keygen一路回车,主要是用来免密通信的 ssh-copy-id 172.16.24.220 需要输入对应主节的root密码 [root@chm log]# ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.ssh/id_rsa.pub. The key fingerprint is: 7f:69:87:cf:28:fe:8b:19:55:a7:d0:c9:aa:6d:05:0c root@chm The key's randomart image is: +--[ RSA 2048]----+ | E | | o o . | | + = .| | = o | | S o o | | . + + | | + B . | | .B = | | .+o+.o | +-----------------+ [root@chm log]# [root@chm log]# ssh-copy-id 172.16.24.220 /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys root@172.16.24.220's password: Number of key(s) added: 1 Now try logging into the machine, with: \"ssh '172.16.24.220'\" and check to make sure that only the key(s) you wanted were added. ","date":"2022-12-28","objectID":"/%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/:0:0","tags":["免密登陆"],"title":"免密登陆","uri":"/%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/"},{"categories":["运维"],"content":"1、检查yum源 yum list #查看是否能打开yum源 cat /etc/redhat-release #查看系统版本 2、上传对于的iso镜像包 使用winscp上传iso文件到/home/iso/ 目录随便 3、创建挂载点并挂载镜像文件 mkdir /media/cdrom #创建挂载点的目录 #备注： -o是参数，loop是把一个文件当成硬盘分区mount挂着到目录 mount -o loop /home/iso/CentOS-7-x86_64-DVD-1708.iso /media/cdrom df -HT #查看镜像是否挂载成功 4、修改yum源的配置文件 cd /etc/yum.repos.d/ ls mkdir bak/ mv ./*.repo ./bak/ vim CentOS-local.repo #修改配置文件，内容如下 [my] name=my baseurl=file:///media/cdrom enabled=1 gpgcheck=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7 5、清除缓存 yum clean all yum repolist all #查看yum本地源是否启用 ","date":"2022-05-30","objectID":"/centos-7%E6%8C%82%E8%BD%BD%E6%9C%AC%E5%9C%B0yum%E6%BA%90/:0:0","tags":["yum"],"title":"Centos 7挂载本地yum源","uri":"/centos-7%E6%8C%82%E8%BD%BD%E6%9C%AC%E5%9C%B0yum%E6%BA%90/"},{"categories":["开发"],"content":"注意 1.运行注册机时最好关闭电脑的杀毒软件； 2.运行注册机请断网，无需将注册机放到Navicat Premium安装目录下； 3.请选择对各个版本，Products那块； 4.安装完成后不要运行软件，然后打开注册机。 下载Navicat安装包 下载Navicat安装包 激活方法 下载注册机 1、运行注册机勾选Backup、Host和Navicat v15，如图所示。然后点击Patch按钮，找到Navicat Premium 15安装路径下的navicat.exe，选中并点击打开，此时会提示：navicat.exe - x64 -\u003e Cracked，提示已破解。 2、点击下图的红色箭头所指的Generate，将自动生成Serial Keygen（即注册码），然后复制上。 3、现在打开Navicat Premium 15，点击注册（或菜单栏的帮助——》注册），输入上一步生成的注册码，然后点击激活，紧接着点手动激活。 4、将Navicat手动激活窗口的请求码框中内容复制到注册机Request Code框中，点击Activation Code下面的Generate按钮。 5、将注册机Activation Code处生成的激活码内容复制到Navicat激活码框中激活即可。 ","date":"2022-05-17","objectID":"/navicat_premium%E7%A0%B4%E8%A7%A3/:0:0","tags":["navicat"],"title":"Navicat_premium破解","uri":"/navicat_premium%E7%A0%B4%E8%A7%A3/"},{"categories":["hugo系列"],"content":"LoveIt主题美化与博客功能增强 第一章 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:0:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"前言 本博客使用的是Hugo的LoveIt主题，本文也是基于该主题而写的，不过Hugo的美化步骤应该大同小异，版本如下： hugo: v0.74.2/extended windows/amd64 BuildDate: unknown LoveIt: v0.2.10 请注意，本文的所有功能都离不开两个新增加的文件：_custom.scss和custom.js，部分功能还需要jquery，在第一章中会提及如何引入。 另外本文篇幅太长，阅读体验不好，将其进行分章如下： Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章 Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章 Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章 Hugo系列(3.3) - LoveIt主题美化与博客功能增强 · 第四章 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:1:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"添加自定义的_custom.scss LoveIt主题提供了一个自定义的_custom.scss，可以在该文件里添加自定义的css样式。该文件目录位于\\themes\\LoveIt\\assets\\css\\_custom.scss，不建议直接在该文件里写css代码。 Hugo在渲染页面时优先读取站点根目录下的同名字的目录和文件，所以可以利用这个特点来美化主题。只需要把想修改的主题模板文件拷贝到根目录下同样的目录中并进行修改，这样就可以在不改动原本的主题文件的情况下实现主题美化。 首先在站点根目录下创建一个自定义的文件：\\assets\\css\\_custom.scss，这样Hugo就会最终以该文件来渲染页面的样式。 这是我个人站点的_custom.scss文件 ，有兴趣的可以看看。 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:2:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"注意！！！ 这里有个很关键的点，只有使用的是扩展版本的Hugo，才能令_custom.scss文件生效！！！因为原生的Hugo并不支持编译sass文件，必须使用扩展版本的Hugo才行。 所以请查看你所使用的Hugo版本，如果不是hugo_extended版本，请前往Hugo Release页面 下载你当前版本Hugo所对应的hugo_extended版本。 比如我原本使用的是hugo_0.74.0_Windows-64bit.zip，就需要改为使用hugo_extended_0.74.0_Windows-64bit.zip。 此外，本文会涉及多个文件的修改，包括hmtl、js、scss等文件类型，且由于引入了中文字符，可能导致页面显示乱码，这是因为文件的编码使用的是ANSI，需要改为UTF-8的编码。 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:2:1","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"添加自定义的custom.js LoveIt主题并没有提供一个文件来让我们自定义JavaScript，所以需要自己创建一个js文件来自定义JavaScript。 首先在站点根目录下创建一个自定义的JavaScript文件：\\static\\js\\custom.js。这个文件需要在body的闭合标签之前引入，并且要在theme.min.js的引入顺序之后。这样可以防止样式被其他文件覆盖，并且不会因为JavaScript文件假装太久导致页面长时间的空白。 对于LoveIt主题，custom.js添加在\\themes\\LoveIt\\layouts\\partials\\assets.html里。 首先把该文件拷贝到根目录下的\\layouts\\partials\\assets.html，然后打开拷贝后的文件，把自定义的JavaScript文件添加到最末尾的{{- partial \"plugin/analytics.html\" . -}}的上一行： {{- /* 自定义的js文件 */ -}} \u003cscript type=\"text/javascript\" src=\"/js/custom.js\"\u003e\u003c/script\u003e 由于本文提及的部分功能会用到jQuery，建议一起引入，最终如下： \u003cscript type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js\"\u003e\u003c/script\u003e {{- /* 自定义的js文件 */ -}} \u003cscript type=\"text/javascript\" src=\"/js/custom.js\"\u003e\u003c/script\u003e 如果有其他的JavaScript文件要引入，加在一样的地方就行，但是要放在自定义的custom.js之前。这是我的custom.js文件 ，有兴趣的可以看看。 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:3:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"添加全局cdn变量 对于一些静态资源，比如图片、音乐文件、第三方库等，如果有自己的cdn或者图床等，可以在站点配置文件自定义一个cdn变量，如下： [params] # cdn变量，末尾不需要加/ cdnPrefix = \"http://xxxx\" 接下来就可以在你需要的地方使用该变量，大概有如下3种用法。 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:4:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"在md文件中使用 在md文件中可以用内置的shortcodes来使用该变量： {{\u003c param cdnPrefix \u003e}} ![avatar.jpg]({{\u003c param cdnPrefix \u003e}}/images/avatar.jpg) ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:4:1","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"在模板文件中使用 在layouts目录下有很多html文件，这些是用来渲染站点的模板文件，可以用Hugo的语法来引入该变量： {{ .Site.Params.cdnPrefix }} 如果在一个模板文件里有多个地方使用到该变量，可以定义一个局部变量来使用： {{- $cdn := .Site.Params.cdnPrefix -}} /* 使用局部变量 */ {{ $cdn }} ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:4:2","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"在JavaScript文件中使用 由于JavaScript文件中不能使用上述的shortcodes或Hugo语法来引用变量，只能通过在\\layouts\\partials\\assets.html中用JavaScript语法来引入该变量，如下： /* 这是可以应用于JavaScript文件的全局变量 */ \u003cscript\u003e /* cdn for some static resources */ var $cdnPrefix = {{ .Site.Params.cdnPrefix }}; \u003c/script\u003e 这样就可以在其他被引入的JavaScript文件中使用这个$cdnPrefix变量： $(function () { $.backstretch([ $cdnPrefix + \"/images/background/saber1.jpg\" ], { duration: 60000, fade: 1500 }); }); 如果是想在模板文件里引入某个自定义的JavaScript文件，如下： {{- /* 自定义的js文件 */ -}} \u003cscript type=\"text/javascript\" src=\"{{ .Site.Params.cdnPrefix }}/js/custom.js\"\u003e\u003c/script\u003e ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:4:3","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"主题自带的admonition样式 LoveIt提供了admonition shortcode，支持 12 种样式，可以在页面中插入提示的横幅。代码如下： {{\u003c admonition \u003e}} 一个 **注意** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition abstract \u003e}} 一个 **摘要** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition info \u003e}} 一个 **信息** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition tip \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition success \u003e}} 一个 **成功** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition question \u003e}} 一个 **问题** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition warning \u003e}} 一个 **警告** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition failure \u003e}} 一个 **失败** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition danger \u003e}} 一个 **危险** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition bug \u003e}} 一个 **Bug** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition example \u003e}} 一个 **示例** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition quote \u003e}} 一个 **引用** 横幅 {{\u003c /admonition \u003e}} 效果如下： 注意 一个 注意 横幅 摘要 一个 摘要 横幅 信息 一个 信息 横幅 技巧 一个 技巧 横幅 成功 一个 成功 横幅 问题 一个 问题 横幅 警告 一个 警告 横幅 失败 一个 失败 横幅 危险 一个 危险 横幅 Bug 一个 Bug 横幅 示例 一个 示例 横幅 引用 一个 引用 横幅 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:5:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"自定义404页面 主题默认的404页面太普通，可以通过新增\\layouts\\404.html来自定义自己想要的404页面。这是本站的404页面 ，有兴趣的可以看看源码页面 。 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:6:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"添加背景图片轮播 这个功能需要引入图片轮播插件jquery-backstretch的cdn，并且该插件依赖于jQuery，需要在引入该插件之前引入jQuery。 打开\\layouts\\partials\\assets.html，在你引入的custom.js的上面一行添加如下代码（必须要在custom.js之前引入这两个文件才有效果）： \u003cscript type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js\"\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/jquery-backstretch@2.1.18/jquery.backstretch.min.js\"\u003e\u003c/script\u003e 然后在custom.js里添加如下代码，具体想要轮播哪些图片可以自行修改，如下： /* 轮播背景图片 */ $(function () { $.backstretch([ \"/images/background/saber1.jpg\", \"/images/background/saber2.jpg\", \"/images/background/wlop.jpg\" ], { duration: 60000, fade: 1500 }); }); ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:7:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"添加搜索功能 LoveIt主题自带的搜索插件是lunr和algolia，这两个的使用都比较麻烦，后者甚至还想要去注册账号，虽然可以免费使用搜索服务，但是抓取收录时间好像是一小时一次，并且还有每月使用量的限制，太不便利了。 之前在Hexo那边用的是自带的搜索插件，是每次部署时自动为所有文章生成索引到一个文件里，然后直接搜索该文件来实现本地搜索功能。这个还是比较方便个人站点使用的，于是在网上找到了类似的一个Hugo专用的搜索插件hugo-search-fuse-js 。 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:8:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"安装搜索插件hugo-search-fuse-js到本地 hugo-search-fuse-js并不是一个单独的主题，而是Hugo主题的一个组件： 下载hugo-search-fuse-js 到站点的主题目录/themes/hugo-search-fuse-js下，注意，目录名必须是hugo-search-fuse-js 把该主题组件名字添加到站点配置文件里，注意，搜索组件名字要在最前面，后面跟着的是你的主题的文件夹名字： theme = [\"hugo-search-fuse-js\", \"my-theme\"] 新建一个content/search.md文件，内容如下： +++ title = \"Search\" layout = \"search\" outputs = [\"html\", \"json\"] [sitemap] priority = 0.1 +++ ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:8:1","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"修改页面模板文件baseof.html 把主题目录下的\\themes\\LoveIt\\layouts\\_default\\baseof.html拷贝到站点根目录下的\\layouts\\_default\\baseof.html 在拷贝后的baseof.html的适当位置插入两段代码：{{ block \"main\" . }}{{ end }}和{{ block \"footer\" . }}{{ end }}，下面是一个修改后的样例： \u003cdiv class=\"wrapper\"\u003e {{- partial \"header.html\" . -}} \u003cmain class=\"main\"\u003e \u003cdiv class=\"container\"\u003e {{ block \"main\" . }}{{ end }} {{- block \"content\" . }}{{ end -}} \u003c/div\u003e \u003c/main\u003e {{- partial \"footer.html\" . -}} {{ block \"footer\" . }}{{ end }} \u003c/div\u003e ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:8:2","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"添加搜索按钮 在站点配置文件里添加一个新的按钮给搜索功能使用，如下： [menu] [[menu.main]] pre = \"\u003ci class='fas fa-fw fa-search'\u003e\u003c/i\u003e\" name = \"搜索\" weight = 7 identifier = \"search\" url = \"/search/\" 如果你的配置文件里的菜单属性是多语言的，样例如下： [languages] [languages.en] [languages.en.menu] [[languages.en.menu.main]] pre = \"\u003ci class='fas fa-fw fa-search'\u003e\u003c/i\u003e\" name = \"Search\" weight = 7 identifier = \"search\" url = \"/search/\" ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:8:3","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"关闭LoveIt主题默认的搜索插件 在站点配置文件里把默认的搜索插件关闭，如下： [params] [params.app] [params.search] enable = false 如果你使用的是多语言的配置，则应该把每个语言的搜索插件都关闭，如下： [languages] [languages.en] [languages.en.params] [languages.en.params.search] enable = false [languages.zh-cn] [languages.zh-cn.params] [languages.zh-cn.params.search] enable = false ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:8:4","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"修改搜索页面的样式 如果对该插件生成的搜索页面样式不满意，可以自行修改，下面是我的样式代码： /* 搜索页面 */ .search { position: relative; padding-top: 3.5rem; padding-bottom: 1rem; width: 57.5%; margin: 0 auto; background: white; opacity: .95; } [theme=dark] .search { background: #3a3535; } [theme=dark] .search header, .search header { background-color: #f8f8f8; } [theme=dark] .search header:hover, .search header:hover { -webkit-box-shadow: none; box-shadow: none; } .search header h1 { padding-left: 1rem; background: white; } [theme=dark] .search header h1 { background: #3a3535; } [theme=dark] .search input, .search input { height: initial; width: initial; color: initial; background-color: white; margin: 0 0 0 1rem; border-width: 2px; border-style: inset; border-color: initial; border-image: initial; -webkit-border-radius: 0; -moz-border-radius: 0; border-radius: 0; } .search #search-results { padding-left: 1rem; padding-right: 1rem; } [theme=dark] a:active, [theme=dark] a:hover { color: #2d96bd; } .search hr { margin-left: 1rem; margin-right: 1rem; } ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:8:5","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"优化中文搜索效果 这个搜索功能借助了Fuse.js模糊搜索引擎，为了更好的适配中文搜索结果，需要修改模糊搜索的相关参数，相对的会导致英文搜索结果变多，不过这个可以接受。因为搜索结果变多了，总好过搜索不出来想要的中文结果。而且可以通过设置搜索结果的权重来改变结果的排序，这样越前面的搜索结果就越是我们想要的。 打开\\themes\\hugo-search-fuse-js\\static\\js\\search.js，这里面配置了fuse.js的搜索配置选项，可以参考下我的配置，我已经添加了部分中文注释： // Options for fuse.js let fuseOptions = { shouldSort: true, // 是否按分数对结果列表排序 includeMatches: true, // 是否应将分数包含在结果集中。0分表示完全匹配，1分表示完全不匹配。 tokenize: true, matchAllTokens: true, threshold: 0.2, // 匹配算法阈值。阈值为0.0需要完全匹配（字母和位置），阈值为1.0将匹配任何内容。 location: 0, // 确定文本中预期找到的模式的大致位置。 /** * 确定匹配与模糊位置（由位置指定）的距离。一个精确的字母匹配，即距离模糊位置很远的字符将被视为完全不匹配。 * 距离为0要求匹配位于指定的准确位置，距离为100则要求完全匹配位于使用阈值0.2找到的位置的20个字符以内。 */ distance: 100, maxPatternLength: 64, // 模式的最大长度 minMatchCharLength: 2, // 模式的最小字符长度 keys: [ {name:\"title\",weight:0.8}, {name:\"tags\",weight:0.5}, {name:\"categories\",weight:0.5}, {name:\"contents\",weight:0.4} ] }; 这里和中文搜索有关的主要就3个选项：threshold，location，distance。 threshold是阈值，这个参数搭配distance使用。如果阈值填了0.0，相当于distance没有意义。location填0就行，distance填100就足够了，太大了会导致搜索到过多的结果。上面根据我个人的中文搜索测试结果，选择了这样的配置： threshold: 0.2, location: 0, distance: 100 可以根据个人情况来修改这几个参数的值，另外我还将minMatchCharLength的值改成了2，不过经过测试，和之前默认的3并没有什么差别。 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:8:6","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"如何添加自定义的页面 除了发布草稿和正文，我们还可以添加自定义的页面page。page不会像文章那样被渲染，而是被渲染成一个单独的页面，类似于你的文档、标签页面。 方法很简单： 在站点根目录的/content/目录下，新建一个文件夹，比如about文件夹。然后在该文件夹里新建一个index.md文件，该文件将作为站点访问该目录的页面，你可以将其当成一篇特殊的文章。 在index.md文件里加上下面的内容，实际上这里只需要title就够了，date这个日期属性可要可不要，因为page页面是看不到这个日期的： --- title: \"关于\" date: 2018-04-24T22:01:44+08:00 --- `` 接下来你就可以像写普通文章一样，在这个index.md文件里随便写你想要展示的内容就行了。 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:9:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"添加友链页面 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:10:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"新建Page页面 首先在站点根目录的/content/目录下，新建一个friends文件夹。在该文件夹里新建一个index.md文件，内容如下： --- title: \"友链墙\" --- 由于博主想要将友链分类，并能使用上目录，所以不使用这种page形式的友链页面，而是直接创建一篇文章作为友链使用，文件头如下： title: \"友链墙\" url: friends hiddenFromHomePage: true ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:10:1","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"添加friend.html 我们通过自定义一个shortcode来实现该功能，以后就可以方便地通过这个shortcode快速新增友链到页面上。 在站点根目录下新增一个文件：/layouts/shortcodes/friend.html，其内容如下： {{ if .IsNamedParams }} {{ $defaultImg := \"https://sdn.geekzu.org/avatar/d41d8cd98f00b204e9800998ecf8427e?d=retro\" }} \u003ca target=\"_blank\" href={{ .Get \"url\" }} title={{ .Get \"name\" }}---{{ .Get \"word\" }} class=\"friend url\"\u003e \u003cdiv class=\"friend block whole {{ .Get \"primary-color\" | default \"default\"}} {{ .Get \"border-animation\" | default \"shadow\"}}\"\u003e \u003cdiv class=\"friend block left\"\u003e \u003cimg class=\"friend logo {{ .Get \"img-animation\" | default \"rotate\"}}\" src={{ .Get \"logo\" }} onerror=\"this.src='{{ $defaultImg }}'\" /\u003e \u003c/div\u003e \u003cdiv class=\"friend block right\"\u003e \u003cdiv class=\"friend name\"\u003e{{ .Get \"name\" }}\u003c/div\u003e \u003cdiv class=\"friend info\"\u003e\"{{ .Get \"word\" }}\"\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/a\u003e {{ end }} ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:10:2","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"添加样式文件并引入 在站点根目录下新增一个文件：/assets/css/_partial/_single/_friend.scss，内容如下： .friend.url { text-decoration: none !important; color: black; } .friend.logo { width: 56px !important; height: 56px !important; border-radius: 50%; border: 1px solid #ddd; padding: 2px; margin-top: 14px !important; margin-left: 14px !important; background-color: #fff; } .friend.block.whole { height: 92px; margin-top: 8px; margin-left: 4px; width: 31%; display: inline-flex !important; border-radius: 5px; background: rgba(14, 220, 220, 0.15); \u0026.shadow { margin-right: 4px; box-shadow: 4px 4px 2px 1px rgba(0, 0, 255, 0.2); } \u0026.borderFlash { border-width: 3.5px; border-style: solid; animation: borderFlash 2s infinite alternate; } \u0026.led { animation: led 3s infinite alternate; } \u0026.bln { animation: bln 3s infinite alternate; } } .friend.block.whole { \u0026:hover { color: white; \u0026 .friend.info { color: white; } } \u0026.default { --primary-color: #215bb3bf; \u0026:hover { background: rgba(33, 91, 179, 0.75); } } \u0026.red { --primary-color: #e72638; \u0026:hover { background: rgba(231, 38, 56, 0.75); } } \u0026.green { --primary-color: #2ec58d; \u0026:hover { background: rgba(21, 167, 33, 0.75); } } \u0026.blue { --primary-color: #2575fc; \u0026:hover { background: rgba(37, 117, 252, 0.75); } } \u0026.linear-red { --primary-color: #e72638; \u0026:hover { background: linear-gradient(to right, #f9cdcd 0, #e72638 35%); } } \u0026.linear-green { --primary-color: #2ec58d; \u0026:hover { background: linear-gradient(to right, #1d7544 0, #2ec58d 35%); } } \u0026.linear-blue { --primary-color: #2575fc; \u0026:hover { background: linear-gradient(to right, #6a11cb 0, #2575fc 35%); } } } .friend.block.whole .friend.block.left img { \u0026.auto_rotate_left { animation: auto_rotate_left 3s linear infinite; } \u0026.auto_rotate_right { animation: auto_rotate_right 3s linear infinite; } } .friend.block.whole:hover .friend.block.left img { \u0026.rotate { transition: 0.9s !important; -webkit-transition: 0.9s !important; -moz-transition: 0.9s !important; -o-transition: 0.9s !important; -ms-transition: 0.9s !important; transform: rotate(360deg) !important; -webkit-transform: rotate(360deg) !important; -moz-transform: rotate(360deg) !important; -o-transform: rotate(360deg) !important; -ms-transform: rotate(360deg) !important; } } .friend.block.left { width: 92px; min-width: 92px; float: left; } .friend.block.left { margin-right: 2px; } .friend.block.right { margin-top: 18px; margin-right: 18px; } .friend.name { overflow: hidden; font-weight: bolder; word-wrap:break-word; word-break: break-all; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 1; -webkit-box-orient: vertical; } .friend.info { margin-top: 3px; overflow: hidden; word-wrap:break-word; word-break: break-all; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; line-height: normal; font-size: 0.8rem; color: #7a7a7a; } @media screen and (max-width: 900px) { .friend.info { display: none; } .friend.block.whole { width: 45%; } .friend.block.left { width: 84px; margin-left: 15px; } .friend.block.right { height: 100%; margin: auto; display: flex; align-items: center; justify-content: center; } .friend.name { font-size: 14px; } } @keyframes bln { 0% { box-shadow: 0 0 5px grey,inset 0 0 5px grey,0 1px 0 grey; box-shadow: 0 0 5px var(--primary-color,grey),inset 0 0 5px var(--primary-color,grey),0 1px 0 var(--primary-color,grey) } to { box-shadow: 0 0 16px grey,inset 0 0 8px grey,0 1px 0 grey; box-shadow: 0 0 16px var(--primary-color,grey),inset 0 0 8px var(--primary-color,grey),0 1px 0 var(--primary-color,grey) } } @keyframes led { 0% { box-shadow: 0 0 4px #ca00ff } 25% { box-shadow: 0 0 16px #00b5e5 } 50% { box-shadow: 0 0 4px #00f } 75% { box-shadow: 0 0 16px #b1da21 } to { box-shadow: 0 0 4px red } } @keyframes borderFlash { 0% { border-color: white; } to { border-color: grey; border-color: var(--primary-color,grey) } } @keyframes auto_rotate_left { 0% { transform: rotate(0) } to { transform: rotate(-1turn) } } @keyframes auto_rotate_right { 0% { transf","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:10:3","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"另一种添加样式文件并引入的方案 感谢@kirito的建议，原友链样式的方案会侵入原本的主题样式，并且也不是所有页面都需要这个友链样式，所以可以采用另一种方案来选择性地引入友链样式：即同样使用shortcode来引入。 首先创建一个/assets/css/friend.scss文件，内容跟上文的_friend.scss文件一样。然后新增一个/layouts/shortcodes/friend-css.html文件： {{ $options := (dict \"targetPath\" \"/css/friend.css\" \"outputStyle\" \"compressed\" \"enableSourceMap\" true) }} {{ $style := resources.Get \"css/friend.scss\" | resources.ToCSS $options }} \u003clink rel=\"stylesheet\" href=\"{{ $style.RelPermalink }}\"\u003e 在需要使用友链的页面、文章中添加如下shortcode来引入友链样式即可： {{\u003c friend-css \u003e}} ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:10:4","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"在菜单栏里新增一个友链按钮 打开站点配置文件config.toml，添加友链按钮： # 菜单配置 [menu] [[menu.main]] pre = \"\u003ci class='fas fa-fw fa-fan fa-spin'\u003e\u003c/i\u003e\" name = \"友链\" identifier = \"friends\" url = \"/friends/\" weight = 6 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:10:5","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"使用示例和效果展示 在你想要引入友链的文章里使用下面的代码即可自动渲染成对应的友链： {{\u003c friend name=\"雨临Lewis的博客\" url=\"lewky.cn\" logo=\"https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/images/avatar.jpg\" word=\"不想当写手的码农不是好咸鱼_(xз」∠)_\" \u003e}} 上面代码里的四个属性为必填项，还可以额外指定三个不同的属性来选择友链内置的多种样式，如下： //边框及鼠标悬停的背景颜色，允许设置渐变色 //支持7种：default、red、green、blue、linear-red、linear-green、linear-blue primary-color=\"default\" //头像动画：rotate(鼠标悬停时旋转，此为默认效果)、auto_rotate_left(左旋转)、auto_rotate_right(右旋转) img-animation=\"rotate\" //边框动画：shadow(阴影，此为默认效果)、borderFlash(边框闪现)、led(跑马灯)、bln(主颜色呼吸灯) border-animation=\"shadow\" 如果友链的头像无法正常显示，会以一个默认的Gravatar头像显示。此外，在移动端会隐藏站点描述，只显示头像和站点名称，你可以通过将当前窗口缩小到宽度最小即可看到效果。 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:10:6","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"参考链接 自定义Hugo主题样式 kaushalmodi / hugo-search-fuse-js Hugo 篇四：添加友链卡片 shortcodes img标签设置默认图片 Fuse.js模糊搜索引擎 使用fuse.js进行搜索 ","date":"2022-05-16","objectID":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/:11:0","tags":["博客搭建","hugo"],"title":"LoveIt主题美化与博客功能增强 第一章","uri":"/loveit%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"},{"categories":["hugo系列"],"content":"介绍 免费图标类列表名称及其 CSS 内容值代码 \u003ci class='fa fa-cloud'\u003e\u003c/i\u003e 参考wiki angularjswiki fontawesome ","date":"2022-05-16","objectID":"/%E5%85%8D%E8%B4%B9%E5%9B%BE%E6%A0%87/:0:0","tags":["hugo"],"title":"免费图标","uri":"/%E5%85%8D%E8%B4%B9%E5%9B%BE%E6%A0%87/"},{"categories":["开发"],"content":"JAVA线上故障排查全套路 线上故障主要会包括cpu、磁盘、内存以及网络问题，而大多数故障可能会包含不止一个层面的问题，所以进行排查时候尽量四个方面依次排查一遍。同时例如jstack、jmap等工具也是不囿于一个方面的问题的，基本上出问题就是df、free、top 三连，然后依次jstack、jmap伺候，具体问题具体分析即可。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:0:0","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"CPU 一般来讲我们首先会排查cpu方面的问题。cpu异常往往还是比较好定位的。原因包括业务逻辑问题(死循环)、频繁gc以及上下文切换过多。而最常见的往往是业务逻辑(或者框架逻辑)导致的，可以使用jstack来分析对应的堆栈情况。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:1:0","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"使用jstack分析cpu问题 我们先用ps命令找到对应进程的pid(如果你有好几个目标进程，可以先用top看一下哪个占用比较高)。接着用top -H -p pid来找到cpu使用率比较高的一些线程 然后将占用最高的pid转换为16进制printf '%x\\n' pid得到nid 接着直接在jstack中找到相应的堆栈信息jstack pid |grep 'nid' -C5 –color 可以看到我们已经找到了nid为0x42的堆栈信息，接着只要仔细分析一番即可。 当然更常见的是我们对整个jstack文件进行分析，通常我们会比较关注WAITING和TIMED_WAITING的部分，BLOCKED就不用说了。我们可以使用命令cat jstack.log | grep \"java.lang.Thread.State\" | sort -nr | uniq -c来对jstack的状态有一个整体的把握，如果WAITING之类的特别多，那么多半是有问题啦。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:1:1","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"频繁gc 当然我们还是会使用jstack来分析问题，但有时候我们可以先确定下gc是不是太频繁，使用jstat -gc pid 1000命令来对gc分代变化情况进行观察，1000表示采样间隔(ms)，S0C/S1C、S0U/S1U、EC/EU、OC/OU、MC/MU分别代表两个Survivor区、Eden区、老年代、元数据区的容量和使用量。YGC/YGT、FGC/FGCT、GCT则代表YoungGc、FullGc的耗时和次数以及总耗时。如果看到gc比较频繁，再针对gc方面做进一步分析，具体可以参考一下gc章节的描述。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:1:2","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"上下文切换 针对频繁上下文问题，我们可以使用vmstat命令来进行查看 cs(context switch)一列则代表了上下文切换的次数。如果我们希望对特定的pid进行监控那么可以使用 pidstat -w pid命令，cswch和nvcswch表示自愿及非自愿切换。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:1:3","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"磁盘 磁盘问题和cpu一样是属于比较基础的。首先是磁盘空间方面，我们直接使用df -hl来查看文件系统状态 更多时候，磁盘问题还是性能上的问题。我们可以通过iostatiostat -d -k -x来进行分析 最后一列%util可以看到每块磁盘写入的程度，而rrqpm/s以及wrqm/s分别表示读写速度，一般就能帮助定位到具体哪块磁盘出现问题了。 另外我们还需要知道是哪个进程在进行读写，一般来说开发自己心里有数，或者用iotop命令来进行定位文件读写的来源。 不过这边拿到的是tid，我们要转换成pid，可以通过readlink来找到pidreadlink -f /proc/*/task/tid/../..。 找到pid之后就可以看这个进程具体的读写情况cat /proc/pid/io 我们还可以通过lsof命令来确定具体的文件读写情况lsof -p pid ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:2:0","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"内存 内存问题排查起来相对比CPU麻烦一些，场景也比较多。主要包括OOM、GC问题和堆外内存。一般来讲，我们会先用free命令先来检查一发内存的各种情况。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:3:0","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"堆内内存 内存问题大多还都是堆内内存问题。表象上主要分为OOM和StackOverflow。 OOM JMV中的内存不足，OOM大致可以分为以下几种： Exception in thread “main” java.lang.OutOfMemoryError: unable to create new native thread 这个意思是没有足够的内存空间给线程分配java栈，基本上还是线程池代码写的有问题，比如说忘记shutdown，所以说应该首先从代码层面来寻找问题，使用jstack或者jmap。如果一切都正常，JVM方面可以通过指定Xss来减少单个thread stack的大小。另外也可以在系统层面，可以通过修改/etc/security/limits.confnofile和nproc来增大os对线程的限制 Exception in thread “main” java.lang.OutOfMemoryError: Java heap space这个意思是堆的内存占用已经达到-Xmx设置的最大值，应该是最常见的OOM错误了。解决思路仍然是先应该在代码中找，怀疑存在内存泄漏，通过jstack和jmap去定位问题。如果说一切都正常，才需要通过调整Xmx的值来扩大内存。 Caused by: java.lang.OutOfMemoryError: Meta space这个意思是元数据区的内存占用已经达到XX:MaxMetaspaceSize设置的最大值，排查思路和上面的一致，参数方面可以通过XX:MaxPermSize来进行调整(这里就不说1.8以前的永久代了)。 Stack Overflow 栈内存溢出，这个大家见到也比较多。Exception in thread “main” java.lang.StackOverflowError表示线程栈需要的内存大于Xss值，同样也是先进行排查，参数方面通过Xss来调整，但调整的太大可能又会引起OOM。 使用JMAP定位代码内存泄漏 上述关于OOM和StackOverflow的代码排查方面，我们一般使用JMAPjmap -dump:format=b,file=filename pid来导出dump文件 通过mat(Eclipse Memory Analysis Tools)导入dump文件进行分析，内存泄漏问题一般我们直接选Leak Suspects即可，mat给出了内存泄漏的建议。另外也可以选择Top Consumers来查看最大对象报告。和线程相关的问题可以选择thread overview进行分析。除此之外就是选择Histogram类概览来自己慢慢分析，大家可以搜搜mat的相关教程。 日常开发中，代码产生内存泄漏是比较常见的事，并且比较隐蔽，需要开发者更加关注细节。比如说每次请求都new对象，导致大量重复创建对象；进行文件流操作但未正确关闭；手动不当触发gc；ByteBuffer缓存分配不合理等都会造成代码OOM。 另一方面，我们可以在启动参数中指定-XX:+HeapDumpOnOutOfMemoryError来保存OOM时的dump文件。 gc问题和线程 gc问题除了影响cpu也会影响内存，排查思路也是一致的。一般先使用jstat来查看分代变化情况，比如youngGC或者fullGC次数是不是太多呀；EU、OU等指标增长是不是异常呀等。线程的话太多而且不被及时gc也会引发oom，大部分就是之前说的unable to create new native thread。除了jstack细细分析dump文件外，我们一般先会看下总体线程，通过pstreee -p pid |wc -l。 或者直接通过查看/proc/pid/task的数量即为线程数量。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:3:1","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"堆外内存 如果碰到堆外内存溢出，那可真是太不幸了。首先堆外内存溢出表现就是物理常驻内存增长快，报错的话视使用方式都不确定，如果由于使用Netty导致的，那错误日志里可能会出现OutOfDirectMemoryError错误，如果直接是DirectByteBuffer，那会报OutOfMemoryError: Direct buffer memory。 堆外内存溢出往往是和NIO的使用相关，一般我们先通过pmap来查看下进程占用的内存情况pmap -x pid | sort -rn -k3 | head -30，这段意思是查看对应pid倒序前30大的内存段。这边可以再一段时间后再跑一次命令看看内存增长情况，或者和正常机器比较可疑的内存段在哪里。 我们如果确定有可疑的内存端，需要通过gdb来分析gdb --batch --pid {pid} -ex \"dump memory filename.dump {内存起始地址} {内存起始地址+内存块大小}\" 获取dump文件后可用heaxdump进行查看hexdump -C filename | less，不过大多数看到的都是二进制乱码。 NMT是Java7U40引入的HotSpot新特性，配合jcmd命令我们就可以看到具体内存组成了。需要在启动参数中加入 -XX:NativeMemoryTracking=summary 或者 -XX:NativeMemoryTracking=detail，会有略微性能损耗。 一般对于堆外内存缓慢增长直到爆炸的情况来说，可以先设一个基线jcmd pid VM.native_memory baseline。 然后等放一段时间后再去看看内存增长的情况，通过jcmd pid VM.native_memory detail.diff(summary.diff)做一下summary或者detail级别的diff。 可以看到jcmd分析出来的内存十分详细，包括堆内、线程以及gc(所以上述其他内存异常其实都可以用nmt来分析)，这边堆外内存我们重点关注Internal的内存增长，如果增长十分明显的话那就是有问题了。detail级别的话还会有具体内存段的增长情况，如下图。 此外在系统层面，我们还可以使用strace命令来监控内存分配 strace -f -e \"brk,mmap,munmap\" -p pid这边内存分配信息主要包括了pid和内存地址。 不过其实上面那些操作也很难定位到具体的问题点，关键还是要看错误日志栈，找到可疑的对象，搞清楚它的回收机制，然后去分析对应的对象。比如DirectByteBuffer分配内存的话，是需要full GC或者手动system.gc来进行回收的(所以最好不要使用-XX:+DisableExplicitGC)。那么其实我们可以跟踪一下DirectByteBuffer对象的内存情况，通过jmap -histo:live pid手动触发fullGC来看看堆外内存有没有被回收。如果被回收了，那么大概率是堆外内存本身分配的太小了，通过-XX:MaxDirectMemorySize进行调整。如果没有什么变化，那就要使用jmap去分析那些不能被gc的对象，以及和DirectByteBuffer之间的引用关系了。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:3:2","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"GC问题 堆内内存泄漏总是和GC异常相伴。不过GC问题不只是和内存问题相关，还有可能引起CPU负载、网络问题等系列并发症，只是相对来说和内存联系紧密些，所以我们在此单独总结一下GC相关问题。 我们在cpu章介绍了使用jstat来获取当前GC分代变化信息。而更多时候，我们是通过GC日志来排查问题的，在启动参数中加上-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps来开启GC日志。常见的Young GC、Full GC日志含义在此就不做赘述了。 针对gc日志，我们就能大致推断出youngGC与fullGC是否过于频繁或者耗时过长，从而对症下药。我们下面将对G1垃圾收集器来做分析，这边也建议大家使用G1-XX:+UseG1GC。 youngGC过频繁youngGC频繁一般是短周期小对象较多，先考虑是不是Eden区/新生代设置的太小了，看能否通过调整-Xmn、-XX:SurvivorRatio等参数设置来解决问题。如果参数正常，但是young gc频率还是太高，就需要使用Jmap和MAT对dump文件进行进一步排查了。 youngGC耗时过长耗时过长问题就要看GC日志里耗时耗在哪一块了。以G1日志为例，可以关注Root Scanning、Object Copy、Ref Proc等阶段。Ref Proc耗时长，就要注意引用相关的对象。Root Scanning耗时长，就要注意线程数、跨代引用。Object Copy则需要关注对象生存周期。而且耗时分析它需要横向比较，就是和其他项目或者正常时间段的耗时比较。比如说图中的Root Scanning和正常时间段比增长较多，那就是起的线程太多了。 触发fullGCG1中更多的还是mixedGC，但mixedGC可以和youngGC思路一样去排查。触发fullGC了一般都会有问题，G1会退化使用Serial收集器来完成垃圾的清理工作，暂停时长达到秒级别，可以说是半跪了。fullGC的原因可能包括以下这些，以及参数调整方面的一些思路： 并发阶段失败：在并发标记阶段，MixGC之前老年代就被填满了，那么这时候G1就会放弃标记周期。这种情况，可能就需要增加堆大小，或者调整并发标记线程数-XX:ConcGCThreads。 晋升失败：在GC的时候没有足够的内存供存活/晋升对象使用，所以触发了Full GC。这时候可以通过-XX:G1ReservePercent来增加预留内存百分比，减少-XX:InitiatingHeapOccupancyPercent来提前启动标记，-XX:ConcGCThreads来增加标记线程数也是可以的。 大对象分配失败：大对象找不到合适的region空间进行分配，就会进行fullGC，这种情况下可以增大内存或者增大-XX:G1HeapRegionSize。 程序主动执行System.gc()：不要随便写就对了。 另外，我们可以在启动参数中配置-XX:HeapDumpPath=/xxx/dump.hprof来dump fullGC相关的文件，并通过jinfo来进行gc前后的dump jinfo -flag +HeapDumpBeforeFullGC pid jinfo -flag +HeapDumpAfterFullGC pid 这样得到2份dump文件，对比后主要关注被gc掉的问题对象来定位问题。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:4:0","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"网络 涉及到网络层面的问题一般都比较复杂，场景多，定位难，成为了大多数开发的噩梦，应该是最复杂的了。这里会举一些例子，并从tcp层、应用层以及工具的使用等方面进行阐述。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:5:0","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"超时 超时错误大部分处在应用层面，所以这块着重理解概念。超时大体可以分为连接超时和读写超时，某些使用连接池的客户端框架还会存在获取连接超时和空闲连接清理超时。 读写超时。readTimeout/writeTimeout，有些框架叫做so_timeout或者socketTimeout，均指的是数据读写超时。注意这边的超时大部分是指逻辑上的超时。soa的超时指的也是读超时。读写超时一般都只针对客户端设置。 连接超时。connectionTimeout，客户端通常指与服务端建立连接的最大时间。服务端这边connectionTimeout就有些五花八门了，jetty中表示空闲连接清理时间，tomcat则表示连接维持的最大时间。 其他。包括连接获取超时connectionAcquireTimeout和空闲连接清理超时idleConnectionTimeout。多用于使用连接池或队列的客户端或服务端框架。 我们在设置各种超时时间中，需要确认的是尽量保持客户端的超时小于服务端的超时，以保证连接正常结束。 在实际开发中，我们关心最多的应该是接口的读写超时了。 如何设置合理的接口超时是一个问题。如果接口超时设置的过长，那么有可能会过多地占用服务端的tcp连接。而如果接口设置的过短，那么接口超时就会非常频繁。 服务端接口明明rt降低，但客户端仍然一直超时又是另一个问题。这个问题其实很简单，客户端到服务端的链路包括网络传输、排队以及服务处理等，每一个环节都可能是耗时的原因。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:5:1","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"TCP队列溢出 tcp队列溢出是个相对底层的错误，它可能会造成超时、rst等更表层的错误。因此错误也更隐蔽，所以我们单独说一说。 如上图所示，这里有两个队列：syns queue(半连接队列）、accept queue（全连接队列）。三次握手，在server收到client的syn后，把消息放到syns queue，回复syn+ack给client，server收到client的ack，如果这时accept queue没满，那就从syns queue拿出暂存的信息放入accept queue中，否则按tcp_abort_on_overflow指示的执行。 tcp_abort_on_overflow 0表示如果三次握手第三步的时候accept queue满了那么server扔掉client发过来的ack。tcp_abort_on_overflow 1则表示第三步的时候如果全连接队列满了，server发送一个rst包给client，表示废掉这个握手过程和这个连接，意味着日志里可能会有很多connection reset / connection reset by peer。 那么在实际开发中，我们怎么能快速定位到tcp队列溢出呢？ netstat命令，执行 netstat -s | egrep \"listen|LISTEN\" 如上图所示，overflowed表示全连接队列溢出的次数，sockets dropped表示半连接队列溢出的次数。 ss命令，执行 ss -lnt 上面看到Send-Q 表示第三列的listen端口上的全连接队列最大为5，第一列Recv-Q为全连接队列当前使用了多少。 接着我们看看怎么设置全连接、半连接队列大小吧： 全连接队列的大小取决于min(backlog, somaxconn)。backlog是在socket创建的时候传入的，somaxconn是一个os级别的系统参数。而半连接队列的大小取决于max(64, /proc/sys/net/ipv4/tcp_max_syn_backlog)。 在日常开发中，我们往往使用servlet容器作为服务端，所以我们有时候也需要关注容器的连接队列大小。在tomcat中backlog叫做acceptCount，在jetty里面则是acceptQueueSize。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:5:2","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"RST异常 RST包表示连接重置，用于关闭一些无用的连接，通常表示异常关闭，区别于四次挥手。 在实际开发中，我们往往会看到connection reset / connection reset by peer错误，这种情况就是RST包导致的。 端口不存在 如果像不存在的端口发出建立连接SYN请求，那么服务端发现自己并没有这个端口则会直接返回一个RST报文，用于中断连接。 主动代替FIN终止连接 一般来说，正常的连接关闭都是需要通过FIN报文实现，然而我们也可以用RST报文来代替FIN，表示直接终止连接。实际开发中，可设置SO_LINGER数值来控制，这种往往是故意的，来跳过TIMED_WAIT，提供交互效率，不闲就慎用。 客户端或服务端有一边发生了异常，该方向对端发送RST以告知关闭连接 我们上面讲的tcp队列溢出发送RST包其实也是属于这一种。这种往往是由于某些原因，一方无法再能正常处理请求连接了(比如程序崩了，队列满了)，从而告知另一方关闭连接。 接收到的TCP报文不在已知的TCP连接内 比如，一方机器由于网络实在太差TCP报文失踪了，另一方关闭了该连接，然后过了许久收到了之前失踪的TCP报文，但由于对应的TCP连接已不存在，那么会直接发一个RST包以便开启新的连接。 一方长期未收到另一方的确认报文，在一定时间或重传次数后发出RST报文 这种大多也和网络环境相关了，网络环境差可能会导致更多的RST报文。 之前说过RST报文多会导致程序报错，在一个已关闭的连接上读操作会报connection reset，而在一个已关闭的连接上写操作则会报connection reset by peer。通常我们可能还会看到broken pipe错误，这是管道层面的错误，表示对已关闭的管道进行读写，往往是在收到RST，报出connection reset错后继续读写数据报的错，这个在glibc源码注释中也有介绍。 我们在排查故障时候怎么确定有RST包的存在呢？当然是使用tcpdump命令进行抓包，并使用wireshark进行简单分析了。tcpdump -i en0 tcp -w xxx.cap，en0表示监听的网卡。 接下来我们通过wireshark打开抓到的包，可能就能看到如下图所示，红色的就表示RST包了。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:5:3","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["开发"],"content":"TIME_WAIT和CLOSE_WAIT TIME_WAIT和CLOSE_WAIT是啥意思相信大家都知道。在线上时，我们可以直接用命令netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'来查看time-wait和close_wait的数量 用ss命令会更快ss -ant | awk '{++S[$1]} END {for(a in S) print a, S[a]}' TIME_WAIT time_wait的存在一是为了丢失的数据包被后面连接复用，二是为了在2MSL的时间范围内正常关闭连接。它的存在其实会大大减少RST包的出现。 过多的time_wait在短连接频繁的场景比较容易出现。这种情况可以在服务端做一些内核参数调优: #表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭 net.ipv4.tcp_tw_reuse = 1 #表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭 net.ipv4.tcp_tw_recycle = 1 当然我们不要忘记在NAT环境下因为时间戳错乱导致数据包被拒绝的坑了，另外的办法就是改小tcp_max_tw_buckets，超过这个数的time_wait都会被干掉，不过这也会导致报time wait bucket table overflow的错。 CLOSE_WAIT close_wait往往都是因为应用程序写的有问题，没有在ACK后再次发起FIN报文。close_wait出现的概率甚至比time_wait要更高，后果也更严重。往往是由于某个地方阻塞住了，没有正常关闭连接，从而渐渐地消耗完所有的线程。 想要定位这类问题，最好是通过jstack来分析线程堆栈来排查问题，具体可参考上述章节。这里仅举一个例子。 开发同学说应用上线后CLOSE_WAIT就一直增多，直到挂掉为止，jstack后找到比较可疑的堆栈是大部分线程都卡在了countdownlatch.await方法，找开发同学了解后得知使用了多线程但是确没有catch异常，修改后发现异常仅仅是最简单的升级sdk后常出现的class not found。 ","date":"2022-05-14","objectID":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/:5:4","tags":["JAVA线上故障排"],"title":"JAVA线上故障排查全套路","uri":"/java%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E5%85%A8%E5%A5%97%E8%B7%AF/"},{"categories":["hugo系列"],"content":"Hugo LoveIt主题配置与使用 ","date":"2022-05-12","objectID":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:0","tags":["博客搭建","hugo"],"title":"LoveIt主题配置与使用","uri":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["hugo系列"],"content":"1. 安装主题 把这个主题克隆到 themes 目录: ","date":"2022-05-12","objectID":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/:1:0","tags":["博客搭建","hugo"],"title":"LoveIt主题配置与使用","uri":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["hugo系列"],"content":"2. 配置主题 ","date":"2022-05-12","objectID":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:0","tags":["博客搭建","hugo"],"title":"LoveIt主题配置与使用","uri":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["hugo系列"],"content":"2.1. 站点配置文件的修改 将根目录\\themes\\LoveIt\\exampleSite路径下的config.toml文件复制到根目录 下，覆盖掉根目录下的config.toml文件。然后，我们在notepad++中打开并对其作一定的修改就可以直接使用，具体可以修改的内容如下： baseURL = \"https://luckly.work\" # [en, zh-cn, fr, pl, ...] determines default content language # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 主题 theme = \"LoveIt\" # 网站标题 title = \"Lucklyの博客 - 在阅读中遇见自己\" # 是否使用 robots.txt enableRobotsTXT = true # 是否使用 git 信息 enableGitInfo = true # 是否使用 emoji 代码 enableEmoji = true [languages] [languages.zh-cn] weight = 2 # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 语言名称 languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 默认每页列表显示的文章数目 paginate = 12 # [UA-XXXXXXXX-X] 谷歌分析代号 googleAnalytics = \"\" # 版权描述，仅仅用于 SEO copyright = \"This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\" # 菜单配置 [languages.zh-cn.menu] [[languages.zh-cn.menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"所有文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [[languages.zh-cn.menu.main]] identifier = \"documentation\" pre = \"\" name = \"文档\" url = \"/categories/documentation/\" title = \"\" weight = 4 [[languages.zh-cn.menu.main]] identifier = \"about\" pre = \"\" post = \"\" name = \"关于\" url = \"/about/\" title = \"\" weight = 5 [[languages.zh-cn.menu.main]] identifier = \"github\" pre = \"\u003ci class='fab fa-github fa-fw'\u003e\u003c/i\u003e\" post = \"\" name = \"Github\" url = \"https://github.com/ITmxs\" title = \"GitHub\" weight = 6 [[languages.zh-cn.menu.main]] identifier = \"friend\" pre = \"\u003ci class='fas fa-user-friends'\u003e\u003c/i\u003e\" post = \"\" name = \"友链\" url = \"/friend/\" title = \"\" weight = 7 [languages.zh-cn.params] # 网站描述 description = \"早起的年轻人做的网站\" # 网站关键词 keywords = [\"Theme\", \"Hugo\"] # 应用图标配置 [languages.zh-cn.params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"LoveIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10 磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [languages.zh-cn.params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [languages.zh-cn.params.search.algolia] index = \"index.zh-cn\" appID = \"PASDMWALPK\" searchKey = \"b42948e51daaa93df92381c8e2ac0f93\" # 主页信息设置 [languages.zh-cn.params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [languages.zh-cn.params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 subtitle = \"一个记录学习过程的网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [languages.zh-cn.params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 主页的社交信息设置 [languages.zh-cn.params.social] GitHub = \"ITmxs\" Bilibili = \"480883651\" Zhihu = \"yimi-yang-guang-96-65\" Linkedin = \"\" Twitter = \"\" Instagram = \"\" Facebook = \"\" Telegram = \"\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = \"\" Tumblr = \"\" Quora = \"\" Keybase = \"\" Pinterest = \"\" Reddit = \"\" Codepen = \"\" FreeCodeCamp = \"\" Bitbucket = \"\" Stackoverflow = \"\" # Weibo = \"xxxx\" Odnoklassniki = \"\" VK = \"\" Flickr = \"\" Xing = \"\" Snapchat = \"\" Soundcloud = \"\" Spotify = \"\" Bandcamp = \"\" Paypal = \"\" Fivehundredpx = \"\" Mix = \"\" Goodreads = \"\" Lastfm = \"\" Foursquare = \"\" Hackernews = \"\" Kickstarter = \"\" Patreon = \"\" # Steam = \"xxxx\" Twitch = \"\" Strava = \"\" Skype = \"\" Whatsapp = \"\" # Juejin ","date":"2022-05-12","objectID":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:1","tags":["博客搭建","hugo"],"title":"LoveIt主题配置与使用","uri":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["hugo系列"],"content":"2.2. 默认文章模板的修改 将根目录\\archetypes下的default.md修改如下： title: \"{{ replace .TranslationBaseName \"-\" \" \" | title }}\" subtitle: \"\" date: {{ .Date }} lastmod: {{ .Date }} draft: false toc: enable: true weight: false categories: [\"\"] tags: [\"\"] ","date":"2022-05-12","objectID":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:2","tags":["博客搭建","hugo"],"title":"LoveIt主题配置与使用","uri":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["hugo系列"],"content":"2.3. LoveIt主题官方前置参数 --- title: \"我的第一篇文章\" subtitle: \"\" date: 2020-03-04T15:58:26+08:00 lastmod: 2020-03-04T15:58:26+08:00 draft: true author: \"\" authorLink: \"\" description: \"\" license: \"\" images: [] tags: [] categories: [] featuredImage: \"\" featuredImagePreview: \"\" hiddenFromHomePage: false hiddenFromSearch: false twemoji: false lightgallery: true ruby: true fraction: true fontawesome: true linkToMarkdown: true rssFullText: false toc: enable: true auto: true code: copy: true # ... math: enable: true # ... mapbox: accessToken: \"\" # ... share: enable: true # ... comment: enable: true # ... library: css: # someCSS = \"some.css\" # 位于 \"assets/\" # 或者 # someCSS = \"https://cdn.example.com/some.css\" js: # someJS = \"some.js\" # 位于 \"assets/\" # 或者 # someJS = \"https://cdn.example.com/some.js\" seo: images: [] # ... --- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 –buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: 如果设为 true, 这篇文章会使用 分数扩展语法. fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. toc: 和网站配置 中的 params.page.toc 部分相同. code: 和网站配置 中的 params.page.code 部分相同. math: 和网站配置 中的 params.page.math 部分相同. mapbox: 和网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和网站配置 中的 params.page.comment 部分相同. library: 和网站配置 中的 params.page.library 部分相同. seo: 和网站配置 中的 params.page.seo 部分相同. ","date":"2022-05-12","objectID":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:3","tags":["博客搭建","hugo"],"title":"LoveIt主题配置与使用","uri":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["hugo系列"],"content":"2.4. 添加友情链接 shortcodes 2.4.1. 代码部分 LoveIt/layouts/shortcodes/ 下面新建 friend.html 文件： {{ if .IsNamedParams }} \u003ca target=\"_blank\" href={{ .Get \"url\" }} title={{ .Get \"name\" }} class=\"friendurl\"\u003e \u003cdiv class=\"frienddiv\"\u003e \u003cdiv class=\"frienddivleft\"\u003e \u003cimg class=\"myfriend\" src={{ .Get \"logo\" }} /\u003e \u003c/div\u003e \u003cdiv class=\"frienddivright\"\u003e \u003cdiv class=\"friendname\"\u003e{{ .Get \"name\" }}\u003c/div\u003e \u003cdiv class=\"friendinfo\"\u003e{{ .Get \"word\" }}\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/a\u003e {{ end }} LoveIt/assets/css/_partial/_single/ 下面新建 _friend.scss 文件： .friendurl { text-decoration: none !important; color: black; } .myfriend { width: 56px !important; height: 56px !important; border-radius: 50%; border: 1px solid #ddd; padding: 2px; box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.15); margin-top: 14px !important; margin-left: 14px !important; background-color: #fff; } .frienddiv { height: 92px; margin-top: 10px; width: 48%; display: inline-block !important; border-radius: 5px; background: rgba(255, 255, 255, 0.2); box-shadow: 4px 4px 2px 1px rgba(0, 0, 255, 0.2); } .frienddiv:hover { background: rgba(87, 142, 224, 0.15); } .frienddiv:hover .frienddivleft img { transition: 0.9s !important; -webkit-transition: 0.9s !important; -moz-transition: 0.9s !important; -o-transition: 0.9s !important; -ms-transition: 0.9s !important; transform: rotate(360deg) !important; -webkit-transform: rotate(360deg) !important; -moz-transform: rotate(360deg) !important; -o-transform: rotate(360deg) !important; -ms-transform: rotate(360deg) !important; } .frienddivleft { width: 92px; float: left; } .frienddivleft { margin-right: 2px; } .frienddivright { margin-top: 18px; margin-right: 18px; } .friendname { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .friendinfo { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } @media screen and (max-width: 600px) { .friendinfo { display: none; } .frienddivleft { width: 84px; margin: auto; } .frienddivright { height: 100%; margin: auto; display: flex; align-items: center; justify-content: center; } .friendname { font-size: 14px; } } LoveIt/assets/css/_page/ 下面修改 _single.scss，引入下面一行： @import \"../_partial/_single/friend\"; 2.4.2. 展示效果 使用示例： {{\\\u003c friend name=\"Dillon\" url=\"https://github.com/dillonzq/\" logo=\"https://avatars0.githubusercontent.com/u/30786232?s=460\u0026u=5fc878f67c869ce6628cf65121b8d73e1733f941\u0026v=4\" word=\"LoveIt主题作者\" \u003e}} ","date":"2022-05-12","objectID":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:4","tags":["博客搭建","hugo"],"title":"LoveIt主题配置与使用","uri":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["hugo系列"],"content":"3.官方文档 更多内容可查看官方文档： 主题文档 - 基本概念 主题文档 - 内容 参考链接 Hugo 篇四：添加友链卡片 shortcodes 图标网址： https://fontawesome.com/icons/user-friends?style=solid 自定义配置： https://blog.csdn.net/lislie_/article/details/96597743 ","date":"2022-05-12","objectID":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/:3:0","tags":["博客搭建","hugo"],"title":"LoveIt主题配置与使用","uri":"/loveit%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["docker"],"content":"Docker-Compose的一些常用命令 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:0:0","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"一、Docker-Compose简介 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:1:0","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"1、Docker-Compose简介 Docker-Compose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。 Docker-Compose将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）。Docker-Compose运行目录下的所有文件（docker-compose.yml，extends文件或环境变量文件等）组成一个工程，若无特殊指定工程名即为当前目录名。一个工程当中可包含多个服务，每个服务中定义了容器运行的镜像，参数，依赖。一个服务当中可包括多个容器实例，Docker-Compose并没有解决负载均衡 的问题，因此需要借助其它工具实现服务发现及负载均衡。 Docker-Compose的工程配置文件默认为docker-compose.yml，可通过环境变量COMPOSE_FILE或-f参数自定义配置文件，其定义了多个有依赖关系的服务及每个服务运行的容器。 使用一个Dockerfile模板文件，可以让用户很方便的定义一个单独的应用容器。在工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个Web项目，除了Web服务容器本身，往往还需要再加上后端的数据库 服务容器，甚至还包括负载均衡容器等。 Compose允许用户通过一个单独的docker-compose.yml模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。 Docker-Compose项目由Python编写，调用Docker服务提供的API来对容器进行管理。因此，只要所操作的平台支持Docker API，就可以在其上利用Compose来进行编排管理。 1.1 安装docker-compose前提是要安装docker #下载阿里源 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo #建yum缓存 yum makecache fast #安装docker一些必备工具 yum install -y yum-utils device-mapper-persistent-data lvm2 net-tools #下载docker源 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo #安装docker yum install -y docker-ce docker-ce-cli containerd.io #如果想安装指定的docker版本，Docker-CE: (VERSION例如17.03.0.ce.1-1.el7.centos) yum -y install docker-ce-[VERSION] yum list docker-ce.x86_64 --showduplicates | sort -r #启动docker并且下次开启自启 systemctl start docker \u0026\u0026 systemctl enable docker #查询版本 docker --version 下载离线包 安装包 #下载离线docker安装包,并上传到服务器 #解压 tar -zxvf docker20.10.tar.gz #安装docker rpm -ivh *.rpm --force –nodeps #启动docker并且下次开启自启 systemctl start docker \u0026\u0026 systemctl enable docker #查询版本 docker --version ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:1:1","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"2、Docker-Compose安装 安装方法一： 在线Docker-Compose： sudo curl -L https://github.com/docker/compose/releases/download/1.23.0-rc3/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose #安装Docker-Compose： sudo chmod +x /usr/local/bin/docker-compose #查看版本 : docker-compose version 安装方法二：docker-compose离线安装 下载离线包 安装包 #上传至服务器 #给执行权限，然后去移动到程序执行的目录 [root@node02 ~]# chmod +x docker-compose [root@node02 ~]# mv docker-compose /usr/local/bin/ #验证是否安装成功 [root@node02 ~]# docker-compose --version #注意：如果/usr/local/bin下面不可以，可以尝试/usr/bin/ ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:1:2","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"二、Docker-Compose常用命令 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:0","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"1、Docker-Compose命令格式 docker-compose [-f \u003carg\u003e...] [options] [COMMAND] [ARGS...] 命令选项如下： -f，–file FILE指定Compose模板文件，默认为docker-compose.yml，可以多次指定。 -p，–project-name NAME指定项目名称，默认将使用所在目录名称作为项目名。 -x-network-driver 使用Docker的可拔插网络后端特性（需要Docker 1.9+版本） -x-network-driver DRIVER指定网络后端的驱动，默认为bridge（需要Docker 1.9+版本） -verbose输出更多调试信息 -v，–version打印版本并退出 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:1","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"2、docker-compose up 这个命令一定要记住，每次启动都要用到，只要学会使用的人记住这个就好了 docker-compose up [options] [--scale SERVICE=NUM...] [SERVICE...] 选项包括： -d 在后台运行服务容器 –no-color 不使用颜色来区分不同的服务的控制输出 –no-deps 不启动服务所链接的容器 –force-recreate 强制重新创建容器，不能与–no-recreate同时使用 –no-recreate 如果容器已经存在，则不重新创建，不能与–force-recreate同时使用 –no-build 不自动构建缺失的服务镜像 –build 在启动容器前构建服务镜像 – abort-on-container-exit 停止所有容器，如果任何一个容器被停止，不能与-d同时使用 -t, –timeout TIMEOUT 停止容器时候的超时（默认为10秒） –remove-orphans 删除服务中没有在compose文件中定义的容器 –scale SERVICE=NUM 设置服务运行容器的个数，将覆盖在compose中通过scale指定的参数 ​ docker-compose up 启动所有服务 ​ docker-compose up -d 在后台所有启动服务 ​ -f 指定使用的Compose模板文件，默认为docker-compose.yml，可以多次指定。 ​ docker-compose -f docker-compose.yml up -d ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:2","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"3、docker-compose ps docker-compose ps [options] [SERVICE...] docker-compose ps 列出项目中目前的所有容器 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:3","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"3、docker-compose ps docker-compose ps [options] [SERVICE...] docker-compose ps 列出项目中目前的所有容器 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:4","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"4、docker-compose stop docker-compose stop [options] [SERVICE...] 选项包括： -t, –timeout TIMEOUT 停止容器时候的超时（默认为10秒） docker-compose stop 停止正在运行的容器，可以通过docker-compose start 再次启动 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:5","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"5、docker-compose -h docker-compose -h 查看帮助 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:6","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"6、docker-compose down docker-compose down [options] 停止和删除容器、网络、卷、镜像。 选项包括： –rmi type，删除镜像，类型必须是：all，删除compose文件中定义的所有镜像；local，删除镜像名为空的镜像 -v, –volumes，删除已经在compose文件中定义的和匿名的附在容器上的数据卷 –remove-orphans，删除服务中没有在compose中定义的容器 docker-compose down 停用移除所有容器以及网络相关 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:7","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"7、docker-compose logs docker-compose logs [options] [SERVICE...] 查看服务容器的输出。默认情况下，docker-compose将对不同的服务输出使用不同的颜色来区分。可以通过–no-color来关闭颜色。 docker-compose logs 查看服务容器的输出 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:8","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"8、docker-compose build docker-compose build [options] [--build-arg key=val...] [SERVICE...] 构建（重新构建）项目中的服务容器。 选项包括： –compress 通过gzip压缩构建上下环境 –force-rm 删除构建过程中的临时容器 –no-cache 构建镜像过程中不使用缓存 –pull 始终尝试通过拉取操作来获取更新版本的镜像 -m, –memory MEM为构建的容器设置内存大小 –build-arg key=val为服务设置build-time变量 服务容器一旦构建后，将会带上一个标记名。可以随时在项目目录下运行docker-compose build来重新构建服务 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:9","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"9、docker-compose pull docker-compose pull [options] [SERVICE...] 拉取服务依赖的镜像。 选项包括： –ignore-pull-failures，忽略拉取镜像过程中的错误 –parallel，多个镜像同时拉取 –quiet，拉取镜像过程中不打印进度信息 docker-compose pull 拉取服务依赖的镜像 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:10","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"10、docker-compose restart docker-compose restart [options] [SERVICE...] 重启项目中的服务。 选项包括： -t, –timeout TIMEOUT，指定重启前停止容器的超时（默认为10秒） docker-compose restart 重启项目中的服务 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:11","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"11、docker-compose rm docker-compose rm [options] [SERVICE...] 删除所有（停止状态的）服务容器。 选项包括： –f, –force，强制直接删除，包括非停止状态的容器 -v，删除容器所挂载的数据卷 docker-compose rm 删除所有（停止状态的）服务容器。推荐先执行docker-compose stop命令来停止容器。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:12","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"12、docker-compose start docker-compose start [SERVICE...] docker-compose start 启动已经存在的服务容器。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:13","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"13、docker-compose run docker-compose run [options] [-v VOLUME...] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...] 在指定服务上执行一个命令。 docker-compose run ubuntu ping www.baidu.com 在指定容器上执行一个ping命令。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:14","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"14、docker-compose scale docker-compose scale web=3 db=2 设置指定服务运行的容器个数。通过service=num的参数来设置数量 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:15","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"15、docker-compose pause docker-compose pause [SERVICE...] 暂停一个服务容器 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:16","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"16、docker-compose kill docker-compose kill [options] [SERVICE...]` 通过发送SIGKILL信号来强制停止服务容器。 支持通过-s参数来指定发送的信号，例如通过如下指令发送SIGINT信号： `docker-compose kill -s SIGINT ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:17","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"17、dokcer-compose config docker-compose config [options] 验证并查看compose文件配置。 选项包括： –resolve-image-digests 将镜像标签标记为摘要 -q, –quiet 只验证配置，不输出。 当配置正确时，不输出任何内容，当文件配置错误，输出错误信息 –services 打印服务名，一行一个 –volumes 打印数据卷名，一行一个 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:18","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"18、docker-compose create docker-compose create [options] [SERVICE...] 为服务创建容器。 选项包括： –force-recreate：重新创建容器，即使配置和镜像没有改变，不兼容–no-recreate参数 –no-recreate：如果容器已经存在，不需要重新创建，不兼容–force-recreate参数 –no-build：不创建镜像，即使缺失 –build：创建容器前，生成镜像 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:19","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"19、docker-compose exec docker-compose exec [options] SERVICE COMMAND [ARGS...] 选项包括： -d 分离模式，后台运行命令。 –privileged 获取特权。 –user USER 指定运行的用户。 -T 禁用分配TTY，默认docker-compose exec分配TTY。 –index=index，当一个服务拥有多个容器时，可通过该参数登陆到该服务下的任何服务，例如：docker-compose exec –index=1 web /bin/bash ，web服务中包含多个容器 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:20","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"20、docker-compose port docker-compose port [options] SERVICE PRIVATE_PORT 显示某个容器端口所映射的公共端口。 选项包括： –protocol=proto，指定端口协议，TCP（默认值）或者UDP –index=index，如果同意服务存在多个容器，指定命令对象容器的序号（默认为1） ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:21","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"21、docker-compose push docker-compose push [options] [SERVICE...] 推送服务依的镜像。 选项包括： –ignore-push-failures 忽略推送镜像过程中的错误 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:22","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"22、docker-compose stop docker-compose stop [options] [SERVICE...] 显示各个容器运行的进程情况。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:23","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"23、docker-compose unpause docker-compose unpause [SERVICE...] 恢复处于暂停状态中的服务。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:24","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"24、docker-compose version docker-compose version 打印版本信息。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:25","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"三、Docker-Compose模板文件 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:0","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"1、Docker-Compose模板文件简介 Compose允许用户通过一个docker-compose.yml模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。 Compose模板文件是一个定义服务、网络和卷的YAML文件。Compose模板文件默认路径是当前目录下的docker-compose.yml，可以使用.yml或.yaml作为文件扩展名。 Docker-Compose标准模板文件应该包含version、services、networks 三大部分，最关键的是services和networks两个部分。 version: '2' services: web: image: dockercloud/hello-world ports: - 8080 networks: - front-tier - back-tier redis: image: redis links: - web networks: - back-tier lb: image: dockercloud/haproxy ports: - 80:80 links: - web networks: - front-tier - back-tier volumes: - /var/run/docker.sock:/var/run/docker.sock networks: front-tier: driver: bridge back-tier: driver: bridge 复制 Compose目前有三个版本分别为Version 1，Version 2，Version 3，Compose区分Version 1和Version 2（Compose 1.6.0+，Docker Engine 1.10.0+）。Version 2支持更多的指令。Version 1将来会被弃用。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:1","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"2、image image是指定服务的镜像名称或镜像ID。如果镜像在本地不存在，Compose将会尝试拉取镜像。 services: web: image: hello-world ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:2","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"3、build 服务除了可以基于指定的镜像，还可以基于一份Dockerfile，在使用up启动时执行构建任务，构建标签是build，可以指定Dockerfile所在文件夹的路径。Compose将会利用Dockerfile自动构建镜像，然后使用镜像启动服务容器。 build: /path/to/build/dir 也可以是相对路径，只要上下文确定就可以读取到Dockerfile。 build: ./dir 设定上下文根目录，然后以该目录为准指定Dockerfile。 build: context: ../ dockerfile: path/of/Dockerfile build都是一个目录，如果要指定Dockerfile文件需要在build标签的子级标签中使用dockerfile标签指定。 如果同时指定image和build两个标签，那么Compose会构建镜像并且把镜像命名为image值指定的名字。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:3","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"4、context context选项可以是Dockerfile的文件路径，也可以是到链接到git仓库的url，当提供的值是相对路径时，被解析为相对于撰写文件的路径，此目录也是发送到Docker守护进程的context build: context: ./dir ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:4","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"5、dockerfile 使用dockerfile文件来构建，必须指定构建路径 build: context: . dockerfile: Dockerfile-alternate dockerfile指令不能跟image同时使用，否则Compose将不确定根据哪个指令来生成最终的服务镜像。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:5","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"6、command 使用command可以覆盖容器启动后默认执行的命令。 command: bundle exec thin -p 3000 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:6","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"7、container_name Compose的容器名称格式是：\u003c项目名称\u003e\u003c服务名称\u003e\u003c序号\u003e 可以自定义项目名称、服务名称，但如果想完全控制容器的命名，可以使用标签指定： container_name: app ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:7","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"8、depends_on 在使用Compose时，最大的好处就是少打启动命令，但一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。例如在没启动数据库容器的时候启动应用容器，应用容器会因为找不到数据库而退出。depends_on标签用于解决容器的依赖、启动先后的问题。 version:'2'services:web:build:.depends_on:- db- redisredis:image:redisdb:image:postgres 上述YAML文件定义的容器会先启动redis和db两个服务，最后才启动web 服务。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:8","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"9、pid pid: \"host\" 将PID模式设置为主机PID模式，跟主机系统共享进程命名空间。容器使用pid标签将能够访问和操纵其他容器和宿主机 的名称空间。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:9","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"10、ports ports用于映射端口的标签。 使用HOST:CONTAINER格式或者只是指定容器的端口，宿主机会随机映射端口。 ports: - \"3000\" - \"8000:8000\" - \"49100:22\" - \"127.0.0.1:8001:8001\" 当使用HOST:CONTAINER格式来映射端口时，如果使用的容器端口小于60可能会得到错误得结果，因为YAML将会解析xx:yy这种数字格式为60进制。所以建议采用字符串格式。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:10","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"11、extra_hosts 添加主机名的标签，会在/etc/hosts文件中添加一些记录。 extra_hosts:- \"somehost:162.242.195.82\"- \"otherhost:50.31.209.229\" 启动后查看容器内部hosts： 162.242.195.82 somehost 50.31.209.229 otherhost ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:11","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"12、volumes 挂载一个目录或者一个已存在的数据卷容器，可以直接使用 [HOST:CONTAINER]格式，或者使用[HOST:CONTAINER:ro]格式，后者对于容器来说，数据卷是只读的，可以有效保护宿主机的文件系统。 Compose的数据卷指定路径可以是相对路径，使用 . 或者 .. 来指定相对目录。 数据卷的格式可以是下面多种形式： volumes:// 只是指定一个路径，Docker 会自动在创建一个数据卷（这个路径是容器内部的）。- /var/lib/mysql// 使用绝对路径挂载数据卷- /opt/data:/var/lib/mysql// 以 Compose 配置文件为中心的相对路径作为数据卷挂载到容器。- ./cache:/tmp/cache// 使用用户的相对路径（~/ 表示的目录是 /home/\u003c用户目录\u003e/ 或者 /root/）。- ~/configs:/etc/configs/:ro// 已经存在的命名的数据卷。- datavolume:/var/lib/mysql 如果不使用宿主机的路径，可以指定一个volume_driver。 volume_driver: mydriver ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:12","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"13、volumes_from 从另一个服务或容器挂载其数据卷： volumes_from:- service_name - container_name ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:13","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"14、dns 自定义DNS服务器。可以是一个值，也可以是一个列表。 dns：8.8.8.8dns：- 8.8.8.8- 9.9.9.9 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:14","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"15、dns_search 配置DNS搜索域。可以是一个值，也可以是一个列表。 dns_search：example.comdns_search：- domain1.example.com- domain2.example.com ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:15","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"16、entrypoint 在Dockerfile中有一个指令叫做ENTRYPOINT指令，用于指定接入点。 在docker-compose.yml中可以定义接入点，覆盖Dockerfile中的定义： entrypoint: /code/entrypoint.sh ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:16","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"17、env_file 在docker-compose.yml中可以定义一个专门存放变量的文件。 如果通过docker-compose -f FILE指定配置文件，则env_file中路径会使用配置文件路径。 如果有变量名称与environment指令冲突，则以后者为准。格式如下： env_file: .env 或者根据docker-compose.yml设置多个： env_file:- ./common.env- ./apps/web.env- /opt/secrets.env 如果在配置文件中有build操作，变量并不会进入构建过程中。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:17","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"18、cap_add 增加指定容器的内核能力（capacity）。 让容器具有所有能力可以指定： cap_add:- ALL ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:18","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"19、cap_drop 去掉指定容器的内核能力（capacity）。 去掉NET_ADMIN能力可以指定： cap_drop:- NET_ADMIN ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:19","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"20、cgroup_parent 创建了一个cgroup组名称为cgroups_1: cgroup_parent: cgroups_1 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:20","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"21、devices 指定设备映射关系，例如： devices:- \"/dev/ttyUSB1:/dev/ttyUSB0\" ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:21","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"22、expose 暴露端口，但不映射到宿主机，只允许能被连接的服务访问。仅可以指定内部端口为参数，如下所示： expose:- \"3000\"- \"8000\" ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:22","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"23、extends 基于其它模板文件进行扩展。例如，对于webapp服务定义了一个基础模板文件为common.yml： # common.ymlwebapp:build:./webappenvironment:- DEBUG=false- SEND_EMAILS=false 再编写一个新的development.yml文件，使用common.yml中的webapp服务进行扩展： # development.ymlweb:extends:file:common.ymlservice:webappports:- \"8000:8000\"links:- dbenvironment:- DEBUG=truedb:image:mysql 后者会自动继承common.yml中的webapp服务及环境变量定义。 extends限制如下： A、要避免出现循环依赖 B、extends不会继承links和volumes_from中定义的容器和数据卷资源 推荐在基础模板中只定义一些可以共享的镜像和环境变量，在扩展模板中具体指定应用变量、链接、数据卷等信息 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:23","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"24、external_links 链接到docker-compose.yml外部的容器，可以是非Compose管理的外部容器。 external_links:- redis_1- project_db_1:mysql- project_db_1:postgresql ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:24","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"25、labels 为容器添加Docker元数据（metadata）信息。例如，可以为容器添加辅助说明信息： labels：com.startupteam.description:\"webapp for a strtup team\" ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:25","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"26、links 链接到其它服务中的容器。使用服务名称（同时作为别名），或者“服务名称:服务别名”（如 SERVICE:ALIAS），例如： links:- db- db:database- redis 使用别名将会自动在服务容器中的/etc/hosts里创建。例如： 172.17.2.186 db 172.17.2.186 database 172.17.2.187 redis ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:26","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"27、log_driver 指定日志驱动类型。目前支持三种日志驱动类型： log_driver:\"json-file\"log_driver:\"syslog\"log_driver:\"none\" ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:27","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"28、log_opt 日志驱动的相关参数。例如： log_driver:\"syslog\"log_opt:syslog-address:\"tcp://192.168.0.42:123\" ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:28","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"29、net 设置网络模式。 net:\"bridge\"net:\"none\"net:\"host\" ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:29","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"30、security_opt 指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如，配置标签的用户名和角色名： security_opt:- label:user:USER- label:role:ROLE ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:30","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"31、环境变量 环境变量可以用来配置Docker-Compose的行为。 COMPOSE_PROJECT_NAME 设置通过Compose启动的每一个容器前添加的项目名称，默认是当前工作目录的名字。 COMPOSE_FILE 设置docker-compose.yml模板文件的路径。默认路径是当前工作目录。 DOCKER_HOST 设置Docker daemon的地址。默认使用unix:///var/run/docker.sock。 DOCKER_TLS_VERIFY 如果设置不为空，则与Docker daemon交互通过TLS进行。 DOCKER_CERT_PATH 配置TLS通信所需要的验证(ca.pem、cert.pem 和 key.pem)文件的路径，默认是 ~/.docker 。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:31","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"四、Docker-Compose模板文件示例 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:4:0","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"1、docker-compose模板文件编写 docker-compose.yaml文件如下： version:'2'services:web1:image:nginxports:- \"6061:80\"container_name:\"web1\"networks:- devweb2:image:nginxports:- \"6062:80\"container_name:\"web2\"networks:- dev- proweb3:image:nginxports:- \"6063:80\"container_name:\"web3\"networks:- pronetworks:dev:driver:bridgepro:driver:bridge#volumes: docker-compose.yaml文件指定了三个web服务。 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:4:1","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"2、启动应用 创建一个webapp目录，将docker-compose.yaml文件拷贝到webapp目录下，使用docker-compose启动应用。 docker-compose up -d ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:4:2","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["docker"],"content":"3、服务访问 通过浏览器访问web1，web2，web3服务: http://127.0.0.1:6061 http://127.0.0.1:6062 http://127.0.0.1:6063 ","date":"2022-04-15","objectID":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:4:3","tags":["docker-compose"],"title":"Docker Compose的一些常用命令","uri":"/docker-compose%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["运维"],"content":"时间同步的问题和解决方法 ","date":"2022-04-07","objectID":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:0:0","tags":["ntpate"],"title":"时间同步的问题和解决方法","uri":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["运维"],"content":"一、虚拟服务器时间同步设置 使用条件： 主机已经与授时服务器进行时间同步 配置VMware虚拟服务器的“同步客户机与主机时间”选项，实现虚拟服务器与主机的时间同步。 方法如下： 启动VMware vClient 客户端 选择虚拟主机，打开编辑设置–\u003e选项—-\u003evmware tools —-\u003e同步客户机时间与主机时间 ","date":"2022-04-07","objectID":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:1:0","tags":["ntpate"],"title":"时间同步的问题和解决方法","uri":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["运维"],"content":"二、物理服务器时间同步设置 ","date":"2022-04-07","objectID":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:2:0","tags":["ntpate"],"title":"时间同步的问题和解决方法","uri":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["运维"],"content":"2.1 ntpdate工具的使用 使用条件： 服务器可访直接问互联网并且支持UDP协议 在线安装 yum install ntpdate -y 离线安装 rpm -ivh ntpdate-4.2.6p5-28.el7.centos.x86_64.rpm 注意： 本文以centos 7.6的安装为基准，在其它版本中安装可能会出现兼容问题，导致不能成功安装。可到http://vault.centos.org/站点选择下载对应版本的安装包。 手动测试 /usr/sbin/ntpdate ntp.ntsc.ac.cn #后边的域名或IP为授时服务器，ntp.ntsc.ac.cn为国家授时中心域名 /sbin/hwclock –w #写入物理时钟 自动运行，在crontab的最后一行，添加脚本如下： [root@localhost ~]#crontab –e #每30分钟执行一次，如果是局域网内，请注意修改ntp.ntsc.ac.cn为对应的内网ntpd服务器IP地址。 */30 * * * * /usr/sbin/ntpdate ntp.ntsc.ac.cn ;/sbin/hwclock -w \u003e /dev/null #2\u003e\u00261 验证crond执行时间同步的情况 cat /var/log/cron|grep ntpdate ","date":"2022-04-07","objectID":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:2:1","tags":["ntpate"],"title":"时间同步的问题和解决方法","uri":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["运维"],"content":"2.2 rdate工具的使用 使用条件： 服务器在内网区，可访问互联网（可通过接入网关），但只支持TCP协议通信 在线安装 yum install rdate -y 注意： rdate命令同时支持TCP和UDP通信协议，使用的time协议，但支持time协议的授时服务器不多。 离线安装 rpm -ivh rdate-1.4-25.el7.x86_64.rpm 注意： 本文以centos 7.6的安装为基准，在其它版本中安装可能会出现兼容问题，导致不能成功安装。可到http://vault.centos.org/站点选择下载对应版本的安装包。 自动运行 [root@localhost ~]#crontab –e # 每30分钟执行一次 */30 * * * * /usr/bin/rdate -s time.nist.gov ;/sbin/hwclock -w \u003e /dev/null #2\u003e\u00261 ","date":"2022-04-07","objectID":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:2:2","tags":["ntpate"],"title":"时间同步的问题和解决方法","uri":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["运维"],"content":"三、服务器处于隔离网络时方法 情况1： 服务器处于隔离网络，但内网有授时服务器，此时可参照第二节的方法 情况2： 服务器处于离网络时，无内网授时服务器，这种情况下，我们选择自建ntpd或chrony服务器 ","date":"2022-04-07","objectID":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:3:0","tags":["ntpate"],"title":"时间同步的问题和解决方法","uri":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["运维"],"content":"3.1 ntpd服务端 3.1.1 ntp安装 在线安装 yum install ntp ntpdate -y 离线安装 rpm -ivh autogen-libopts-5.18-5.el7.x86_64.rpm ntp-4.2.6p5-28.el7.centos.x86_64.rpm ntpdate-4.2.6p5-28.el7.centos.x86_64.rpm 注意： 本文以centos 7.6的安装为基准，在其它版本中安装可能会出现兼容问题，导致不能成功安装。可到http://vault.centos.org/站点选择下载对应版本的安装包。 3.1.2 ntpd服务器配置 修改配置/etc/ntp.conf文件，（此配置文件请按照实际的来修改，主要修改restrict的配置） driftfile /var/lib/ntp/drift restrict default kod nomodify notrap nopeer noquery restrict 127.0.0.1 restrict ::1 restrict 192.168.0.0 mask 255.255.0.0 nomodify notrap #对192.168.0.0/16网段授权访问 restrict 10.0.0.0 mask 255.0.0.0 nomodify notrap #对10.0.0.0/8网段授权访问 restrict 172.16.1.100 mask 255.255.255.255 nomodify notrap #只对IP为172.16.1.10授权访问 fudge 127.0.0.1 stratum 10 #设置本地时间级别是10，如果上级时间服务器均失效，对外发布本地时间。 server 127.0.0.1 # 如果公网NTP不可用时，将使用Local时间作为NTP服务提供给NTP Client。 server ntp.ntsc.ac.cn iburst prefer #国家授时中心 server 0.centos.pool.ntp.org iburst server 1.centos.pool.ntp.org iburst server 2.centos.pool.ntp.org iburst server 3.centos.pool.ntp.org iburst includefile /etc/ntp/crypto/pw cdisable monitor restrict参数 kod 使用kod技术防范“kiss of death”攻击 ignore 拒绝任何NTP连接 nomodify 用户端不能使用ntpc,ntpq修改时间服务器参数，可以进行网络校时 noquery 用户端不能使用ntpc,ntpq查询时间服务器参数，可以进行网络校时 notrap 不提供远程日志功能 notrust 拒绝没有认证的客户端 restrict ip 或者 restrict IP地址 + mask + 子网掩码 + 参数 例如:restrict default nomodify notrap nopeer noquery #默认拒绝所有访问 只可以同步时间 restrict 211.71.14.254 mask 255.255.255.0 #添加允许211.71.14.254/24网段访问 restrict 10.111.1.1 mask 255.0.0.0 nomodify #添加10.0.0.0/8网段访问 server 参数 server 用于设定ntp同步时间的外网时间服务器 prefer 默认上级时间服务器 burst 当一个运程NTP服务器可用时，向它发送一系列的并发包进行检测。 iburst 当一个运程NTP服务器不可用时，向它发送一系列的并发包进行检测 3.1.3 ntpd启动和验证 systemctl enable ntpd systemctl start ntpd 验证ntpd运行情况 [root@localhost packages]# netstat -nap|grep ntpd udp 0 0 192.168.56.101:123 0.0.0.0:* 16037/ntpd udp 0 0 127.0.0.1:123 0.0.0.0:* 16037/ntpd udp 0 0 0.0.0.0:123 0.0.0.0:* 16037/ntpd udp6 0 0 fe80::1c7b:80ff:fe2:123 :::* 16037/ntpd udp6 0 0 ::1:123 :::* 16037/ntpd udp6 0 0 fe80::a00:27ff:fe46:123 :::* 16037/ntpd udp6 0 0 :::123 :::* 16037/ntpd 3.1.4 ntpdate客户端安装 请参考第二节的ntpdate工具的使用 ————————————-分割线——————————————- ","date":"2022-04-07","objectID":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:3:1","tags":["ntpate"],"title":"时间同步的问题和解决方法","uri":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["运维"],"content":"3.2 chrony服务端 3.2.1 chrony安装 在线安装(chrony需要在所有服务端和客户端中执行安装) yum install chrony -y 离线安装 rpm -ivh chrony-3.2-2.el7.x86_64.rpm 注意： 本文以centos 7.6的安装为基准，在其它版本中安装可能会出现兼容问题，导致不能成功安装。可到http://vault.centos.org/站点选择下载对应版本的安装包。 3.2.2 chrony服务器配置 修改配置/etc/chrony.conf文件 （带注释的为重要配置） server ntp.ntsc.ac.cn iburst #国家授时中心 server 0.centos.pool.ntp.org iburst server 1.centos.pool.ntp.org iburst server 2.centos.pool.ntp.org iburst server 3.centos.pool.ntp.org iburst driftfile /var/lib/chrony/drift makestep 1.0 3 rtcsync allow 192.168.0.0/16 #允许被访问的IP段，请根据实际情况修改 allow 192.168.56.101/24 #允许被访问的IP local stratum 10 #设置本地时间级别是10，如果上级时间服务器均失效，对外发布本地时间。 logdir /var/log/chrony 3.2.3 chrony客户端配置 修改配置文件/etc/chrony.conf（有注释行为重要配置） server 192.168.56.101 iburst #根据实际情况，指向本地授时服务器的IP地址 driftfile /var/lib/chrony/drift makestep 1.0 3 rtcsync logdir /var/log/chrony 3.2.4 启动服务 systemctl enable chronyd.service #开机自启动 systemctl start chronyd.service #启动chrony systemctl status chronyd.service #查看chrony服务状态 3.2.5 验证时间同步状态 MS列中包含^*的行，指明NTP服务当前同步的服务器。当前同步的源为114.118.7.163： [root@localhost ~]# chronyc sources 210 Number of sources = 2 MS Name/IP address Stratum Poll Reach LastRx Last sample =============================================================================== ^- stratum2-1.ntp.sea03.us.\u003e 2 6 377 6 +40ms[ +40ms] +/- 160ms ^* 114.118.7.163 2 6 77 16 -908us[-1190us] +/- 51ms 查看当前时间是否准确，其中NTP synchronized: yes说明同步成功 [root@localhost ~]# timedatectl Local time: 四 2019-05-30 13:25:29 CST Universal time: 四 2019-05-30 05:25:29 UTC RTC time: 三 2019-05-29 11:57:46 Time zone: Asia/Shanghai (CST, +0800) NTP enabled: yes NTP synchronized: yes RTC in local TZ: no DST active: n/a ","date":"2022-04-07","objectID":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:3:2","tags":["ntpate"],"title":"时间同步的问题和解决方法","uri":"/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["运维"],"content":"因为公司放在测试服务器上的服务比较多，磁盘经常性会满。以前满过几次，因为时间比较赶，每次只是草率的删掉一点log或者临时文件，到今天早上又发生一起事故，依然是磁盘空间满，看了一下好像没什么东西可以删了，才静下心来慢慢研究解决。 系统：Ubuntu14.04 x64 磁盘名称：/data 磁盘空间：200G 错误描述： 今早发现磁盘空间满，服务数据写不进数据库中，使用du -h --max-depth=1命令查看大文件， 发现文件只占100G，然而使用df -h 命令查看时，磁盘用了200G占用了百分之一百。其中100G的空间莫名其妙就没有了 解决方法： 用lsof检查后才发现原因是，有文件被删除，而进程还活着，因而造成还占用空间的现象。可以通过命令 lsof |grep deleted 来进行查看 把这些进程删掉就可以了，批量杀死进程命令 lsof |grep delete | grep -v grep | awk ‘{print $2}’ | xargs kill -9 期间可能会等一段时间，等杀完后，重新 df -h 查看，磁盘空间多出来了87G ","date":"2022-03-16","objectID":"/linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%8F%90%E7%A4%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%BB%A1%E4%BD%86%E5%AE%9E%E9%99%85%E5%8D%A0%E7%94%A8%E5%8D%B4%E5%BE%88%E5%B0%8F/:0:0","tags":["liunx"],"title":"Linux系统下提示磁盘空间满,但实际占用却很小","uri":"/linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%8F%90%E7%A4%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%BB%A1%E4%BD%86%E5%AE%9E%E9%99%85%E5%8D%A0%E7%94%A8%E5%8D%B4%E5%BE%88%E5%B0%8F/"},{"categories":["运维"],"content":"1、prometheus 主服务的下载与部署 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:1:0","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"1.1创建安装目录和下载部署包并解压 下载x86安装包 mkdir -p /data/monitor/prometheus #下载prometheus包，pakage文件夹中有下载好的包 #wget https://github.com/prometheus/prometheus/releases/download/v2.27.1/prometheus-2.27.1.linux-amd64.tar.gz #解压prometheus包，并且解压后/data/monitor/prometheus里去除prometheus-2.27.1.linux-amd64文件目录 tar -zxvf prometheus-2.27.1.linux-amd64.tar.gz -C /data/monitor/prometheus --strip-components 1 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:1:1","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"1.2配置Prometheus启动文件 cat \u003e /etc/systemd/system/prometheus.service \u003c\u003c EOF [Unit] Description=prometheus Service After=network.target After=network-online.target Wants=network-online.target [Service] Type=simple WorkingDirectory=/data/monitor/prometheus ExecStart=/data/monitor/prometheus/prometheus --config.file=prometheus.yml --web.enable-lifecycle --web.external-url=/prometheus ExecStop=/usr/bin/curl -X POST http://localhost:9090/prometheus/-/quit Restart=on-failure RestartSec=5 LimitNOFILE=65536 [Install] WantedBy=multi-user.target EOF 注：可以把启动文件直接放到/etc/systemd/system/目录下 下载prometheus启动文件 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:1:2","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"1.3 设置Prometheus开机自启动 systemctl daemon-reload systemctl enable prometheus systemctl start prometheus ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:1:3","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"1.4 测试，验证Prometheus是否启动成功：访问 IP:9090/prometheus/ ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:1:4","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"2、部署 exporter采集节点信息 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:2:0","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"2.1创建安装目录和下载部署包并解压 下载x86安装包 使用 uname -a查询架构，下载arm安装包 (其他版本下载地址：https://github.com/prometheus/node_exporter/releases) mkdir -p /data/monitor/node_exporter #wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz tar -zxvf node_exporter-1.1.2.linux-amd64.tar.gz -C /data/monitor/node_exporter --strip-components 1 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:2:1","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"2.2配置node_exporter 服务 cat \u003e /etc/systemd/system/node_exporter.service \u003c\u003cEOF [Unit] Description=node-exporter Service After=network.target After=network-online.target Wants=network-online.target [Service] Type=simple WorkingDirectory=/data/monitor/node_exporter ExecStart=/data/monitor/node_exporter/node_exporter --web.listen-address=0.0.0.0:9100 Restart=on-failure RestartSec=5 LimitNOFILE=65536 [Install] WantedBy=multi-user.target EOF 注：可以把启动文件直接放到/etc/systemd/system/目录下 下载node-exporter启动文件 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:2:2","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"2.3 设置node_exporter开机自启动 systemctl daemon-reload systemctl enable node-exporter systemctl start node-exporter ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:2:3","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"2.4 测试，验证node_exporter是否启动成功：访问 IP:9100 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:2:4","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"2.5 把 node_exporter 这个采集程序接⼊配置到prometheus.yml # my global configglobal:scrape_interval:15s# Set the scrape interval to every 15 seconds. Default is every 1 minute.evaluation_interval:15s# Evaluate rules every 15 seconds. The default is every 1 minute.# scrape_timeout is set to the global default (10s).# Alertmanager configurationalerting:alertmanagers:- static_configs:- targets:# - alertmanager:9093# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.rule_files:# - \"first_rules.yml\"# - \"second_rules.yml\"# A scrape configuration containing exactly one endpoint to scrape:# Here it's Prometheus itself.scrape_configs:# The job name is added as a label `job=\u003cjob_name\u003e` to any timeseries scraped from this config.- job_name:'prometheus'# metrics_path defaults to '/metrics'# scheme defaults to 'http'.static_configs:- targets:['localhost:9090']- job_name:'node-exporter'scrape_interval:5sstatic_configs:- targets:['localhost:9100','10.9.0.1:9100']labels:group:'web'annotation:'节点信息采集' 导⼊node_exporter 后，重新载⼊配置 : curl -X POST http://localhost:9090/prometheus/-/reload ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:2:5","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"3、安装grafana展示 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:3:0","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"3.1 创建安装目录与下载部署包 下载x86安装包 mkdir -p /data/monitor/grafana #wget https://dl.grafana.com/oss/release/grafana-7.5.7.linux-amd64.tar.gz tar -zxvf grafana-7.5.7.linux-amd64.tar.gz -C /data/monitor/grafana --strip-components 1 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:3:1","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"3.2 配置grafana 服务 下载grafana启动文件 cat \u003e /etc/systemd/system/grafana.service \u003c\u003cEOF [Unit] Description=grafana Service After=network.target After=network-online.target Wants=network-online.target [Service] Type=simple WorkingDirectory=/data/monitor/grafana ExecStart=/data/monitor/grafana/bin/grafana-server web Restart=on-failure RestartSec=5 LimitNOFILE=65536 [Install] WantedBy=multi-user.target EOF ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:3:2","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"3.3 设置grafana 开机自启动 systemctl daemon-reload systemctl enable grafanasy stemctl start grafana ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:3:3","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"3.4 测试，访问：ip:3000（默认登录账户和密码都是admin，进⼊后界面如下） ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:3:4","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"4、监控配置 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:4:0","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"4.1 查看Prometheus管理后台是否有采集到服务器的信息 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:4:1","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"4.2 配置grafana管理后台 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:4:2","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"4.3 导⼊监控模板，保存。基础监控大盘官网下载地址 注释：与官网下载的基础监控大盘一样，选择一个下载就行 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:4:3","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"4.4查看服务器的基础监控 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:4:4","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"5、监控里约网关接⼝调用情况 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:5:0","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"1.添加 ES 数据源 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:5:1","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"2.导⼊ json 模板（Rio-SG-Access日志大盘-1617280890686.json）下载日志大盘 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:5:2","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"6、部署部 mysqld_exporter采集节点信息 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:6:0","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"6.1在数据库服务器上执行以下操作在 6.1.1官网下载包 注释：与官网下载的安装包一样，选一个下载就行 mkdir -p /data/monitor/mysqld_exporter tar -zxvf mysqld_exporter-0.13.0.linux-amd64.tar.gz -C /data/monitor/mysqld_exporter/ --strip-components 1 6.1.2配置.my.cnf .my.cnf默认放置在启动用户的家目录，启动时无需指定；也可以随意放置在任意目录，在启动时通过 --config.my-cnf={conf_dir}/.my.cnf指定配置文件。 #正常这里没有.my.cnf文件，需要创建.my.cnf文件 vim /data/monitor/mysqld_exporter/.my.cnf [client] host=localhost user=root port=3306 password=root # 数据库密码 6.1.3启动 cd /data/monitor/mysqld_exporter/ #创建start.sh脚本 vim start.sh start.sh脚本内容如下： #!/bin/bash nohup ./mysqld_exporter --config.my-cnf=/data/monitor/mysqld_exporter/.my.cnf \u0026 chmod 744 start.sh 注册服务 #创建启动文件 vim /etc/systemd/system/mysqld_exporter.service [Unit] Description=mysqld_exporter service After=network.target [Service] Type=forking WorkingDirectory=/data/monitor/mysqld_exporter ExecStart=/data/monitor/mysqld_exporter/start.sh [Install] WantedBy=multi-user.target #设置开机自启 systemctl daemon-reload systemctl enable mysqld_exporter stemctl start mysqld_exporter 6.1.4 启动后的访问端⼝是 启 9104：访问访 http://数据库服务器 数 ip:9104/metrics ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:6:1","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"6.2 把 mysql_exporter 这个采集程序接⼊配置到 这 prometheus.yml 参照下图参考文件 导⼊node_exporter 后，重新载⼊配置 : curl -X POST http://localhost:9090/prometheus/-/reload ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:6:2","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"6.3配置配 grafana管理后台(这一步可以省略) 6.3.1 上传上 mysql监控模板 下载更多面板链接 注：下载文mysql大盘 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:6:3","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"7、 设置邮件告警 1、 修改修 grafana 告警配置文件 告 SMTP 邮箱配置修改邮箱相关的配置，例如下面。重启 grafan 系统。 vim /data/monitor/grafana/conf/defaults.ini ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:7:0","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"2、配置通知邮箱 配 在 grafana 关键字： Template variables are not supported in alert queries 分析： 分 由于Prometheus 告警不支持变量，而模板面板使用了⼤量变量，导致不可使用告警。 解决办法：单独配置个告警的视图，用正则匹配出所有的主机 或者每台主机单独⼀个查询 语句 (1 - (node_memory_MemAvailable_bytes{instance=\"101.133.173.223:9100\"} / (node_memory_MemTotal_bytes{instance=\"101.133.173.223:9100\"})))*100 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:7:1","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"8、设置其他告警，演示设置企业微信群告警 注： PrometheusAlert全家桶是开源的运维告警中心消息转发系统,支持主流的监控系统Prometheus,Zabbix,日志系统Graylog和数据可视化系统Grafana发出的预警消息,支持钉钉,微信,华为云短信,腾讯云短信,腾讯云电话,阿里云短信,阿里云电话等 gitee项目地址 下载包 #如果下载不下来，package文件夹中有liunx.zip包 wget https://github.com/feiyu563/PrometheusAlert/releases/download/v4.4.0/linux.zip mkdir -p /data/monitor/linux_PrometheusAlert #确保解压后文件在/data/monitor/linux_PrometheusAlert夹中 mv linux.zip /data/monitor/linux_PrometheusAlert/ \u0026\u0026 cd /data/monitor/linux_PrometheusAlert/ \u0026\u0026 unzip linux.zip \u0026\u0026 cd linux/ \u0026\u0026 mv * ../ \u0026\u0026 cd ../ \u0026\u0026 rm -rf linux/ #运行PrometheusAlert # ./PrometheusAlert (#后台运行请执行 nohup ./PrometheusAlert \u0026) ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:8:0","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"8.1启动 chmod 777 PrometheusAlert cd /data/monitor/linux_PrometheusAlert #创建start.sh脚本 vim start.sh start.sh脚本内容如下： #!/bin/bash nohup /data/monitor/linux_PrometheusAlert/PrometheusAlert \u0026 chmod 744 start.sh 注册服务 #创建启动文件 vim /etc/systemd/system/PrometheusAlert.service [Unit] Description=mysqld_exporter service After=network.target [Service] Type=forking WorkingDirectory=/data/monitor/linux_PrometheusAlert/ ExecStart=/data/monitor/linux_PrometheusAlert/start.sh [Install] WantedBy=multi-user.target #设置开机自启 systemctl daemon-reload systemctl enable PrometheusAlert systemctl start PrometheusAlert #启动后可使用浏览器打开以下地址查看：http://127.0.0.1:8080 #默认登录帐号和密码在conf/app.conf中有配置 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:8:1","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"8.2 企业微信告警配置 打开企业微信,进入企业微信群中,选择群设置–\u003e群机器人–\u003e添加，可参下图： 复制图中的Webhook地址，并填入PrometheusAlert配置文件app.conf中对应配置项即可。 企业微信机器人目前支持的markdown语法是如下的子集： 标题 （支持1至6级标题，注意#与文字中间要有空格） # 标题一 ## 标题二 ### 标题三 #### 标题四 ##### 标题五 ###### 标题六 加粗 **bold** 链接 [这是一个链接](http://work.weixin.qq.com/api/doc) 行内代码段（暂不支持跨行） `code` 引用 \u003e 引用文字 字体颜色(只支持3种内置颜色) \u003cfont color=\"info\"\u003e绿色\u003c/font\u003e \u003cfont color=\"comment\"\u003e灰色\u003c/font\u003e \u003cfont color=\"warning\"\u003e橙红色\u003c/font\u003e 测试发送机器人 grafana（内置固定消息模版）接入配置 首先使用管理员或者具有告警配置权限的帐号登录进Grafana管理页面，登录后进入notification channels配置。 注意这里的url地址填写上自己部署所在的url /grafana/dingding 处理Grafana告警消息转发到钉钉接口，可选参数(ddurl) /grafana/weixin 处理Grafana告警消息转发到微信接口，可选参数(wxurl) /grafana/feishu 处理Grafana告警消息转发到飞书接口，可选参数(fsurl) /grafana/txdx 处理Grafana告警消息转发到腾讯云短信接口，可选参数(phone) /grafana/txdh 处理Grafana告警消息转发到腾讯云电话接口，可选参数(phone) /grafana/hwdx 处理Grafana告警消息转发到华为云短信接口，可选参数(phone) /grafana/bddx 处理Grafana告警消息转发到百度云短信接口，可选参数(phone) /grafana/alydx 处理Grafana告警消息转发到阿里云短信接口，可选参数(phone) /grafana/rlydh 处理Grafana告警消息转发到容联云电话接口，可选参数(phone) /grafana/email 处理Grafana告警消息转发到email接口，可选参数(email) /grafana/tg 处理Grafana告警消息转发到telegram接口 /grafana/workwechat处理Grafana告警消息转发到企业微信应用接口 效果 ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:8:2","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"9.参考文档 #Prometheus Alert https://gitee.com/feiyu563/PrometheusAlert#/feiyu563/PrometheusAlert/blob/master/doc/readme/grafana.md #grafana创建告警 https://grafana.com/docs/grafana/latest/alerting/old-alerting/create-alerts/ 注释：大盘json文件 下载 Prometheus常用查询函数 产考连接:https://www.cnblogs.com/xjzyy/p/15346954.html ","date":"2021-10-20","objectID":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/:9:0","tags":["监控"],"title":"普罗米修斯Prometheus","uri":"/prometheus-%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2-last/"},{"categories":["运维"],"content":"机器装了一块新硬盘, 先使用sudo fdisk -l看看新添加的硬盘叫什么, 我的叫sdb接下来按照这篇文章操作即可, 该文章新挂载的硬盘叫sdb1, 注意替换成自己的硬盘名 注释：先使用sudo fdisk -l看看新添加的硬盘叫什么,我的叫sdb1 lsblk -f #列出块设备列表，-f用于输出文件系统的详细信息 0.格式化分区 mkfs.ext4 /dev/sdb1 1.创建目录 mkdir /media/home 2.把/dev/sdb1挂载到/media/home mount /dev/sdb1 /media/home 3.执行几次sync命令,确保文件系统数据都落盘 sync #执行三次或更多次sync命令 #在Linux系统中，为了加快数据的读取速度，所以在默认的情况中， 某些已经加载内存中的数据将不会直接被写回硬盘，而是先缓存在内存当中，如此一来， 如果一个数据被你重复的改写，那么由于他尚未被写入硬盘中，因此可以直接由内存当中读取出来， 在速度上一定是快上相当多的！ #不过，如此一来也造成些许的困扰，那就是万一你的系统因为某些特殊情况造成不正常关机 (例如停电或者是不小心踢到power)时，由于数据尚未被写入硬盘当中，哇！所以就会造成数据的升级不正常啦！ 那要怎么办呢？这个时候就需要sync这个命令来进行数据的写入动作啦！ 直接在文字接口下输入sync，那么在内存中尚未被升级的数据，就会被写入硬盘中！所以，这个命令在系统关机或重新启动之前， 很重要喔！最好多运行几次(2-4次)！ 4.同步/home到/media/home rsync -aXS /home/. /media/home/. #或者加上-v详细模式输出 rsync -avXS /home/. /media/home/. # Options -v, --verbose # 详细模式输出。(打印一些信息，比如文件列表、文件数量等) -q, --quiet # 精简输出模式。 -c, --checksum # 打开校验开关，强制对文件传输进行校验。 -a, --archive # 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。 -r, --recursive # 对子目录以递归模式处理。 -R, --relative # 使用相对路径信息。 -b, --backup # 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。 --backup-dir # 将备份文件(如~filename)存放在在目录下。 -suffix=SUFFIX # 定义备份文件前缀。 -u, --update # 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。 -l, --links # 保留软链结。 -L, --copy-links # 想对待常规文件一样处理软链结。 --copy-unsafe-links # 仅仅拷贝指向SRC路径目录树以外的链结。 --safe-links # 忽略指向SRC路径目录树以外的链结。 -H, --hard-links # 保留硬链结。 -p, --perms # 保持文件权限。 -o, --owner # 保持文件属主信息。 -g, --group # 保持文件属组信息。 -D, --devices # 保持设备文件信息。 -t, --times # 保持文件时间信息。 -S, --sparse # 对稀疏文件进行特殊处理以节省DST的空间。 -n, --dry-run # 现实哪些文件将被传输。 -w, --whole-file # 拷贝文件，不进行增量检测。 -x, --one-file-system # 不要跨越文件系统边界。 -X, --xattrs # 保留扩展属性 -B, --block-size=SIZE # 检验算法使用的块尺寸，默认是700字节。 -e, --rsh=command # 指定使用rsh、ssh方式进行数据同步。 --rsync-path=PATH # 指定远程服务器上的rsync命令所在路径信息。 -C, --cvs-exclude # 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件。 --existing # 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件。 --delete # 删除那些DST中SRC没有的文件。 --delete-excluded # 同样删除接收端那些被该选项指定排除的文件。 --delete-after # 传输结束以后再删除。 --ignore-errors # 及时出现IO错误也进行删除。 --max-delete=NUM # 最多删除NUM个文件。 --partial # 保留那些因故没有完全传输的文件，以是加快随后的再次传输。 --force # 强制删除目录，即使不为空。 --numeric-ids # 不将数字的用户和组id匹配为用户名和组名。 --timeout=time # ip超时时间，单位为秒。 -I, --ignore-times # 不跳过那些有同样的时间和长度的文件。 --size-only # 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。 --modify-window=NUM # 决定文件是否时间相同时使用的时间戳窗口，默认为0。 -T --temp-dir=DIR # 在DIR中创建临时文件。 --compare-dest=DIR # 同样比较DIR中的文件来决定是否需要备份。 -P # 等同于 --partial。 --progress # 显示备份过程。 -z, --compress # 对备份的文件在传输时进行压缩处理。 --exclude=PATTERN # 指定排除不需要传输的文件模式。 --include=PATTERN # 指定不排除而需要传输的文件模式。 --exclude-from=FILE # 排除FILE中指定模式的文件。 --include-from=FILE # 不排除FILE指定模式匹配的文件。 --version # 打印版本信息。 --address # 绑定到特定的地址。 --config=FILE # 指定其他的配置文件，不使用默认的rsyncd.conf文件。 --port=PORT # 指定其他的rsync服务端口。 --blocking-io # 对远程shell使用阻塞IO。 -stats # 给出某些文件的传输状态。 --progress # 在传输时现实传输过程。 --log-format=formAT # 指定日志文件格式。 --password-file=FILE # 从FILE中得到密码。 --bwlimit=KBPS # 限制I/O带宽，KBytes per second。 -h, --help # 显示帮助信息。 5.同步完成后重命名/home mv /home /home_old 6.新建/home mkdir /home 7.取消/dev/sdb1挂载 umount /dev/sdb1 8.重新挂载/dev/sdb1到home mount /dev/sdb1 /home 9.查看/dev/sdb1的UUID blkid 10.把UUID复制下来，修改/etc/fstab文件，实现开机自动挂载 vim /etc/fstab mount -a #将/etc/fstab的所有内容重新加载。 在文件最后添加如下内容： UUID=8da46012-ab9c-434f-a855-2484112fd1a7 /home ext4 nodev,nosuid 0 2 11.保存之后重启系统，查看分区的挂载情况 df –Th 12.确认一切正常后删除/home_old rm -rf /home_old 至此，给/home增加空间的工作就完成了。 ","date":"2021-09-18","objectID":"/linux%E6%89%A9%E5%AE%B9home%E7%9B%AE%E5%BD%95/:0:0","tags":["linux"],"title":"Linux扩容home目录","uri":"/linux%E6%89%A9%E5%AE%B9home%E7%9B%AE%E5%BD%95/"},{"categories":["运维"],"content":" wget https://github.com/raboof/nethogs/archive/v0.8.1.tar.gz yum install libpcap-devel tar zxvf v0.8.1.tar.gz cd nethogs-0.8.1/ make \u0026\u0026 make install nethogs eno1 以下是NetHogs的一些很有用的交互控制(键盘快捷键) -m: Change the units displayed forthe bandwidth inunits like KB/sec-\u003eKB-\u003eB-\u003eMB. -r: Sort by magnitude of respectively traffic. -s: Sort by magnitude of sent traffic. -q: Hit quit tothe shell prompt. ","date":"2021-08-27","objectID":"/nethogs%E5%91%BD%E4%BB%A4/:0:0","tags":["nethogs"],"title":"Nethogs命令","uri":"/nethogs%E5%91%BD%E4%BB%A4/"},{"categories":["运维"],"content":" crontab -l crontab -r crontab -e -e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe) -r : 删除目前的时程表 -l : 列出目前的时程表 ","date":"2021-08-08","objectID":"/crontab%E7%9A%84%E5%BA%94%E7%94%A8/:0:0","tags":["crontab"],"title":"Crontab的应用","uri":"/crontab%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":["运维"],"content":"列子 0 */2 * * * /sbin/service httpd restart 意思是每两个小时重启一次apache 50 7 * * * /sbin/service sshd start 意思是每天7：50开启ssh服务 50 22 * * * /sbin/service sshd stop 意思是每天22：50关闭ssh服务 0 0 1,15 * * fsck /home 每月1号和15号检查/home 磁盘 1 * * * * /home/bruce/backup 每小时的第一分执行 /home/bruce/backup这个文件 00 03 * * 1-5 find /home \"*.xxx\" -mtime +4 -exec rm {} \\; 每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。 30 6 */10 * * ls 意思是每月的1、11、21、31日是的6：30执行一次ls命令 ","date":"2021-08-08","objectID":"/crontab%E7%9A%84%E5%BA%94%E7%94%A8/:1:0","tags":["crontab"],"title":"Crontab的应用","uri":"/crontab%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":["运维"],"content":"例子2 vim /root/restart_v2ray.sh #!/bin/bash v2ray restart crontab -e #每5个小时重启一次 0 */5 * * * . /etc/profile;/bin/sh /root/restart_v2ray.sh \u003e /dev/null 2\u003e\u00261 #注意：当程序在你所指定的时间执行后，系统会发一封邮件给当前的用户，显示该程序执行的内容，若是你不希望收到这样的邮件，请在每一行空一格之后加上 \u003e /dev/null 2\u003e\u00261 即可 #注意一定要添加“ . /etc/profile; ，这句用于将环境变量include进当前脚本的执行环境！ ","date":"2021-08-08","objectID":"/crontab%E7%9A%84%E5%BA%94%E7%94%A8/:2:0","tags":["crontab"],"title":"Crontab的应用","uri":"/crontab%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":["运维"],"content":"例子3 */3 * * * * if [ $(netstat -tnpl |grep 8683 | wc -l) -ne 1 ];then systemctl start test.service;fi ","date":"2021-08-08","objectID":"/crontab%E7%9A%84%E5%BA%94%E7%94%A8/:3:0","tags":["crontab"],"title":"Crontab的应用","uri":"/crontab%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":["运维"],"content":"查看日志 tailf /var/log/cron ","date":"2021-08-08","objectID":"/crontab%E7%9A%84%E5%BA%94%E7%94%A8/:4:0","tags":["crontab"],"title":"Crontab的应用","uri":"/crontab%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":["docker"],"content":"升级背景 漏洞描述： Docker是一款开源的应用容器引擎。该产品支持在Linux系统上创建一个容器（轻量级虚拟机）并部署和运行应用程序，以及通过配置文件实现应用程序的自动化安装、部署和升级。 runc是一个可以用于创建和运行容器的CLI(command-line interface)工具。 Docker 18.09.2之前版本存在安全漏洞，运行容器时程序没有正确地处理文件描述符。攻击者可利用该漏洞通过以下情况覆盖主机runc二进制文件并以root权限执行任意命令：（1）使用攻击者控制的镜像创建新容器；（2）攻击者使用docker exec方式连接容器。 漏洞类型： 系统组件漏洞 威胁等级： 高危 修复方案： 请到官网升级Docker到18.09.2以上最新版本修复该漏洞，漏洞修复后需要服务重启。建议业务不繁忙时修复。 下载更新：https://docs.docker.com/install/ 检测到服务器存在漏洞风险，建议立即对相关主机进行快照备份，避免遭受损失。 ","date":"2021-08-05","objectID":"/docker%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/:0:1","tags":["docker"],"title":"Docker版本升级","uri":"/docker%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"},{"categories":["docker"],"content":"升级步骤 1、以下步骤为单个节点的升级，由于mongodb es redis等服务为集群，为保证数据及服务高可用，建议逐个节点升级，切勿同时升级。 2、如果某个容器启动失败且无法重启时，可以通过重建容器恢复，init.sh脚本路径如下： [root@localhost data]# find /data/ -name init.sh /data/mongo/init.sh /data/redis_sentinel/init.sh /data/redis_master/init.sh /data/elasticsearch/init.sh # 下载新版本并解压 解压会在当前目录生成一个docker的文件夹 cd /root wget https://download.docker.com/linux/static/stable/x86_64/docker-18.09.9.tgz tar zxvf docker-18.09.9.tgz # 停止docker服务 systemctl stop docker # 备份原二进制文件 mkdir /root/docker-bak-$(date +%F) \u0026\u0026 mv /usr/bin/docker* /root/docker-bak-$(date +%F) # 替换新二进制文件 cp -a docker/* /usr/bin/ # 启动docker服务 systemctl start docker # 检查docker版本 docker version # 容器状态 dokcer ps docker ps -a ","date":"2021-08-05","objectID":"/docker%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/:0:2","tags":["docker"],"title":"Docker版本升级","uri":"/docker%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"},{"categories":["docker"],"content":"验证 1、2步骤在单个节点升级完成时验证，步骤3在所有节点升级完成后验证 # 1、检查所有里约容器组件端口可用 netstat -lntp |grep ${port} # 2、检查相关服务状态集群状态 # es集群装填为green、节点数正常,使用实际账号、端口、密码等信息 curl -u rio:ee06167b10a177f60766d35baa81955d localhost:9200/_cluster/health?pretty # mongodb rs状态,使用实际账号、端口、密码等信息 docker exec -it mongo mongo --username rio --password ee06167b10a177f60766d35baa81955d --authenticationDatabase admin 127.0.0.1:27017/admin rs.status() # redis 状态,使用实际账号、端口、密码等信息 docker exec -ti redis_master redis-cli -h 127.0.0.1 -p 6379 -a ee06167b10a177f60766d35baa81955d info # 3、控制台验证 登录、服务发布、站点发布等功能 ","date":"2021-08-05","objectID":"/docker%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/:0:3","tags":["docker"],"title":"Docker版本升级","uri":"/docker%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"},{"categories":["docker"],"content":"回退步骤 如升级后异常容器状态异常切无法重建容器进行回退，回退验证后同上。 cd /root/ # 停止docker服务 systemctl stop docker # 删除二进制文件 for i in $(ls ./docker/); do rm -f /usr/bin/$i; done # 还原原二进制文件 cp -a /root/docker-bak-$(date +%F)/docker* /usr/bin/ # 启动docker服务 systemctl start docker # 检查docker版本 docker version # 容器状态 dokcer ps docker ps -a ","date":"2021-08-05","objectID":"/docker%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/:0:4","tags":["docker"],"title":"Docker版本升级","uri":"/docker%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"},{"categories":["docker"],"content":" # 查看网络 docker network ls bridge、none、host这 3 个网络包含在 Docker 实现中。运行一个容器时，可以使用 the –net标志指定您希望在哪个网络上运行该容器。您仍然可以使用这 3 个网络。 bridge 网络表示所有 Docker 安装中都存在的 docker0 网络。除非使用 docker run –net=选项另行指定，否则 Docker 守护进程默认情况下会将容器连接到此网络。在主机上使用 ifconfig命令，可以看到此网桥是主机的网络堆栈的一部分。 none 网络在一个特定于容器的网络堆栈上添加了一个容器。该容器缺少网络接口。 host 网络在主机网络堆栈上添加一个容器。您可以发现，容器中的网络配置与主机相同。 # 查看网络信息 docker network inspect \u003c网络模式\u003e # 删除容器 docker rm -f \u003c容器名\u003e # 清理网络占用 docker network disconnect --force \u003c网络模式\u003e \u003c容器名\u003e ","date":"2021-07-14","objectID":"/docker%E5%AE%B9%E5%99%A8%E6%97%A0%E6%B3%95stop%E6%88%96kill%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:0:0","tags":["docker"],"title":"Docker容器无法stop或kill的解决方法","uri":"/docker%E5%AE%B9%E5%99%A8%E6%97%A0%E6%B3%95stop%E6%88%96kill%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["chrome"],"content":"chrome实现整个网页的完整截图 Chrome 浏览器 　外贸人大部分应该用的都是 Chrome 浏览器，如果你用的是 360，先检讨下！ 　首先打开一个想要截取的页面，记得一定要等页面加载完后，自己滚动一遍拉到底，等所有的内容全部展现出来后再进行下面的操作。 　按下 F12 ，然后同时按下组合键 Ctrl+Shift+P ，接着在跳出的框框里输入 Capture full size screenshot ，如下。 稍等一会就会跳出一个框让你保存 PNG 图片，这样就 OK 了。如果不完整，可能当时网络有问题，没有完全加载完成，需要多试几次。 　如果觉得上面方法麻烦，也可以安装一个“捕捉页面截图”FireShot 的扩展插件。 ","date":"2021-06-22","objectID":"/chrome%E6%88%AA%E5%9B%BE/:0:0","tags":["chrome"],"title":"Chrome截图","uri":"/chrome%E6%88%AA%E5%9B%BE/"},{"categories":["运维"],"content":"top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。 下面详细介绍它的使用方法。top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定. ","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:0:0","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"1．命令格式： top [参数] ","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:1:0","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"2．命令功能： 显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等 ","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:2:0","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"3．命令参数： -b 批处理 -c 显示完整的治命令 -I 忽略失效过程 -s 保密模式 -S 累积模式 -i\u003c时间\u003e 设置间隔时间 -u\u003c用户名\u003e 指定用户名 -p\u003c进程号\u003e 指定进程 -n\u003c次数\u003e 循环显示的次数 ","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:3:0","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"4．使用实例： ","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:4:0","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"实例1：显示进程信息 命令： top 输出： [root@TG1704 log]# top top - 14:06:23 up 70 days, 16:44, 2 users, load average: 1.25, 1.32, 1.35 Tasks: 206 total, 1 running, 205 sleeping, 0 stopped, 0 zombie Cpu(s): 5.9%us, 3.4%sy, 0.0%ni, 90.4%id, 0.0%wa, 0.0%hi, 0.2%si, 0.0%st Mem: 32949016k total, 14411180k used, 18537836k free, 169884k buffers Swap: 32764556k total, 0k used, 32764556k free, 3612636k cached PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 28894 root 22 0 1501m 405m 10m S 52.2 1.3 2534:16 java 18249 root 18 0 3201m 1.9g 11m S 35.9 6.0 569:39.41 java 2808 root 25 0 3333m 1.0g 11m S 24.3 3.1 526:51.85 java 25668 root 23 0 3180m 704m 11m S 14.0 2.2 360:44.53 java 574 root 25 0 3168m 611m 10m S 12.6 1.9 556:59.63 java 1599 root 20 0 3237m 1.9g 11m S 12.3 6.2 262:01.14 java 1008 root 21 0 3147m 842m 10m S 0.3 2.6 4:31.08 java 13823 root 23 0 3031m 2.1g 10m S 0.3 6.8 176:57.34 java 28218 root 15 0 12760 1168 808 R 0.3 0.0 0:01.43 top 29062 root 20 0 1241m 227m 10m S 0.3 0.7 2:07.32 java 1 root 15 0 10368 684 572 S 0.0 0.0 1:30.85 init 2 root RT -5 0 0 0 S 0.0 0.0 0:01.01 migration/0 3 root 34 19 0 0 0 S 0.0 0.0 0:00.00 ksoftirqd/0 4 root RT -5 0 0 0 S 0.0 0.0 0:00.00 watchdog/0 5 root RT -5 0 0 0 S 0.0 0.0 0:00.80 migration/1 6 root 34 19 0 0 0 S 0.0 0.0 0:00.00 ksoftirqd/1 7 root RT -5 0 0 0 S 0.0 0.0 0:00.00 watchdog/1 8 root RT -5 0 0 0 S 0.0 0.0 0:20.59 migration/2 9 root 34 19 0 0 0 S 0.0 0.0 0:00.09 ksoftirqd/2 10 root RT -5 0 0 0 S 0.0 0.0 0:00.00 watchdog/2 11 root RT -5 0 0 0 S 0.0 0.0 0:23.66 migration/3 12 root 34 19 0 0 0 S 0.0 0.0 0:00.03 ksoftirqd/3 13 root RT -5 0 0 0 S 0.0 0.0 0:00.00 watchdog/3 14 root RT -5 0 0 0 S 0.0 0.0 0:20.29 migration/4 15 root 34 19 0 0 0 S 0.0 0.0 0:00.07 ksoftirqd/4 16 root RT -5 0 0 0 S 0.0 0.0 0:00.00 watchdog/4 17 root RT -5 0 0 0 S 0.0 0.0 0:23.07 migration/5 18 root 34 19 0 0 0 S 0.0 0.0 0:00.07 ksoftirqd/5 19 root RT -5 0 0 0 S 0.0 0.0 0:00.00 watchdog/5 说明： 统计信息区: 前五行是当前系统情况整体的统计信息区。下面我们看每一行信息的具体意义。 第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下： 14:06:23 — 当前系统时间 up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！） 2 users — 当前有2个用户登录系统 load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。 load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。 第二行，Tasks — 任务（进程），具体信息说明如下： 系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。 第三行，cpu状态信息，具体属性说明如下： 5.9%us — 用户空间占用CPU的百分比。 3.4% sy — 内核空间占用CPU的百分比。 0.0% ni — 改变过优先级的进程占用CPU的百分比 90.4% id — 空闲CPU百分比 0.0% wa — IO等待占用CPU的百分比 0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比 0.2% si — 软中断（Software Interrupts）占用CPU的百分比 **备注：****在这里CPU的使用比率和windows概念不同，****需要****理解****linux系统****用户空间和内核空间****的相关知识！** 第四行,内存状态，具体信息如下： 32949016k total — 物理内存总量（32GB） 14411180k used — 使用中的内存总量（14GB） 18537836k free — 空闲内存总量（18GB） 169884k buffers — 缓存的内存量 （169M） 第五行，swap交换分区信息，具体信息说明如下： 32764556k total — 交换区总量（32GB） 0k used — 使用的交换区总量（0K） 32764556k free — 空闲交换区总量（32GB） 3612636k cached — 缓冲的交换区总量（3.6GB） 备注： 第四行中使用中的内存总量（used）指的是现在系统内核控制的内存数，空闲内存总量（free）是内核还未纳入其管控范围的数量。纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到free中去，因此在linux上free内存会越来越少，但不用为此担心。 如果出于习惯去计算可用内存数，这里有个近似的计算公式：第四行的free + 第四行的buffers + 第五行的cached，按这个公式此台服务器的可用内存：18537836k +169884k +3612636k = 22GB左右。 对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。 第六行，空行。 第七行以下：各进程（任务）的状态监控，项目列信息说明如下： PID — 进程id USER — 进程所有者 PR — 进程优先级 NI — nice值。负值表示高优先级，正值表示低优先级 VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA SHR — 共享内存大小，单位kb S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程 %CPU — 上次更新到现在的CPU时间占用百分比 %MEM — 进程使用的物理内存百分比 TIME+ — 进程使用的CPU时间总计，单位1/100秒 COMMAND — 进程名称（命令名/命令行） 其他使用技巧： 1.多U多核CPU监控 在top基本视图中，按键盘数字“1”，可监控每个逻辑CPU的状况： 观察上图，服务器有16个逻辑CPU，实际上是4个物理CPU。再按数字键1，就会返回到top基本视图界面。 2.高亮显示当前运行进程 ​ 敲击键盘“b”（打开/关闭加亮效果），top的视图变化如下： 我们发现进程id为2570的“top”进程被加亮了，top进程就是视图第二行显示的唯一的运行态（runing）的那个进程，可以通过敲击“y”键关闭或打开运行态进程的加亮效果。 3.进程字段排序 默认进入top时，各进程是按照CPU的占用量来排序的，在下图中进程ID为28894的java进程排在第一（cpu占用142%），进程ID为574的java进程","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:4:1","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"实例2：显示 完整命令 命令： top -c 输出： 说明： ","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:4:2","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"实例3：以批处理模式显示程序信息 命令： top -b 输出： 说明： ","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:4:3","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"实例4：以累积模式显示程序信息 命令： top -S 输出： 说明： ","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:4:4","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"实例5：设置信息更新次数 命令： top -n 2 输出： 说明： 表示更新两次后终止更新显示 ","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:4:5","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"实例6：设置信息更新时间 命令： top -d 3 输出： 说明： 表示更新周期为3秒 ","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:4:6","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"实例7：显示指定的进程信息 命令： top -p 574 输出： 5.top交互命令 在top 命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了s 选项， 其中一些命令可能会被屏蔽。 h 显示帮助画面，给出一些简短的命令总结说明 k 终止一个进程。 i 忽略闲置和僵死进程。这是一个开关式命令。 q 退出程序 r 重新安排一个进程的优先级别 S 切换到累计模式 s 改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s f或者F 从当前显示中添加或者删除项目 o或者O 改变显示项目的顺序 l 切换显示平均负载和启动时间信息 m 切换显示内存信息 t 切换显示进程和CPU状态信息 c 切换显示命令名称和完整命令行 M 根据驻留内存大小进行排序 P 根据CPU使用百分比大小进行排序 T 根据时间/累计时间进行排序 W 将当前设置写入~/.toprc文件中 ","date":"2021-06-09","objectID":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:4:7","tags":["linux"],"title":"Top命令详解","uri":"/top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"1、认识挂载： （1）Linux的宗旨是一切皆文件，从以上我们也看到。我们存储的所有文件都在sda3下存放着，sda3也就是我们的根。那我们要在sda5中写入文件时，首先要sda5要与sda3先建立一个联系，这个联系就是一个目录。建立联系的过程我们叫做挂载。 （2）当我们访问sda3底下的这个目录的时候，实际上我们访问的才是sda5这个设备文件。这个目录相当于一个访问sda5的入口，可以理解为一个接口，有了这个接口才可以访问这个磁盘。 2、磁盘的挂载： （1）挂载点目录:我们将磁盘切到根目录， media 和 mnt 这两个目录被叫做挂载点目录。除此之外，我们也可以自己创建一个目录作为一个挂载点目录， （2）临时挂载：将指定的一个目录作为挂载点目录时，如果挂载点的目录有文件，那么文件会被隐藏。因此当我们需要挂载目录时，最好新建一个空文件夹来作为挂在点目录。（重启后失效） 挂载NTFS过程 1.因为是虚拟机，所以先到系统的服务目录下寻找【VMware USB Arbitration Service】服务，并确保此服务已经启动。 2.进入Centos 7环境，在mnt目录下创建一个子目录：udisk（用来将U盘挂载到此目录），所需命令为：mkdir -p /mnt/udisk。注意，此目录名称可以随意命名，按个人爱好创建。 3.插入U盘 4.运行命令：fdisk -l查看U盘是否已经加载到Centos中，方法为：通过检查没有插入U盘与插入U盘情况下，系统的输出是否一致，如果一致，说明系统没有加载到U盘，否则说明系统加载到U盘。系统加载到U盘后的输出如下图所示： 5.运行命令：其中sdb1就是上个步骤查询出的U盘名称。运行此命令时，一般会报错：mount:unknown filesystem type ntfs-3g mount -t ntfs-3g /dev/sdb1 /mnt/udisk ","date":"2021-06-03","objectID":"/centos%E4%B8%AD%E6%8C%82%E8%BD%BDntfs%E4%B8%8Eexfat%E7%9A%84u%E7%9B%98/:0:0","tags":["centos挂载U盘"],"title":"Centos中挂载NTFS与exFAT的U盘","uri":"/centos%E4%B8%AD%E6%8C%82%E8%BD%BDntfs%E4%B8%8Eexfat%E7%9A%84u%E7%9B%98/"},{"categories":["运维"],"content":"报错原因 Linux 和 Mac OS X 本身不支持读写 NTFS 文件系统（windows系统），大多数人平时也不需要与 NTFS 做数据文件的交互，只是有时候 Windows 用户应急状态下需要使用大容量移动硬盘拷贝数据，必须实现 Linux 下挂载 NTFS，而 Tuxera 恰好为 Linux 和 Mac 用户提供了灰常简单的实现方法 ","date":"2021-06-03","objectID":"/centos%E4%B8%AD%E6%8C%82%E8%BD%BDntfs%E4%B8%8Eexfat%E7%9A%84u%E7%9B%98/:1:0","tags":["centos挂载U盘"],"title":"Centos中挂载NTFS与exFAT的U盘","uri":"/centos%E4%B8%AD%E6%8C%82%E8%BD%BDntfs%E4%B8%8Eexfat%E7%9A%84u%E7%9B%98/"},{"categories":["运维"],"content":"介绍 我偷个大懒直接引用官方的原话 NTFS-3G is a stable, full-featured, read-write NTFS driver for Linux, Android, Mac OS X, FreeBSD, NetBSD, OpenSolaris, QNX, Haiku, and other operating systems. It provides safe handling of the Windows XP, Windows Server 2003, Windows 2000, Windows Vista, Windows Server 2008, Windows 7, Windows 8 and Windows 10 NTFS file systems. A high-performance alternative, called Tuxera NTFS is available for embedded devices and Mac OS X . The release notes and the software changes can be found on the Release History page. Subscribe here for new release notifications. ","date":"2021-06-03","objectID":"/centos%E4%B8%AD%E6%8C%82%E8%BD%BDntfs%E4%B8%8Eexfat%E7%9A%84u%E7%9B%98/:2:0","tags":["centos挂载U盘"],"title":"Centos中挂载NTFS与exFAT的U盘","uri":"/centos%E4%B8%AD%E6%8C%82%E8%BD%BDntfs%E4%B8%8Eexfat%E7%9A%84u%E7%9B%98/"},{"categories":["运维"],"content":"Open Source: NTFS-3G #Installation tar zxvf /tmp/ntfs-3g_ntfsprogs-2016.2.22.tgz cd ntfs* #yum -y install gcc gcc-c++ make ./configure make make install # or 'sudo make install' if you aren't root #Usage fdisk -l mkdir -p /mnt/windows mount -t ntfs-3g /dev/sda1 /mnt/windows #You can also make NTFS to be mounted during boot by adding the following line to the end of the /etc/fstab file: vi /etc/fstab /dev/sda1 /mnt/windows ntfs-3g defaults 0 0 ","date":"2021-06-03","objectID":"/centos%E4%B8%AD%E6%8C%82%E8%BD%BDntfs%E4%B8%8Eexfat%E7%9A%84u%E7%9B%98/:3:0","tags":["centos挂载U盘"],"title":"Centos中挂载NTFS与exFAT的U盘","uri":"/centos%E4%B8%AD%E6%8C%82%E8%BD%BDntfs%E4%B8%8Eexfat%E7%9A%84u%E7%9B%98/"},{"categories":["运维"],"content":"卸载U盘，请使用命令： umount /mnt/udisk 挂载exFAT过程 下载fuse-exfat模块：https://github.com/relan/exfat/archive/refs/heads/master.zip #编译前，请先检查系统，如果系统中没有scons和gcc，请通过yum安装 ，这个软件是fuse模块，编译需要fuse-devel包支持 yum install -y scons gcc autoconf automake pkg-config fuse-devel make unzip master.zip cd exfat-master autoreconf --install ./configure make \u0026\u0026 make install ##使用方法 mount.exfat /dev/spec /mnt/exfat ","date":"2021-06-03","objectID":"/centos%E4%B8%AD%E6%8C%82%E8%BD%BDntfs%E4%B8%8Eexfat%E7%9A%84u%E7%9B%98/:4:0","tags":["centos挂载U盘"],"title":"Centos中挂载NTFS与exFAT的U盘","uri":"/centos%E4%B8%AD%E6%8C%82%E8%BD%BDntfs%E4%B8%8Eexfat%E7%9A%84u%E7%9B%98/"},{"categories":["chrome"],"content":"由于F12是前端开发人员的利器，所以我自己也在不断摸索中，查看一些博客和资料后，自己总结了一下来帮助自己理解和记忆 首先介绍Chrome开发者工具中，调试时使用最多的三个功能页面是：元素（ELements）、控制台（Console）、源代码（Sources），此外还有网络（Network）等。 元素（Elements）：用于查看或修改HTML元素的属性、CSS属性、监听事件、断点等。 控制台（Console）：控制台一般用于执行一次性代码，查看JavaScript对象，查看调试日志信息或异常信息。 源代码（Sources）：该页面用于查看页面的HTML文件源代码、JavaScript源代码、CSS源代码，此外最重要的是可以调试JavaScript源代码，可以给JS代码添加断点等。 网络（Network）：网络页面主要用于查看header等与网络连接相关的信息。 ","date":"2021-05-27","objectID":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:0:0","tags":["Chrome"],"title":"Chrome浏览器中F12功能的简单介绍","uri":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":["chrome"],"content":"1、元素（Elements） 查看元素代码：点击如图箭头（或用者用快捷键Ctrl+Shift+C）进入选择元素模式，然后从页面中选择需要查看的元素，然后可以在开发者工具元素（Elements）一栏中定位到该元素源代码的具体位置 。查看元素属性：可从被定位的源码中查看部分，如class、src，也可在右边的侧栏中查看全部的属性，如下图位置查看 修改元素的代码与属性：可直接双击想要修改的部分，然后就进行修改，或者选中要修改部分后点击右键进行修改，如下图 注意：这个修改也仅对当前的页面渲染生效，不会修改服务器的源代码，故而这个功能也是作为调试页面效果而使用。 右边的侧栏个功能的介绍:如下图所示 ","date":"2021-05-27","objectID":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:1:0","tags":["Chrome"],"title":"Chrome浏览器中F12功能的简单介绍","uri":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":["chrome"],"content":"2、控制台（Console） 查看JS对象的及其属性 执行JS语句 查看控制台日志：当网页的JS代码中使用了console.log()函数时，该函数输出的日志信息会在控制台中显示。日志信息一般在开发调试时启用，而当正式上线后，一般会将该函数去掉。 ","date":"2021-05-27","objectID":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:2:0","tags":["Chrome"],"title":"Chrome浏览器中F12功能的简单介绍","uri":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":["chrome"],"content":"源代码（Sources） ","date":"2021-05-27","objectID":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:3:0","tags":["Chrome"],"title":"Chrome浏览器中F12功能的简单介绍","uri":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":["chrome"],"content":"4、网络（Network） 请求文件具体说明 一共分为四个模块： Header：面板列出资源的请求url、HTTP方法、响应状态码、请求头和响应头及它们各自的值、请求参数等等 Preview：预览面板，用于资源的预览。 Response：响应信息面板包含资源还未进行格式处理的内容 Timing：资源请求的详细信息花费时间 打开浏览器,按f12,点击Network,可以查看相关网络请求信息,记得是打开f12之后再刷新页面才会开始记录的 查看Network基本信息,请求了哪些地址及每个URL的网络相关请求信息都可以看的到URL，响应状态码，响应数据类型，响应数据大小，响应时间 请求URL可进行筛选和分类选择不同分类,查看请求URL,方便查找 也可以直接Filter搜索查询相关URL可以输入关键字或者正则表达式进行查询 Waterfall能分割重要的请求耗时,查看具体请求耗时在哪个地方鼠标指到相关区域可以看到具体耗时 我们具体分析下里面每个各代表什么意思,分别耗时多少,通过这个来分析服务器到底是哪个环节出了问题 Queueing 是排队的意思 Stalled 是阻塞 请求访问该URL的主机是有并发和连接数限制的,必须要等之前的执行才能执行之后的,这段时间的耗时 DNS Lookup 是指域名解析所耗时间 Initial connection 初始化连接时间,这里一般是TCP 3次连接握手时间 SSL https特有,是一种协议 Request sent 发送请求所消耗的时间 Waiting 等待响应时间,这里一般是最耗时的 Content Download 下载内容所需要消耗的时间 ","date":"2021-05-27","objectID":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:4:0","tags":["Chrome"],"title":"Chrome浏览器中F12功能的简单介绍","uri":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":["chrome"],"content":"如何使用浏览器的F12调试页面？ 一个程序员按照要求编写一个网页，不可能一次编写就完全达到目的，一般要对自己的的代码修改调试几次后才能到达要求，浏览器的F12开发人员工具就可以很方便的帮助程序员调试自己的代码。 ​ F12 开发人员工具是一套按需采用的工具，网站开发人员可以随时在任何网页上使用 F12 工具，从而快速调试 JavaScript、HTML 和级联样式表 (CSS)，还可以跟踪并查明网页或网络的性能问题。 ​ F12调试页面各个功能分别是什么？ Elements标签页 Elements标签页的左侧就是对页面HTML结构的查看与编辑，你可以直接在某个元素上双击修改元素的属性。 Elements标签页的右侧 Network标签页 Network标签页对于分析网站请求的网络情况、查看某一请求的请求头和响应头还有响应内容很有用。注意是在你打开Chrome开发者工具后发起的请求，才会在这里显示 Sources标签页 Sources标签页可以查看到请求的资源情况，包括CSS、JS、图片等的内容。也可以设置各种断点。对存储的内容进行编辑然后保存也会实时的反应到页面上. Audits标签页 这个对于优化前端页面、加速网页加载速度很有用;点击run按钮，就可以开始分析页面，分析完了就可以看到分析结果了 Console标签页 就是Javascript控制台了 在控制台中可以直接模拟手机、调整UA、修改网络连接状态。 ","date":"2021-05-27","objectID":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:5:0","tags":["Chrome"],"title":"Chrome浏览器中F12功能的简单介绍","uri":"/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%ADf12%E5%8A%9F%E8%83%BD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":["运维"],"content":"漏洞介绍 关于 Sudo 堆缓冲区溢出漏洞(CVE-2021- 3156)的预警通知 有关情报显示，sudo 存在缓冲区溢出漏洞。攻击者在取得服 务器基础权限的情况下，可以利用 sudo 基于堆的缓冲区溢出漏 洞，获得 root 权限。在 sudo 解析命令行参数的方式中发现了基 于堆的缓冲区溢出。任何本地用户(普通用户和系统用户，sudo er 和非 sudoers)都可以利用此漏洞，而无需进行身份验证，攻 击者不需要知道用户的密码。 漏洞编号:CVE-2021-3156。 一、漏洞情况分析 Sudo 是一种程序，用于类 Unix 操作系统如 BSD，Mac OS X，以及 GNU/Linux 以允许用户透过安全的方式使用特殊的权限 运行程序。 二、 漏洞影响范围 影响版本: 1.8.2 - 1.8.31p2 1.9.0 - 1.9.5p1 ","date":"2021-05-25","objectID":"/centos%E5%8D%87%E7%BA%A7sudo%E7%89%88%E6%9C%AC-%E8%A7%A3%E5%86%B3sudo%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-%E4%BF%AE%E5%A4%8D%E5%A0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/:1:0","tags":["sudo漏洞"],"title":"CentOS升级sudo版本 解决Sudo权限绕过漏洞 修复堆缓冲区溢出漏洞(CVE-2021-3156)","uri":"/centos%E5%8D%87%E7%BA%A7sudo%E7%89%88%E6%9C%AC-%E8%A7%A3%E5%86%B3sudo%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-%E4%BF%AE%E5%A4%8D%E5%A0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/"},{"categories":["运维"],"content":"升级环境 系统：CentOS6/CentOS7 sudo：1.8.23 查看本地sudo版本命令：sudo -V 最新版本：sudo-1.9.5p2 查看官方最新版本文件：https://www.sudo.ws/dist/ ","date":"2021-05-25","objectID":"/centos%E5%8D%87%E7%BA%A7sudo%E7%89%88%E6%9C%AC-%E8%A7%A3%E5%86%B3sudo%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-%E4%BF%AE%E5%A4%8D%E5%A0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/:2:0","tags":["sudo漏洞"],"title":"CentOS升级sudo版本 解决Sudo权限绕过漏洞 修复堆缓冲区溢出漏洞(CVE-2021-3156)","uri":"/centos%E5%8D%87%E7%BA%A7sudo%E7%89%88%E6%9C%AC-%E8%A7%A3%E5%86%B3sudo%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-%E4%BF%AE%E5%A4%8D%E5%A0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/"},{"categories":["运维"],"content":"准备 查看本地sudo版本，查看官方最新版本文件：https://www.sudo.ws/dist/ sudo -V 若已经安装gcc,可以忽略此操作 yum -y install gcc 若已经安装wget,可以忽略此操作 yum -y install wget ","date":"2021-05-25","objectID":"/centos%E5%8D%87%E7%BA%A7sudo%E7%89%88%E6%9C%AC-%E8%A7%A3%E5%86%B3sudo%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-%E4%BF%AE%E5%A4%8D%E5%A0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/:3:0","tags":["sudo漏洞"],"title":"CentOS升级sudo版本 解决Sudo权限绕过漏洞 修复堆缓冲区溢出漏洞(CVE-2021-3156)","uri":"/centos%E5%8D%87%E7%BA%A7sudo%E7%89%88%E6%9C%AC-%E8%A7%A3%E5%86%B3sudo%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-%E4%BF%AE%E5%A4%8D%E5%A0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/"},{"categories":["运维"],"content":"安装 切换到需要下载软件的目录 cd /opt/jovtec/soft/ 下载最新版本到服务器解压 wget https://www.sudo.ws/dist/sudo-1.9.5p2.tar.gz \u0026\u0026 tar zxf sudo-1.9.5p2.tar.gz 执行配置命令 cd sudo-1.9.5p2 \u0026\u0026 ./configure --prefix=/usr --libexecdir=/usr/lib --with-secure-path --with-all-insults --with-env-editor --docdir=/usr/share/doc/sudo-1.9.5p2 --with-passprompt=\"[sudo] password for %p: \" 编译安装 make \u0026\u0026 make install \u0026\u0026 ln -sfv libsudo_util.so.0.0.0 /usr/lib/sudo/libsudo_util.so.0 检验 sudo -V 以非 root 用户登录系统，并使用命令 sudoedit -s / - 如果响应一个以 sudoedit: 开头的报错，那么表明存在漏洞。 - 如果响应一个以 usage: 开头的报错，那么表明补丁已经生效。 ","date":"2021-05-25","objectID":"/centos%E5%8D%87%E7%BA%A7sudo%E7%89%88%E6%9C%AC-%E8%A7%A3%E5%86%B3sudo%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-%E4%BF%AE%E5%A4%8D%E5%A0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/:4:0","tags":["sudo漏洞"],"title":"CentOS升级sudo版本 解决Sudo权限绕过漏洞 修复堆缓冲区溢出漏洞(CVE-2021-3156)","uri":"/centos%E5%8D%87%E7%BA%A7sudo%E7%89%88%E6%9C%AC-%E8%A7%A3%E5%86%B3sudo%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-%E4%BF%AE%E5%A4%8D%E5%A0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/"},{"categories":["运维"],"content":"1、安装iptables systemctl status iptables #查看是否安装iptables 警告 输出结果表示没有iptables的相关服务，我们需要安装 yum install iptables-services #安装 systemctl status iptables systemctl start iptables systemctl enable iptables.service #设置开机启动 systemctl disable iptables.service #禁止开机启动 警告 这里需要关闭SELINUX，因为当SELINUX不关闭时，iptables不读取配置文件 vi /etc/selinux/config 重新加载配置 source /etc/selinux/config 危险 第一次创建规则要使用-F 清空，否者会出现很多奇怪的问题！ ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:0:0","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"永久插入规则 vim /etc/sysconfig/iptables # Firewall configuration written by system-config-firewall # Manual customization of this file is not recommended. *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] #-A INPUT -p icmp -j ACCEPT ---注释这几行 #-A INPUT -i lo -j ACCEPT---注释这几行 #-A INPUT -p tcp --dport 22 -j ACCEPT---注释这几行 #-A INPUT -j REJECT --reject-with icmp-host-prohibited---注释这几行 #-A FORWARD -j REJECT --reject-with icmp-host-prohibited---注释这几行 -A INPUT -p tcp --dport 80 -m connlimit --connlimit-above 10 -j REJECT -A INPUT -p tcp --dport 8080 -m connlimit --connlimit-above 10 -j REJECT -A INPUT -p tcp --dport 28080 -m connlimit --connlimit-above 10 -j REJECT -A INPUT -p tcp --dport 20080 -m connlimit --connlimit-above 10 -j REJECT -A INPUT -i eth0 -p tcp -s 45.61.185.76 -j DROP -A INPUT -i eth0 -p tcp -s 185.7.214.104 -j DROP COMMIT 执行这个命令，友好一点，返回结果第一列，外部IP的连接数，第二列为外部连接IP netstat -na|grep ESTABLISHED|awk '{print $5}'|awk -F: '{print $1}'|sort|uniq -c|sort -r 2、配置规则 ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:1:0","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"禁止访问9200端口 iptables -I INPUT -p tcp --dport 9200 -j DROP ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:2:0","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"允许ip为192.168.1.1的机器访问 iptables -I INPUT -p tcp -s 192.168.1.1 --dport 9200 -j ACCEPT #插入到第10行 iptables -I INPUT 10 -p tcp -s 192.168.1.1 --dport 9200 -j ACCEPT ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:3:0","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"允许ip在192.168网段的机器访问 iptables -I INPUT -p tcp -s 192.168.1.1/16 --dport 9200 -j ACCEPT ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:4:0","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"允许所有ip访问 iptables -I INPUT -p tcp --dport 9200 -j ACCEPT ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:5:0","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"查看规则列表 iptables -nvL --line-number ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:6:0","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"删除规则 #删除第10行规则 iptables -D INPUT 10 ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:7:0","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"清空所有规则 iptables -F 【列子】 iptables -I INPUT -p tcp -s 192.168.1.1 --dport 9200 -j ACCEPT iptables -I INPUT -p tcp -s 192.168.1.2 --dport 9200 -j ACCEPT iptables -I INPUT -p tcp -s 192.168.1.3 --dport 9200 -j ACCEPT iptables -I INPUT -p tcp --dport 9200 -j DROP 说明：首先放开192.168.1.1至192.168.1.3ip段的9200端口，然后再禁用掉本机的9200端口 ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:8:0","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"[9个常用iptables配置实例] ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:9:0","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"1.删除已有规则 在新设定iptables规则时，我们一般先确保旧规则被清除，用以下命令清除旧规则： iptables -F (or iptables --flush) ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:9:1","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"2.设置chain策略 对于filter table，默认的chain策略为ACCEPT，我们可以通过以下命令修改chain的策略： iptables -P INPUT DROP iptables -P FORWARD DROP iptables -P OUTPUT DROP 以上命令配置将接收、转发和发出包均丢弃，施行比较严格的包管理。由于接收和发包均被设置为丢弃，当进一步配置其他规则的时候，需要注意针对INPUT和OUTPUT分别配置。当然，如果信任本机器往外发包，以上第三条规则可不必配置。 ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:9:2","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"3.屏蔽指定ip 有时候我们发现某个ip不停的往服务器发包，这时我们可以使用以下命令，将指定ip发来的包丢弃： BLOCK_THIS_IP=\"x.x.x.x\" iptables -A INPUT -i eth0 -p tcp -s \"$BLOCK_THIS_IP\" -j DROP 以上命令设置将由x.x.x.x ip发往eth0网口的tcp包丢弃。 ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:9:3","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"4.配置服务项 利用iptables，我们可以对日常用到的服务项进行安全管理，比如设定只能通过指定网段、由指定网口通过SSH连接本机： iptables -A INPUT -i eth0 -p tcp -s 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLESHED -j ACCEPT iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT 若要支持由本机通过SSH连接其他机器，由于在本机端口建立连接，因而还需要设置以下规则： iptables -A INPUT -i eth0 -p tcp -s 192.168.100.0/24 --dport 22 -m state --state ESTABLESHED -j ACCEPT iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state NEW,ESTABLISHED -j ACCEPT 类似的，对于HTTP/HTTPS(80/443)、pop3(110)、rsync(873)、MySQL(3306)等基于tcp连接的服务，也可以参照上述命令配置。 对于基于udp的dns服务，使用以下命令开启端口服务： iptables -A OUTPUT -p udp -o eth0 --dport 53 -j ACCEPT iptables -A INPUT -p udp -i eth0 --sport 53 -j ACCEPT ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:9:4","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"5.网口转发配置 对于用作防火墙或网关的服务器，一个网口连接到公网，其他网口的包转发到该网口实现内网向公网通信，假设eth0连接内网，eth1连接公网，配置规则如下： iptables -A FORWARD -i eth0 -o eth1 -j ACCEPT ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:9:5","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"6.端口转发配置 对于端口，我们也可以运用iptables完成转发配置： iptables -t nat -A PREROUTING -p tcp -d 192.168.102.37 --dport 422 -j DNAT --to 192.168.102.37:22 以上命令将422端口的包转发到22端口，因而通过422端口也可进行SSH连接，当然对于422端口，我们也需要像以上“4.配置服务项”一节一样，配置其支持连接建立的规则。 ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:9:6","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"7.DoS攻击防范 利用扩展模块limit，我们还可以配置iptables规则，实现DoS攻击防范： iptables -A INPUT -p tcp --dport 80 -m limit --limit 25/minute --limit-burst 100 -j ACCEPT –litmit 25/minute 指示每分钟限制最大连接数为25 –litmit-burst 100 指示当总连接数超过100时，启动 litmit/minute 限制 #在80端口同一个ip并发量超过10就拒绝 iptables -A INPUT -p tcp --dport 80 -m connlimit --connlimit-above 10 -j REJECT ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:9:7","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"8.配置web流量均衡 我们可以将一台服务器作为前端服务器，利用iptables进行流量分发，配置方法如下： iptables -A PREROUTING -i eth0 -p tcp --dport 80 -m state --state NEW -m nth --counter 0 --every 3 --packet 0 -j DNAT --to-destination 192.168.1.101:80 iptables -A PREROUTING -i eth0 -p tcp --dport 80 -m state --state NEW -m nth --counter 0 --every 3 --packet 0 -j DNAT --to-destination 192.168.1.102:80 iptables -A PREROUTING -i eth0 -p tcp --dport 80 -m state --state NEW -m nth --counter 0 --every 3 --packet 0 -j DNAT --to-destination 192.168.1.103:80 以上配置规则用到nth扩展模块，将80端口的流量均衡到三台服务器。 ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:9:8","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"9.将丢弃包情况记入日志 使用LOG目标和syslog服务，我们可以记录某协议某端口下的收发包情况。拿记录丢包情况举例，可以通过以下方式实现。 首先自定义一个chain： iptables -N LOGGING 其次将所有接收包导入LOGGING chain中： iptables -A INPUT -j LOGGING 然后设置日志前缀、日志级别： iptables -A LOGGING -m limit --limit 2/min -j LOG --log-prefix \"IPTables Packet Dropped: \" --log-level 7 最后将包倒向DROP，将包丢弃： iptables -A LOGGING -j DROP 另可以配置syslog.conf文件，指定iptables的日志输出。 ","date":"2021-05-19","objectID":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/:9:9","tags":["iptables"],"title":"Iptables Centos 7","uri":"/iptables%E8%A7%84%E5%88%99%E5%88%97%E8%A1%A8/"},{"categories":["运维"],"content":"Linux系统IO分析工具之iotop常用参数介绍 在一般运维工作中经常会遇到这么一个场景，服务器的IO负载很高（iostat中的util），但是无法快速的定位到IO负载的来源进程和来源文件导致无法进行相应的策略来解决问题。 　Windows操作系统可以通过鲁大师等硬盘检测工具来查看硬盘读写速度，那么linux下测试硬盘IO读写情况怎么看?iotop是linux系统下测试硬盘IO读写的工具，简单的说,iotop是一个用来监视磁盘I/O使用状况的 top 类工具，可监测到哪一个程序使用的磁盘IO的信息（requires 2.6.20 or later) 1\u003e.安装iotop [root@node105 ~]# yum -y install iotop 2\u003e.查看iotop的帮助信息 [root@node105 ~]# iotop -help 各个参数说明： -o, --only只显示正在产生I/O的进程或线程。除了传参，可以在运行过程中按o生效。 -b, --batch非交互模式，一般用来记录日志。 -n NUM, --iter=NUM设置监测的次数，默认无限。在非交互模式下很有用。 -d SEC, --delay=SEC设置每次监测的间隔，默认1秒，接受非整形数据例如1.1。 -p PID, --pid=PID指定监测的进程/线程。 -u USER, --user=USER指定监测某个用户产生的I/O。 -P, --processes仅显示进程，默认iotop显示所有线程。 -a, --accumulated显示累积的I/O，而不是带宽。 -k, --kilobytes使用kB单位，而不是对人友好的单位。在非交互模式下，脚本编程有用。 -t, --time 加上时间戳，非交互非模式。 -q, --quiet 禁止头几行，非交互模式。有三种指定方式。 -q 只在第一次监测时显示列名 -qq 永远不显示列名。 -qqq 永远不显示I/O汇总。 交互按键： 和top命令类似，iotop也支持以下几个交互按键。 left和right方向键：改变排序。　r：反向排序。 o：切换至选项--only。 p：切换至--processes选项。 a：切换至--accumulated选项。 q：退出。 i：改变线程的优先级。 3\u003e. 只显示正在产生I/O的进程或线程。除了传参，可以在运行过程中按o生效。 [root@node105 ~]# iotop -o 4\u003e.时间刷新间隔2秒，输出5次 [root@node105 ~]# iotop -d 2 -n 5 5\u003e.非交互式，输出5次，间隔2秒，输出到屏幕，也可输出到日志文本，用于监控某时间段的io信息 [root@node105 ~]# iotop -botq -n 5 -d 2 6\u003e.非交互式，输出pid为8382的进程信息 [root@kafka118 ~]# iotop -botq -p 8382 ","date":"2021-05-18","objectID":"/linux%E7%B3%BB%E7%BB%9Fio%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E4%B9%8Biotop%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D/:0:0","tags":["linux","io"],"title":"Linux系统IO分析工具之iotop常用参数介绍","uri":"/linux%E7%B3%BB%E7%BB%9Fio%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E4%B9%8Biotop%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D/"},{"categories":["git"],"content":"GitHub搜索技巧整理 github作为全球最大的开源软件项目托管平台，相信很多程序员都在使用，不仅仅是因为它可以免费的作为我们公有或者私有的代码仓库，更因为github上面有大量的开源学习项目或资源，秉着开源自由的理念，吸引了大量的个人或者企业开发者。 那么面对如此海量的代码仓库，如何才能在众多的资源中搜索出更优秀，更符合自己需求的项目呢？ 比如我想搜索一个springboot项目，你是否就直接输入springboot关键字直接搜索，但是搜索出了118,085个结果，当然了，你还可以做一些简单的排序，比如通过stars、forks的数量。 搜索中如果你发现github网页加载很慢，或者图片打不开，请打开hosts文件(C:\\Windows\\System32\\drivers\\etc)，加上以下内容： 192.30.253.113 github.com 151.101.113.194 github.global.ssl.fastly.net 151.101.184.133 assets-cdn.github.com 151.101.184.133 raw.githubusercontent.com 151.101.184.133 gist.githubusercontent.com 151.101.184.133 cloud.githubusercontent.com 151.101.184.133 camo.githubusercontent.com 151.101.184.133 avatars0.githubusercontent.com 151.101.184.133 avatars1.githubusercontent.com 151.101.184.133 avatars2.githubusercontent.com 151.101.184.133 avatars3.githubusercontent.com 151.101.184.133 avatars4.githubusercontent.com 151.101.184.133 avatars5.githubusercontent.com 151.101.184.133 avatars6.githubusercontent.com 151.101.184.133 avatars7.githubusercontent.com 151.101.184.133 avatars8.githubusercontent.com 但这样搜索出来的结果真的精确吗？接下来，我们来演示一下几个我们常用的github搜索技巧，让搜索出来的结果更加精确、符合要求！ 首先我们来看一张思维导图： 上面的搜索技巧，我分为了2类，一类常用和更多，常用的部分应该是我们日常使用频率最高的，需要我们记住。 1、in 关键字 in 是用来限定搜索的范围，可以指定是在名称、描述、readme文档中搜索关键字 in:name：指定搜索范围是仓库名称 in:description：指定搜索范围是摘要中 in:readme：指定搜索范围是readme文档中 比如，指定项目仓库名称springboot、mybatis、demo三个关键字，那么搜索如下： in:name springboot mybatis demo 结果如下： 这样搜索出来的项目就是一个简单的demo整合项目，而不是综合项目。 你还可以这样搜： in:description springboot mybatis 整合 2、stars 、forks 通常我们判断一个项目好不好，可以通过项目的stars和fork数量来判断，当然了，这也不是绝对的，github中还隐藏这很多不为人所知的优秀项目，等着你挖掘哈。 方式如下： stars:\u003e ：筛选stars数量大于某个值的仓库 stars:start..end ：筛选stars数量在start和end区间的仓库 fork:\u003e fork:start..end 所以，通过stars 、forks关键字，我们可以通过stars 、forks数量来过滤一部分。比如，我要筛选搜索结果中，stars数量大于50的项目。那么如下： in:name springboot mybatis demo stars:\u003e50 复制代码 筛选之后的结果只有2个符合要求： 3、language 这个简单，指定项目的编写语言，如java、python、php等。比如我们搜索单点登录，如果我们直接搜索in:description 单点登录，那么出现的结果会包含各种语言的实现项目，但是如果你加上了java语言的限定条件之后，搜索出来的结果就只有java的。 in:description 单点登录 language:java 4、created、pushed 创建日期、更新日期。项目久不维护了，或者项目已经创建很久了，那么项目的技术有时候就已经过时了，比如以前Springboot的1.5版本的创建项目就不是很适合现在了，现在我们学习的话直接上手2.0版本以上的比较好，所以找新项目，还得跟紧技术的迭代速度。 in:description 单点登录 language:java pushed:\u003e2019-12-01 通常来说，stars数量多，维护频繁的项目都是比较优秀的开源项目。 其他 还可以根据协议license:；或者项目作者user:；或者仓库的大小size:\u003e=；被关注人数followers:，只不过大家就用得比较少。 高级搜索 除了使用这种特定的限定词来筛选之外，其实github还给我们提供了一种筛选的搜索链接。 https://github.com/search/advanced 复制代码 其实就是界面化的搜索条件筛选框，想不起搜索关键词或者单词的时候可以收藏这个高级搜索界面哈。 下面是常用搜索总结 ","date":"2021-05-11","objectID":"/github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:0:0","tags":["github"],"title":"GitHub搜索技巧整理","uri":"/github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":["git"],"content":"定位问题 使用window命令ping rowkey.cn查看网络是否通，ping到的结果是：127.0.0.1。 大家都知道TCP/IP 在设计之初，被IP地址分为A类，B类，C类，D类及私有地址，而127.0.0.1就属于私有地址。众所周知，私有地址无论如何是不会映射到公网域名，如果ping某个域名返回的是私有地址，那么只有一种可能，要么DNS的解析出现问题，要么本地Host将域名映射不到某个私有地址。 那么接下来让咱们先看看Host。在自己的系统中找到host文件，然后打开后Host内容如下： # Host Database # # localhost is used to configure the loopback interface # when the system is booting. Do not change this entry. 127.0.0.1 eureka7001.com 127.0.0.1 eureka7002.com 127.0.0.1 eureka7003.com # Modified hosts end 185.199.108.153 superhj1987.github.io 127.0.0.1 activate.xxx.com 127.0.0.1 practivate.xxx.com 127.0.0.1 ereg.xxx.com 127.0.0.1 wip3.xxx.com 127.0.0.1 activate.wip3.xxx.com 127.0.0.1 3dns-3.xxx.com 127.0.0.1 3dns-2.xxx.com 127.0.0.1 adobe-dns.xxx.com 127.0.0.1 adobe-dns-2.adobe.com 127.0.0.1 adobe-dns-3.adobe.com # Added by Docker Desktop # To allow the same kube context to work on the host and the container: 127.0.0.1 kubernetes.docker.internal # End of section 从上面的Host内容看到，我并没有在Host中硬配置该域名的IP。那么就剩下另一个可能，也就是DNS出现了问题。那么我们使用nslookup 命令来看看该域名到底在哪个环节出现问题。 landsnail@landsnail ~ % nslookup rowkey.cn Server: 116.116.116.116 Address: 116.116.116.116#53 Non-authoritative answer: rowkey.cn canonical name = superhj1987.github.io Name: superhj1987.github.io Address: 127.0.0.1 从上面的返回我们能够清晰的看到，DNS服务器为116.116.116.116，而域名rowkey.cn通过cname跳到了superhj1987.github.io这个子域名上，接着返回的地址为：127.0.0.1，也就是上面ping命令返回的解释。 也就是rowkey.cn通过cname成功解析到子域名 superhj1987.github.io，而再解析域名superhj1987.github.io 的时候出现了该问题。 直接ping superhj1987.github.io返回的结果也是：127.0.0.1。那么为何该域名没有被正确解析呢？这里可能存在两个原因，第一个就是该域名在域名服务器：116.116.116.116被错误解析，第二个就是该域名被某种技术污染了，怎么换DNS服务器都返回这个结果。 接着排查问题。 我们更换DNS服务器为114.114.144.144，接着再使用nslookup命令查看结果。试了几次返回的结果依旧是127.0.0.1，到此我们可以得出结论：github.io的解析被某种神秘的力量污染了，所以不管更换到哪个DNS服务器，返回的结果都是这个IP地址。 ","date":"2021-05-06","objectID":"/ping-github.io%E7%BB%93%E6%9E%9C%E4%B8%BA127.0.0.1%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/:0:1","tags":["github"],"title":"Ping Github.io结果为127.0.0 的问题分析及解决办法","uri":"/ping-github.io%E7%BB%93%E6%9E%9C%E4%B8%BA127.0.0.1%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"categories":["git"],"content":"解决问题 既然已经定位到问题，那么如何解决呢？其实答案很简单，就是在本地的Host中配置一条DNS解析，强制将github.io解析到正确的地址上即可，经过广大网友的友情帮助，我们得到如下配置： 185.199.110.153 superhj1987.github.io 185.199.111.153 superhj1987.github.io 185.199.108.153 superhj1987.github.io 185.199.109.153 superhj1987.github.io ","date":"2021-05-06","objectID":"/ping-github.io%E7%BB%93%E6%9E%9C%E4%B8%BA127.0.0.1%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/:0:2","tags":["github"],"title":"Ping Github.io结果为127.0.0 的问题分析及解决办法","uri":"/ping-github.io%E7%BB%93%E6%9E%9C%E4%B8%BA127.0.0.1%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"categories":["运维"],"content":"nslookup命令用于**查询DNS的记录，查看域名解析是否正常，在网络故障的时候用来诊断网络问题。** nslookup的用法相对来说还是蛮简单的，主要是下面的几个用法。 ","date":"2021-05-06","objectID":"/nslookup%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:0:0","tags":["linux"],"title":"Nslookup命令详解","uri":"/nslookup%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"1、直接查询 这个可能大家用到最多，查询一个域名的A记录。 nslookup domain [dns-server] 如果没指定dns-server，用系统默认的dns服务器。下面是一个例子： [root@localhost ~]# nslookup baidu.com Server: 10.30.7.177 Address: 10.30.7.177#53 Non-authoritative answer: Name: baidu.com Address: 123.125.114.144 Name: baidu.com Address: 111.13.101.208 Name: baidu.com Address: 180.149.132.47 Name: baidu.com Address: 220.181.57.217 ","date":"2021-05-06","objectID":"/nslookup%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:1:0","tags":["linux"],"title":"Nslookup命令详解","uri":"/nslookup%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"2、查询其他记录 直接查询返回的是A记录，我们可以指定参数，查询其他记录，比如AAAA、MX等。 nslookup -qt=type domain [dns-server] 其中，type可以是以下这些类型： A 地址记录 AAAA 地址记录 AFSDB Andrew文件系统数据库服务器记录 ATMA ATM地址记录 CNAME 别名记录 HINFO 硬件配置记录，包括CPU、操作系统信息 ISDN 域名对应的ISDN号码 MB 存放指定邮箱的服务器 MG 邮件组记录 MINFO 邮件组和邮箱的信息记录 MR 改名的邮箱记录 MX 邮件服务器记录 NS 名字服务器记录 PTR 反向记录 RP 负责人记录 RT 路由穿透记录 SRV TCP服务器信息记录 TXT 域名对应的文本信息 X25 域名对应的X.25地址记录 例如： [root@localhost ~]# nslookup -qt=mx baidu.com 8.8.8.8 *** Invalid option: qt=mx Server: 8.8.8.8 Address: 8.8.8.8#53 Non-authoritative answer: Name: baidu.com Address: 111.13.101.208 Name: baidu.com Address: 123.125.114.144 Name: baidu.com Address: 180.149.132.47 Name: baidu.com Address: 220.181.57.217 ","date":"2021-05-06","objectID":"/nslookup%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:2:0","tags":["linux"],"title":"Nslookup命令详解","uri":"/nslookup%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["运维"],"content":"3、查询更具体的信息 查询语法： nslookup –d [其他参数] domain [dns-server] #只要在查询的时候，加上-d参数，即可查询域名的缓存。 ","date":"2021-05-06","objectID":"/nslookup%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/:2:1","tags":["linux"],"title":"Nslookup命令详解","uri":"/nslookup%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"categories":["hugo系列"],"content":"gitalk 官方demo环境 gitalk github地址 ","date":"2021-04-29","objectID":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/:0:0","tags":["博客搭建","hugo"],"title":"如何给不同theme的Hugo添加评论系统gitalk","uri":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/"},{"categories":["hugo系列"],"content":"运行效果 #评论是调用github的api来完成的，不依赖第三方 https://api.github.com/repos/yourrepo/issues? ","date":"2021-04-29","objectID":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/:1:0","tags":["博客搭建","hugo"],"title":"如何给不同theme的Hugo添加评论系统gitalk","uri":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/"},{"categories":["hugo系列"],"content":"1. 创建 Github Application 如果没有application，就先创建 Github Application ，这里是官方中文帮助文档 Client ID，Client secrets在后面config.toml中配置时，需要使用。 ","date":"2021-04-29","objectID":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/:2:0","tags":["博客搭建","hugo"],"title":"如何给不同theme的Hugo添加评论系统gitalk","uri":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/"},{"categories":["hugo系列"],"content":"方式一,直接引用Hugo的主题 如果您是直接下载使用的主题，只需要四大步骤 为主题添加 gitalk.html 模板 路径地址 |m10c/layouts/partials/gitalk.htm {{ if .Site.Params.enableGitalk }} \u003cdiv id=\"gitalk-container\"\u003e\u003c/div\u003e \u003clink rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"\u003e \u003cscript src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"\u003e\u003c/script\u003e \u003cscript\u003e const gitalk = new Gitalk({ clientID: '{{ .Site.Params.Gitalk.clientID }}', clientSecret: '{{ .Site.Params.Gitalk.clientSecret }}', repo: '{{ .Site.Params.Gitalk.repo }}', owner: '{{ .Site.Params.Gitalk.owner }}', admin: ['{{ .Site.Params.Gitalk.owner }}'], id: location.pathname, // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }); (function() { if ([\"localhost\", \"127.0.0.1\"].indexOf(window.location.hostname) != -1) { document.getElementById('gitalk-container').innerHTML = 'Gitalk comments not available by default when the website is previewed locally.'; return; } gitalk.render('gitalk-container'); })(); \u003c/script\u003e {{ end }} 在 single.html 插入 {{ partial \"gitalk.html\" . }} 路径地址 |m10c/layouts/_default/single.html {{ partial \"gitalk.html\" . }} config.toml [params] enableGitalk = true #必须添加才生效 [params.gitalk] clientID = \"Client ID\" # 您刚才创建Github Application 的 Client ID clientSecret = \"Client Secret\" # 您刚才创建Github Application 的 Client Secret repo = \"xxxx.github.io\" # 您的博客的github地址Repository name，例如：xxxx.github.io owner = \"GitHub ID\" # 您的GitHub ID admin= \"GitHub ID\" # 您的GitHub ID id= \"location.pathname\" # 文章页面的链接地址就是ID labels= \"gitalk\" # Github issue labels. If you used to use Gitment, you can change it perPage= 15 # Pagination size, with maximum 100. pagerDirection= \"last\" # Comment sorting direction, available values are 'last' and 'first'. createIssueManually= true # 设置为true，如果是管理员登录，会自动创建issue，如果是false，需要管理员手动添加第一个评论(issue) distractionFreeMode= false # Enable hot key (cmd|ctrl + enter) submit comment. 配置 OK 后，进行编译网站 并且 push 到 你的 GitHub 上，如果 createIssueManually 设置是 true . 首次登录后 Gitalk 就能正常使用，否则需要登录后，发起一个首论，才能正常使用。 ","date":"2021-04-29","objectID":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/:3:0","tags":["博客搭建","hugo"],"title":"如何给不同theme的Hugo添加评论系统gitalk","uri":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/"},{"categories":["hugo系列"],"content":"方式二,通过submodule引用Hugo的主题 如果你的themes是使用submodule来管理的，就是另一种方式来修改theme了。 Git Submodule 允许一个git仓库，作为另一个git仓库的子目录，并且保持父项目和子项目相互独立。 #其它操作都是一样，只是需要你先在theme仓库中，把上面的gitalk.html和single.html都做了，提交代码到你自己的theme仓库 #需要在themes下 cd /your地址/xxx.github.io.source/themes #查看日志 git log #然后再进入你的themes实例进行更新 git submodule update #后续就是和本地编辑的theme修改一样的 ","date":"2021-04-29","objectID":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/:4:0","tags":["博客搭建","hugo"],"title":"如何给不同theme的Hugo添加评论系统gitalk","uri":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/"},{"categories":["hugo系列"],"content":"补充：bolg评论功能选择 Disqus（国外的，需要 VPN，kexueshangwang） Hypercomments（不支持 Markdown） valine Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。 理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。 特性 快速 安全 Emoji 😉 无后端实现 MarkDown 全语法支持 轻量易用 文章阅读量统计 v1.2.0+ Github大礼包：gitment ， gitalk （推荐），gitter （推荐）; 三个都支持Markdown 原则上来说比较靠谱的是gitment（依托于github issue，能够自己管理，而且被墙的概率小），不过兼容性不太好（需要chrome内核才行）。 Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。 特性 使用 GitHub 登录 支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru, de, pl, ko] 支持个人或组织 无干扰模式（设置 distractionFreeMode 为 true 开启） 快捷键提交评论 （cmd|ctrl + enter） ","date":"2021-04-29","objectID":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/:5:0","tags":["博客搭建","hugo"],"title":"如何给不同theme的Hugo添加评论系统gitalk","uri":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/"},{"categories":["hugo系列"],"content":"碰到的问题 ","date":"2021-04-29","objectID":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/:6:0","tags":["博客搭建","hugo"],"title":"如何给不同theme的Hugo添加评论系统gitalk","uri":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/"},{"categories":["hugo系列"],"content":"404 Error: Not Found 解决办法：未能正确找到仓库 repo，检查一下你的仓库是否配置正确。 #params.gitalk repo = \"rep名字\" # 你的github托管仓库，点击settings,就能看到Repository name #或者参考界面，按F12,查看issues的get请求地址 https://api.github.com/repos/owner名字/repo名称/issues?labels=Gitalk,... ","date":"2021-04-29","objectID":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/:6:1","tags":["博客搭建","hugo"],"title":"如何给不同theme的Hugo添加评论系统gitalk","uri":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/"},{"categories":["hugo系列"],"content":"Error: Validation Failed. 是因为 GitHub 对 Issue 的 label （文章页面的链接地址）存在限制，不能超过 50 个字符，否则会导致加载 Gitalk 插件失败。 Toml解决办法一：截取字符串 for toml 路径地址 |m10c/layouts/partials/gitalk.htm // 截取字符串 var title = location.pathname.substr(0, 50); var gitalk = new Gitalk({ clientID: 'xxxx', clientSecret: 'xxxx', repo: 'xxxx', owner: 'xxxx', admin: ['xxxx'], id: title, distractionFreeMode: false }) Html解决办法：中文标题被转码长度变长 var gitalk = new Gitalk({ clientID: '{{ theme.gitalk.ClientID }}', clientSecret: '{{ theme.gitalk.ClientSecret }}', repo: '{{ theme.gitalk.repo }}', owner: '{{ theme.gitalk.githubID }}', admin: ['{{ theme.gitalk.adminUser }}'], id: decodeURI(location.pathname), distractionFreeMode: '{{ theme.gitalk.distractionFreeMode }}' }) gitalk.render('gitalk-container') ","date":"2021-04-29","objectID":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/:6:2","tags":["博客搭建","hugo"],"title":"如何给不同theme的Hugo添加评论系统gitalk","uri":"/%E5%A6%82%E4%BD%95%E7%BB%99%E4%B8%8D%E5%90%8Ctheme%E7%9A%84hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/"},{"categories":["运维"],"content":"openssl、openssh下载地址 https://openbsd.hk/pub/OpenBSD/OpenSSH/portable/ （ssh） https://ftp.openssl.org/source/ (ssl) 配置yum源 mount /dev/sdd /mnt vim /etc/yum.repos.d/local.repo #编辑 [my] name=my baseurl=file:///mnt enabled=1 gpgcheck=0 yum list #检查配置是否成功 [centos7.7] baseurl = http://10.2.11.11:80/tstack/tstack-repos/repo/centos7.7/ enabled = 1 gpgcheck = 0 name = tstack YUM repo 安装相关软件包 yum install -y zlib* pam* krb5* openssl openssl-devel make perl-Test-Simple gcc-c++ libtool setenforce 0 #关掉seliunx 安装ssl #备份 mv /usr/bin/openssl /usr/bin/openssl_bak mv /usr/include/openssl /usr/include/openssl_bak cd /tmp/openssh #上传ssl包到/tmp/openssh下（自建建目录） tar zxvf openssl-1.0.2s.tar.gz #解压 cd openssl-1.0.2s #切换目录 ./config --prefix=/usr --openssldir=/etc/ssl --shared zlib #检查环境 make \u0026\u0026 make test echo $? (0正常 1不正常) make install openssl version -a ------------------------------------------- 问题：如果升级后发现头文件和库文件匹配不上【OpenSSL 1.1.1k 25 Mar 2021（Library OpenSSL 1.1.1h 25 Mar 2020）】 解决：重新检查环境，并重新执行make \u0026 make install ./config --prefix=/usr/local/openssl --openssldir=/etc/ssl --shared zlib -------------------------------------------- 升级ssh cp -rp /etc/ssh /etc/ssh_$(date +%Y%M%d%H) cd /tmp/openssh tar zxvf openssh-8.1p1.tar.gz cd openssh-8.1p1 ./configure --prefix=/usr --sysconfdir=/etc/ssh --with-md5-passwords -with-kerberos5 --with-pam --with-zlib --with-ssl-dir=/usr/ make \u0026\u0026 make install chmod 600 /etc/ssh/ssh_host*_key sed -i \"s/Type=${SSH_START_TYPE}/Type=simple/\" /usr/lib/systemd/system/sshd.service systemctl daemon-reload systemctl restart sshd.service ssh -V ","date":"2021-04-29","objectID":"/%E6%89%8B%E5%8A%A8%E5%8D%87%E7%BA%A7ssh/:0:0","tags":["升级ssh"],"title":"手动升级ssh","uri":"/%E6%89%8B%E5%8A%A8%E5%8D%87%E7%BA%A7ssh/"},{"categories":["运维"],"content":"centos基础 ifconfig/ip addr # 查看ip netstat -tunlp | grep 8080 #查询8080端口是否存在 ping 10.0.0.1 -s 65507 #包大小为65507 ping 10.0.0.1 -l 65500 #window ifconfig eth0 192.168.60.128 #修改ip free -m #查看内存 free -h 主要看第一行Mem 总共 15710 M , 使用了 823 M , 剩余空闲 7895 M 。这个shared 223M 也不知道用在哪里。 #清除缓存 sudo sync \u0026\u0026 sudo echo 3 \u003e /proc/sys/vm/drop_caches ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:0:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"Linux之间互传文件： ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:1:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"本机-\u003e远程服务器 scp /home/shaoxiaohu/test1.txt shaoxiaohu@172.16.18.1:/home/test2.txt ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:1:1","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"远程服务器-\u003e本机 scp shaoxiaohu@172.16.18.2:/home/test2.txt /home/shaoxiaohu/test1.txt ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:1:2","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"文件夹复制 scp -r shaoxiaohu@172.16.18.2:/home/ /home/ 如果端口号有更改，需在scp 后输入：-P 端口号 （注意是大写，ssh的命令中 -p是小写） tail -100f access.log #查看100条日志 echo 0 \u003e access.log #清除日志 ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:1:3","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"dump抓包 抓包检查，使用tcpdump抓包，tcpdump -vv -i 网卡名称 tcp port 监听端口 -w 文件名.pcap，在服务端和客户端上都抓一下，保存下来分析。（使用wireshark来分析） tcpdump -i eth0 host 10.50.13.121 -vv -w 001.pcap ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:2:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"定时任务 查询crontab服务是否开启 systemctl status crond.service vim /data/monitor.sh #!/bin/sh Monitor() { for i in 1 do curl http://127.0.0.1:8888/hello done } Monitor\u003e\u003e/tmp/tcpbridgeMonitor.log ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:3:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"运行crontab –e 编写一条定时任务 crontab -e ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:3:1","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"写入 * * * * * /data/monitor.sh * * * * * sleep 20; /data/monitor.sh * * * * * sleep 40; /data/monitor.sh ##每隔20秒执行一次监控脚本 ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:3:2","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"赋权 chmod -R 777 /data/monitor.sh ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:3:3","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"修改拥有者和群组 chown -R mysql:mysql /data/test #-R处理指定目录以及其子目录下的所有文件 ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:3:4","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"查看最近的crontab执行情况 tail -f /var/spool/mail/root ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:3:5","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"查询当前用户定时任务 crontab -l ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:3:6","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"删除当前用户定时任务 crontab -r 日志拉取与截取 ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:3:7","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"拉取指定时间的日志 sed -n ‘/2010-11-17 09:[0-9][0-9]:[0-9][0-9]/,/2010-11-17 16:[0-9][0-9]:[0-9][0-9]/p’ /hime/log.csv \u003e /data/serverlog/log.csv 注意：如果需要截取的日志太大，达到几个G的话，不能去vi打开文件: 根据之前的日志格式，[使用正则表达式](https://www.baidu.com/s?wd=使用正则表达式\u0026tn=44039180_cpr\u0026fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YkP1c1uHTLn1ndnH9-PH0z0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnHRLrHT3nHDd): 截图中日志的格式为：2019-06-13 10:15:27.878 所以正则表达式为：2019-06-13 09:[0-9][0-9]:[0-9][0-9].[0-9][0-9][0-9] *如果截取的时间段是22/Feb/2019:15:57:00，那么可以使用在 / 前使用转移符 * sed -n '/22\\/Feb\\/2019:15:57:00/,/22\\/Feb\\/2019:15:57:59/'p /home/wwwlogs/access.log \u003e/root/access0925_0928.log mysql全量and库备份与数据还原 ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:4:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"全量备份 /usr/local/mysql/bin/mysqldump -u用户名 -p密码 --all-databases \u003e /保存路径/文件名.sql ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:5:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"库备份 /usr/local/mysql/bin/mysqldump -u用户名 -p密码 库名1 库名2 \u003e /保存路径/文件名.sql ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:6:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"使用source 命令恢复数据库 nohup启动 nohup ./yzweworkplatform-backend \u003elog.txt \u0026 （注释：加了\u0026参数为后台启动，没有加按ctrl会退出） 主机名** [root@fangjian ~]# hostnamectl #查看主机名 Static hostname: brace Pretty hostname: Brace Icon name: computer-vm Chassis: vm Machine ID: 20191225111607875619293640639763 Boot ID: 25ac5021d229471382a26bea3d351de3 Virtualization: kvm Operating System: CentOS Linux 7 (Core) CPE OS Name: cpe:/o:centos:centos:7 Kernel: Linux 3.10.0-1062.9.1.el7.x86_64 Architecture: x86-64 ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:7:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"临时修改主机名 [root@fangjian ~]# hostname yin #临时修改主机名，关机后失效 [root@fangjian ~]# hostname yin ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:8:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"永久修改主机名 1、方法一：使用hostnamectl命令 [root@fangjian ~]# hostnamectl set-hostname Brace #永久设置用户名，关机后不失效 [root@fangjian ~]# hostname brace 2、方法二：修改配置文件 /etc/hostname 保存退出 [root@fangjian ~]# vi /etc/hostname # 进入vi，删除旧主机名，输入新主机名，Esc后冒号 wq退出保存 brace　# reboot重启生效 ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:9:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"域名的md5值 echo -n \"demo.com\" | md5sum ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:10:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"释放内存 free -h #查询内存 sync #落盘 echo 3 \u003e/proc/sys/vm/drop_caches #释放缓存 ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:11:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["运维"],"content":"大文件上传到linux服务器解决方法 背景：有些堡垒上传文件到服务器有限制文件上传大小的限制，比如说只能上传10G，解决方法入下。 1、首先第一步骤，压缩多个压缩文件，如下图 2、上传到服务 3、然后执行：unrar e big_pag.part1.rar unrar的rpm安装包，使用rpm -ivh 安装 # md5sum unrar-5.4.0-1.el7.x86_64.rpm 5bf3243649e36d199a24e722d5037561 unrar-5.4.0-1.el7.x86_64.rpm ","date":"2021-04-26","objectID":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/:12:0","tags":["常见命令","shell"],"title":"Shell常见命令分享","uri":"/shell%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%88%86%E4%BA%AB/"},{"categories":["hugo系列"],"content":"brew 文档 ","date":"2021-04-26","objectID":"/hugo/:0:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"brew Linux安装文档 文档 ","date":"2021-04-26","objectID":"/hugo/:1:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"前期准备 debian或者Ubuntu sudo apt-get install build-essential procps curl file git ","date":"2021-04-26","objectID":"/hugo/:2:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"开始安装 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" ","date":"2021-04-26","objectID":"/hugo/:3:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"环境变量配置 test -d ~/.linuxbrew \u0026\u0026 eval $(~/.linuxbrew/bin/brew shellenv) test -d /home/linuxbrew/.linuxbrew \u0026\u0026 eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv) test -r ~/.bash_profile \u0026\u0026 echo \"eval \\$($(brew --prefix)/bin/brew shellenv)\" \u003e\u003e~/.bash_profile echo \"eval \\$($(brew --prefix)/bin/brew shellenv)\" \u003e\u003e~/.profile ","date":"2021-04-26","objectID":"/hugo/:4:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"安装第一个包工具 brew install hello hello which hello ","date":"2021-04-26","objectID":"/hugo/:5:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"brew框架安装目录查询 which brew ","date":"2021-04-26","objectID":"/hugo/:6:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"更新hello包 brew upgrade hello ","date":"2021-04-26","objectID":"/hugo/:7:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"用brew工具生成静态网站 brew install hugo ","date":"2021-04-26","objectID":"/hugo/:8:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"可用包一览 可下载包 hugo ","date":"2021-04-26","objectID":"/hugo/:9:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"官网 官网 ","date":"2021-04-26","objectID":"/hugo/:10:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"安装 首先需要再Linux（Ubuntu）上安装brew包管理工具 brew install hugo hugo help hugo env #环境版本号 ","date":"2021-04-26","objectID":"/hugo/:11:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"使用步骤 ","date":"2021-04-26","objectID":"/hugo/:12:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"1.建立一个网站 hugo new site myweb cd myweb vim config.toml baseURL = \"http://xxx.example.org/\" languageCode = \"zh\" title = \"小全技术站\" 其他可设置内容 hugo config ","date":"2021-04-26","objectID":"/hugo/:12:1","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"2.加入一个主题 主题官网 cd themes #如果没有主题文件夹mkdir themes 按照主题文档来 git clone https://github.com/google/docsy.git cp /home/lxq/myweb/themes/docsy/config.toml /home/lxq/myweb ","date":"2021-04-26","objectID":"/hugo/:12:2","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"3.网站加入内容 vim /home/lxq/myweb/archetypes/default.md This is my demo 中文测试 ","date":"2021-04-26","objectID":"/hugo/:12:3","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"4.生成三个页面 cd /myweb hugo new posts/page1.md hugo new posts/page2.md hugo new posts/page3.md 建立静态网站 hugo ls -l public/ 或在配置文件中设置 theme = \"book\" 使用hugo http服务 hugo server -D --bind 192.168.63.130 --baseURL http://192.168.63.130/ hugo server --disableFastRender -e production -D --bind 192.168.75.128 --baseURL http://192.168.75.128/ hugo不错模板 模板推荐 远程部署到Pages服务 Hugo和Hexo一样是静态站点生成工具，不需要服务器即可进行部署运行，为了可以在网络上也访问到我们的博客，需要将静态博客部署到某些网站的pages服务上，借用人家的服务器进行托管。 常用的Pages服务有GitHub pages、Coding pages等，由于暂时没有找到好用的Hugo的远程部署插件，所以这里使用Git命令来进行远程部署。 注意，所谓的远程部署，其实就是把hugo命令生成的public目录里的所有文件push到远程库，然后启用Pages服务进行静态网站的部署。这样，当有人访问静态站点的主页时，Pages服务就会去读取根目录下的index.html。 本文以部署到GitHub Pages为例。 ","date":"2021-04-26","objectID":"/hugo/:12:4","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"1.安装Git 首先要安装Git，Git是一个版本控制工具，可以用来帮忙管理我们的博客，直接前往官网下载安装包即可。 注意 下载链接 在安装的时候会问你是否安装git的cmd工具，把这个也一起安装了后就可以不需要配置环境变量了。这样就可以直接在cmd窗口里运行Git命令，如git version。 当然也可以直接使用安装时自带的Git Bash，个人更喜欢用Git Bash。 ","date":"2021-04-26","objectID":"/hugo/:13:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"2.将个人博客部署到远端服务器(可以使用github部署到github仓库) 在github创建一个远端仓库 ","date":"2021-04-26","objectID":"/hugo/:14:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"3.在myblog目录下执行 hugo --theme=m10c --baseUrl=\"https://liuxiaoquan.github.io/\" --buildDrafts #执行其中一条命令 hugo --theme=m10c --baseUrl=\"https://freerun.xyz/\" --buildDrafts #执行其中一条命令 hugo --theme=LoveIt --baseUrl=\"https://freerun.xyz/\" --buildDrafts ","date":"2021-04-26","objectID":"/hugo/:15:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"4.接下来把public文件推送到github上： ","date":"2021-04-26","objectID":"/hugo/:16:0","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"切换到public文件夹下，代开命令行窗口，依次键入 git init #将此public文件夹变成git本地仓库 git add . #将public文件夹下的所有文件放入缓存流中等待提交（注意后面的点） git commit -m \"Hugo第一次提交\" #这样就把缓存内容放进发送头，仍为待发送状态 git remote add origin https://github.com/liuxiaoquan/liuxiaoquan.github.io.git #绑定了.git配置文件夹对应的远端服务器的发布了已经 git push -u origin master #推送到githubu git push origin master -f #强制覆盖远程仓库的内容 ","date":"2021-04-26","objectID":"/hugo/:16:1","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":["hugo系列"],"content":"添加CNAME文件 lxq@ubuntu:~/loveltblog/public$ ll CNAME -rw-rw-r-- 1 lxq lxq 12 May 12 21:33 CNAME lxq@ubuntu:~/loveltblog/public$ cat CNAME freerun.xyz ","date":"2021-04-26","objectID":"/hugo/:16:2","tags":["博客搭建","hugo"],"title":"hugo搭建","uri":"/hugo/"},{"categories":null,"content":"信息 前言 写博的目的其实很简单,将现有的知识做一些梳理跟记录,方便自己随时回顾，并且方便碰到相同问题能第一时间找到解决方法 信息 最初 做IT行业不管是开发/运维/测试 都会碰见各种各样的问题，我也碰见过很多相同问题，可能随着时间推移，很多当初已经有解决方案的问题都逐一的忘掉了，所以才有这个博客的诞生 ","date":"2021-01-19","objectID":"/abouts/:0:0","tags":["about"],"title":"about","uri":"/abouts/"},{"categories":["运维"],"content":"备注说明：lvm的硬盘挂载原理，可参考如下链接，有详细解释所有的挂载硬盘原理 https://zhuanlan.zhihu.com/p/296777898 ","date":"2019-05-11","objectID":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/:0:0","tags":["linux","LVM,PV,VG"],"title":"Linux-Lvm挂载硬盘步骤","uri":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/"},{"categories":["运维"],"content":"步骤： ","date":"2019-05-11","objectID":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/:1:0","tags":["linux","LVM,PV,VG"],"title":"Linux-Lvm挂载硬盘步骤","uri":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/"},{"categories":["运维"],"content":"硬盘格式化成pv pvcreate /dev/sdb ","date":"2019-05-11","objectID":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/:1:1","tags":["linux","LVM,PV,VG"],"title":"Linux-Lvm挂载硬盘步骤","uri":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/"},{"categories":["运维"],"content":"创建完PV以后，我们可以使用pvdisplay(显示详细信息)、pvs命令来查看当前pv的信息 pvdisplay pvs ","date":"2019-05-11","objectID":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/:1:2","tags":["linux","LVM,PV,VG"],"title":"Linux-Lvm挂载硬盘步骤","uri":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/"},{"categories":["运维"],"content":"在创建完PV以后，这时候我们需要创建一个VG，然后将我们的PV都加入到这个卷组当中，在创建卷组时要给该卷组起一个名字 vgcreate mydata /dev/sdb ","date":"2019-05-11","objectID":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/:1:3","tags":["linux","LVM,PV,VG"],"title":"Linux-Lvm挂载硬盘步骤","uri":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/"},{"categories":["运维"],"content":"同样，在创建好VG以后，我们也可以使用 vgdisplay 或者 vgs 命来来查看VG的信息 vgdisplay vgs #新物理卷，将新增卷增加到原有的卷组中 -----说明：新增加硬盘到lvm组里面的，如果没有则不需要执行 #vgextend xiaoluo /dev/sdd1 #基于卷组(VG)创建逻辑卷(LV)　通过 lvcreate 命令 lvcreate -n mylv -L 2G xiaoluo lvcreate -n myweb -l 100%free lnweixin #将剩余的所有空间分配给myweb lvcreate -n myweb -l 100% lnweixin #将所有空间分配给myweb lvcreate -n mydata -l 100%free mydata #格式化并使用我们的逻辑卷 mkfs.xfs /dev/mydata/mydata #格式化我们的逻辑卷以后，就可以使用 mount 命令将其进行挂载，我们将其挂载到 /mnt 目录下 mount /dev/mydata/mydata /data #便于以后服务器重启自动挂载,需要将创建好的文件系统挂载信息添加到/etc/fstab里面.UUID可以通过 blkid命令查询. #为了查看/etc/fstab是否设置正确,可以先卸载逻辑卷data1,然后使用mount –a 使内核重新读取/etc/fstab,看是否能够自动挂载. #自此lvm挂载硬盘已完成 ","date":"2019-05-11","objectID":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/:1:4","tags":["linux","LVM,PV,VG"],"title":"Linux-Lvm挂载硬盘步骤","uri":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/"},{"categories":["运维"],"content":"删除逻辑卷 ","date":"2019-05-11","objectID":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/:2:0","tags":["linux","LVM,PV,VG"],"title":"Linux-Lvm挂载硬盘步骤","uri":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/"},{"categories":["运维"],"content":"我们在创建好逻辑卷后可以通过创建文件系统，挂载逻辑卷来使用它，如果说我们不想用了也可以将其删除掉。 ①首先将正在使用的逻辑卷卸载掉　通过 umount 命令 ②将逻辑卷先删除　通过 lvremove 命令 ③删除卷组　通过 vgremove 命令 ④最后再来删除我们的物理卷　通过 pvremove 命令 mount /dev/xiaoluo/mylv /mnt/ umount /mnt/ lvremove /dev/xiaoluo/mylv vgremove xiaoluo pvremove /dev/sdb 此时我们的刚创建的逻辑卷 mylv，卷组 xiaoluo以及物理卷 /dev/sdb 已经从我们当前操作系统上删除掉了，通过 lvs、vgs、pvs命令可以查看一下 ","date":"2019-05-11","objectID":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/:2:1","tags":["linux","LVM,PV,VG"],"title":"Linux-Lvm挂载硬盘步骤","uri":"/lvm%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A4/"}]